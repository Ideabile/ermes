{"version":3,"sources":["webpack:///./node_modules/emmet/emmet.js"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_","root","this","previousUnderscore","breaker","ArrayProto","Array","prototype","ObjProto","Object","FuncProto","Function","slice","unshift","toString","hasOwnProperty","nativeForEach","forEach","nativeMap","map","nativeReduce","reduce","nativeReduceRight","reduceRight","nativeFilter","filter","nativeEvery","every","nativeSome","some","nativeIndexOf","indexOf","nativeLastIndexOf","lastIndexOf","nativeIsArray","isArray","nativeKeys","keys","nativeBind","bind","obj","wrapper","module","exports","VERSION","each","iterator","context","length","i","l","call","key","has","collect","results","value","index","list","foldl","inject","memo","initial","arguments","TypeError","foldr","reversed","toArray","reverse","find","detect","result","any","select","reject","all","identity","include","contains","target","found","invoke","method","args","isFunction","apply","pluck","max","Math","isEmpty","Infinity","computed","min","shuffle","rand","shuffled","floor","random","sortBy","val","criteria","sort","left","right","a","b","groupBy","push","sortedIndex","array","low","high","mid","isArguments","values","size","first","head","take","n","guard","last","rest","tail","compact","flatten","shallow","concat","without","difference","uniq","unique","isSorted","union","intersection","intersect","item","other","zip","range","start","stop","step","len","ceil","idx","ctor","func","bound","self","bindAll","funcs","functions","f","memoize","hasher","delay","wait","setTimeout","defer","throttle","timeout","throttling","more","whenDone","debounce","immediate","clearTimeout","once","ran","wrap","compose","after","times","methods","names","extend","source","prop","pick","defaults","clone","isObject","tap","interceptor","isEqual","eq","stack","_chain","_wrapped","className","String","global","multiline","ignoreCase","constructor","pop","isString","isElement","nodeType","isNumber","isFinite","isNaN","isBoolean","isDate","isRegExp","isNull","isUndefined","noConflict","escape","string","replace","object","property","mixin","name","addToWrapper","idCounter","uniqueId","prefix","id","templateSettings","evaluate","interpolate","noMatch","escapes","\\","'","r","t","u2028","u2029","p","escaper","unescaper","unescape","code","match","template","text","data","settings","variable","render","chain","wrapped","emmet","e","modules","moduleLoader","define","factory","exec","require","fn","protoProps","classProps","child","parent","staticProps","__super__","inherits","expandAbbreviation","abbr","syntax","profile","contextNode","filters","parser","get","resetTabstopIndex","extractFromAbbreviation","outputTree","parse","filtersList","composeList","defaultSyntax","defaultProfile","log","console","setModuleLoader","undefined","reValidName","reWord","pairs","[","(","{","spliceFn","splice","preprocessors","postprocessors","outputProcessors","AbbreviationNode","children","_attributes","abbreviation","counter","_name","_text","repeatCount","hasImplicitRepeat","_data","end","content","padding","addChild","position","node","attr","remove","ix","items","updateProperty","findAll","elemName","toLowerCase","is","insertChildContent","res","matchedResource","attributeList","attrs","attributes","optimizeAttributes","attribute","_setRepeat","count","parseInt","setAbbreviation","that","str","abbrText","stream","create","eol","peek","skipToPair","pos","element","substring","stripped","current","next","extractText","abbrAttrs","attrMap","#",".","nameEnd","attrName","eatWhile","extractAttributes","parseAttributes","test","utils","innerContent","join","keepVariable","padString","hasEmptyChildren","hasImplicitName","isTextNode","isGroup","isRepeating","deepestChild","consumeQuotedValue","quote","ch","attrSet","trim","eatSpace","attrValue","lookup","la","unroll","j","maxCount","squash","isAllowedChar","charCode","charCodeAt","replaceCounter","options","tree","parseAbbreviation","multiplier","loopProtector","inner","c","backUp","isMarker","attrLookup","addPreprocessor","removeFilter","preprocessor","addPostprocessor","removePostprocessor","addOutputProcessor","removeOutputProcessor","matchResources","resources","elements","getMatchedResource","subtree","repeatedChildren","outputPlaceholder","locateOutputPlaceholder","replaceOutputPlaceholders","ranges","replaceSubstring","hasOutputPlaceholder","insertPastedContent","overwrite","nodesWithPlaceholders","deepest","pastedContent","lines","splitByLines","pastedContentObj","resolveNodeNames","tagName","resolve","walker","isOp","isNameChar","isDigit","tokens","total_lines","linenum","line","chnum","init","me","split","nextLine","nextChar","charAt","opsa","opsmatcha","ops","opsmatch","matchattr","isset","v","getConf","char","tokener","type","conf","w","charstart","charend","linestart","lineend","error","m","config","message","identifier","pre","token","tokenize","white","cnext","pk","comment","q","depth","brace","nondigit","point","num","op","lex","toSource","toks","src","Kludges","autoSelfClosers","implicitlyClosed","contextGrabbers","doNotIndent","allowUnquoted","allowMissing","inText","state","eat","inBlock","doctype","inTag","style","terminator","setStyle","curState","pass","cc","cont","popContext","prev","startOfLine","maybePopContext","noIndent","indent","indented","pushContext","err","callee","nextTagName","parentTagName","attvalue","attvaluemaybe","sol","offset","score","fuzziness","start_of_string_bonus","abbreviation_score","final_score","character_score","index_in_string","index_c_lowercase","index_c_uppercase","min_index","total_character_score","abbreviation_length","string_length","fuzzies","toUpperCase","caretPlaceholder","StringBuilder","append","valueOf","reTag","endsWithTag","isNumeric","getNewline","nl","getVariable","setNewline","setVariable","removeEmpty","normalizeNewline","repeatString","howMany","getStringsPads","strings","lengths","s","pad","padStr","zeroPadString","il","unindentString","search","substr","replaceUnescapedSymbol","symbol","sl","matchCount","curSl","newValue","replaceData","replaceVariables","vars","resolver","p1","processText","total","matchNum","base","decrement","matchesTag","escapeText","unescapeText","getCaretPlaceholder","setCaretPlaceholder","getLinePadding","getLinePaddingFromPosition","lineRange","findNewlineBounds","escapeForRegexp","specials","RegExp","prettifyNumber","fraction","toFixed","stringBuilder","narrowToNonSpace","reSpace","from","deepMerge","copy","copyIsArray","cmp","Range","abs","equal","shift","delta","overlap","inside","loc","create2","HandlerList","_list","add","order","listFn","skipValue","h","TokenIterator","_position","reset","hasNext","_i","_il","itemNext","itemPrev","nextUntil","callback","StringStream","skipToEnd","skipTo","open","close","braceCount","pattern","consume","caseInsensitive","cased","cache","systemSettings","userSettings","resolvers","parseItem","normalizeCaretPlaceholder","normalizeName","setVocabulary","getVocabulary","findSnippet","getSection","voc","variables","hasSyntax","addResolver","removeResolver","subsections","findItem","topSection","subsection","matchedItem","sectionName","fuzzyFindSnippet","minScore","payload","getAllSnippets","sc","scores","nk","parsedValue","cacheKey","sectionKey","section","stackItem","k","zc","actions","humanizeActionName","label","run","action","getAll","getList","getMenu","skipActions","hidden","actionName","ctx","parts","menuName","submenu","getActionNameForMenuTitle","title","menu","profiles","tag_case","attr_case","attr_quotes","tag_nl","tag_nl_leaf","place_cursor","inline_break","self_closing_tag","extraFilters","OutputProfile","stringCase","attributeName","attributeQuote","selfClosing","param","cursor","caseValue","createProfile","createDefaultProfiles","plain","isInsideTag","html","caretPos","outputInfo","editor","getProfileName","getSyntax","getContent","unindent","getCurrentLinePadding","getCurrentLine","mimeTypes","gif","png","jpg","jpeg","svg","htm","extractAbbreviation","curOffset","startIndex","groupCount","textCount","getImageSize","nextByte","width","height","marker","captureContext","xml","xsl","tag","getCaretPos","startTag","tagTree","findExpressionBounds","exprStart","exprEnd","compoundUpdate","sel","getSelectionRange","replaceContent","createSelection","caret","detectSyntax","hint","isStyle","isInlineCSS","detectProfile","isXHTML","innerRange","parseFromPosition","itemFromPosition","valueRange","isSnippet","isUnary","is_empty","isInline","isInlineLevel","isBlock","hasTagsInContent","hasBlockChildren","childContent","appendIfNoChild","childVariableReplaced","output","chars","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","cdp1","cdp2","cdp3","b64","decode","o1","o2","o3","h3","h4","bits","ac","tmpArr","fromCharCode","reOpenTag","reCloseTag","createMatcher","matches","selfClose","findClosingPair","matcher","jl","outerRange","_c","outerContent","startPlaceholderNum","tabstopIndex","defaultOptions","replaceCarets","tabstop","maxNum","tabstops","tsOptions","group","placeholder","variablesResolver","extract","placeholders","carets","marks","ret","buf","lastIx","tabStops","mark","ph","upgrade","placeholderMemo","varName","varValue","preferences","_dbgDefaults","_dbgPreferences","description","prefs","set","getArray","getDict","load","json","exportModified","_startTest","_stopTest","registeredFilters","additionalFilters","factories","reAttrs","elem","commonFactory","elementName","core","EditContainer","_children","_positions","initialize","_updateSource","update","EditElement","indexes","fullRange","nameRange","isAbsolute","nameToken","valueToken","_value","_pos","namePosition","valuePosition","createToken","styleBefore","styleSeparator","WHITESPACE_REMOVE_FROM_START","WHITESPACE_REMOVE_FROM_END","trimWhitespaceTokens","mask","whitespace","findValueRange","it","skipTokens","tok","findParts","sep","isValidIdentifier","CSSEditContainer","editTree","selectorRange","findSelectorRange","contentStart","propertyRange","CSSEditElement","_saveStyle","styles","donor","rule","_end","valueParts","isBackward","bounds","extractRule","bracePos","selector","baseName","styleQuote","XMLEditContainer","attrToken","XMLEditElement","extractTag","maxLen","handlers","info","getSelection","selRange","replaceRange","findAbbreviation","addHandler","removeHandler","curLine","getCurrentLineRange","editorUtils","prompt","newContent","parsedTree","toggleCSSComment","absPos","relPos","reSafeChar","cssItemFromPosition","genericCommentToggle","commentStart","commentEnd","commentRange","startToken","endToken","hasMatch","contentLen","searchComment","setCaretPos","toggleHTMLComment","findNewEditPoint","inc","curPoint","nextPoint","reEmptyLine","getLine","curChar","prevChar","curPos","newPoint","extractFn","rangeFn","itemRange","rng","contentLength","prevRange","searchPos","loop","findNextHTMLItem","isFirst","getOpeningTagFromPosition","findOpeningTagFromPosition","getRangeForHTMLItem","makePossibleRangesHTML","attrValueRange","attrStart","isQuote","classNameRanges","curRange","matchedRanges","makePossibleRangesCSS","stringStream","cssEditTree","fnBody","part","matchedRangeForCSSProperty","possibleRanges","searchFn","nearestItemFn","getRangeForNextItemInCSS","getRangeForPrevItemInCSS","lastMatch","matchPair","direction","narrowed","tagContentRange","startLineBounds","startLinePad","tagContent","profileName","slash","joinTag","splitTag","cssRule","oldRule","caretDelta","doCSSReflection","reflectValue","receiver","curName","curValue","refName","refValue","parseFloat","getReflectedValue","reName","vendorPrefix","getReflectedCSSName","actionUtils","expr","hasSign","hasDecimal","strNum","minus","$1","incrementNumber","hasCloseBrace","insValue","curPadding","nextPadding","selection","pair","textLen","startsWith","filePath","file","absPath","createPath","getFilePath","save","decodeFromBase64","imgPath","editorFile","realImgPath","locateFile","read","getExt","encodeToBase64","getImageSizeForSource","fileContent","au","compoundData","updateImageSizeCSS","xmlElem","updateImageSizeHTML","prefixObj","obsolete","transformName","properties","getProperties","supports","vendorPrefixes","descTemplate","descAddonTemplate","webkit","moz","ms","o","vendor","isSingleProperty","snippet","normalizeValue","hex","repeat","color","normalizeHexColor","getKeyword","aliases","isValidKeyword","keyword","hasPrefix","addPrefix","getSyntaxPreference","transformSnippet","isImportant","formatProperty","cssSyntaxes","expandToSnippet","ea","replaceFrom","replaceTo","supportsPrefix","prefixed","listPrefixes","getPrefix","removePrefix","extractPrefixes","prefixes","findValuesInAbbreviation","keywords","lastPart","parseValues","extractValues","abbrValues","unitlessProps","unit","getUnit","expand","autoInsertPrefixes","prefixData","valuesData","abbrData","snippetObj","splitSnippet","propName","noAutofill","findPrefixes","pads","defaultLinearDirections","reDeg","reKeyword","normalizeSpace","parseColorStop","colorStop","oldWebkitDirection","angle","textualDirection","getPrefixedNames","getPropertiesForGradient","gradient","propertyName","props","css","colorStops","oldWebkitLinearGradient","findGradient","cssProp","matchedPart","findGradientFromPosition","g","ruleStart","ruleEnd","insertPos","newCss","resolvedName","resolvePropertyName","alignVendor","before","propsToInsert","valuePads","namePads","pasteGradient","expandGradientOutsideValue","definition","parseLinearGradient","cs","cs2","fillImpliedPositions","generators","addGenerator","regexp","elementTypes","empty","blockLevel","inlineLevel","elementMap","ul","ol","table","tr","tbody","thead","tfoot","colgroup","optgroup","audio","video","getMapping","isTypeOf","isBlockLevel","isEmptyElement","addMapping","removeMapping","addElementToCollection","collection","col","getCollection","removeElementFromCollection","shouldRunHtmlFilter","getSeparators","modifier","bemParse","__bem","block","classNames","shortSymbol","re","normalizeClassName","reBlockName","transformClassName","separators","blockElem","elemModifiers","blockModifiers","processClassName","entityType","reSep","cleanName","process","abbrUtils","templateBefore","templateAfter","trigger","nodeBefore","nodeAfter","addComments","charMap","<",">","&","escapeChars","isVeryFirstChild","shouldAddLineBreak","shouldFormatInline","nodeCount","processTag","level","forceNl","shouldBreakInsideInline","makeAttributesString","otherAttrs","attrQuote","rePad","reNl","tags","xsl:variable","xsl:with-param","langs","en","common","words","ru","wordCound","lang","wordCount","startWithCommon","totalWords","sentence","sample","randint","insertCommas","paragraph","to","round","arr","iterations","randIx","totalCommas","addLang","userData","locale","charset","indentation","newline","snippets","@i","@import","@m","@media","@f","@f+","@kf","anim","anim-","animdel","animdir","animdir:n","animdir:r","animdir:a","animdir:ar","animdur","animfm","animfm:f","animfm:b","animfm:bt","animfm:bh","animic","animic:i","animn","animps","animps:p","animps:r","animtf","animtf:e","animtf:ei","animtf:eo","animtf:eio","animtf:l","animtf:cb","ap","!","pos:s","pos:a","pos:r","pos:f","t:a","r:a","b:a","l:a","z","z:a","fl","fl:n","fl:l","fl:r","cl","cl:n","cl:l","cl:r","cl:b","colm","colmc","colmf","colmg","colmr","colmrc","colmrs","colmrw","colms","colmw","d","d:n","d:b","d:i","d:ib","d:ib+","d:li","d:ri","d:cp","d:tb","d:itb","d:tbcp","d:tbcl","d:tbclg","d:tbhg","d:tbfg","d:tbr","d:tbrg","d:tbc","d:rb","d:rbb","d:rbbg","d:rbt","d:rbtg","v:v","v:h","v:c","ov","ov:v","ov:h","ov:s","ov:a","ovx","ovx:v","ovx:h","ovx:s","ovx:a","ovy","ovy:v","ovy:h","ovy:s","ovy:a","ovs","ovs:a","ovs:s","ovs:p","ovs:m","ovs:mq","zoo","zm","cp","cp:a","cp:r","bxz","bxz:cb","bxz:bb","bxsh","bxsh:r","bxsh:ra","bxsh:n","m:a","mt","mt:a","mr","mr:a","mb","mb:a","ml","ml:a","pt","pr","pb","pl","w:a","h:a","maw","maw:n","mah","mah:n","miw","mih","mar","mir","ori","ori:l","ori:p","ol:n","olo","olw","olw:tn","olw:m","olw:tc","ols","ols:n","ols:dt","ols:ds","ols:s","ols:db","ols:g","ols:r","ols:i","ols:o","olc","olc:i","bd","bd+","bd:n","bdbk","bdbk:c","bdcl","bdcl:c","bdcl:s","bdc","bdc:t","bdi","bdi:n","bdti","bdti:n","bdri","bdri:n","bdbi","bdbi:n","bdli","bdli:n","bdci","bdci:n","bdci:c","bdtli","bdtli:n","bdtli:c","bdtri","bdtri:n","bdtri:c","bdbri","bdbri:n","bdbri:c","bdbli","bdbli:n","bdbli:c","bdf","bdf:c","bdf:r","bdf:sc","bdf:st","bdf:ow","bdf:of","bdf:sp","bdlen","bdlen:a","bdsp","bds","bds:n","bds:h","bds:dt","bds:ds","bds:s","bds:db","bds:dtds","bds:dtdtds","bds:w","bds:g","bds:r","bds:i","bds:o","bdw","bdtw","bdrw","bdbw","bdlw","bdt","bt","bdt+","bdt:n","bdts","bdts:n","bdtc","bdtc:t","bdr","br","bdr+","bdr:n","bdrst","bdrst:n","bdrc","bdrc:t","bdb","bb","bdb+","bdb:n","bdbs","bdbs:n","bdbc","bdbc:t","bdl","bl","bdl+","bdl:n","bdls","bdls:n","bdlc","bdlc:t","bdrs","bdtrrs","bdtlrs","bdbrrs","bdblrs","bg","bg+","bg:n","bg:ie","bgc","bgc:t","bgi","bgi:n","bgr","bgr:n","bgr:x","bgr:y","bgr:sp","bgr:rd","bga","bga:f","bga:s","bgp","bgpx","bgpy","bgbk","bgbk:bb","bgbk:eb","bgbk:c","bgcp","bgcp:bb","bgcp:pb","bgcp:cb","bgcp:nc","bgo","bgo:pb","bgo:bb","bgo:cb","bgsz","bgsz:a","bgsz:ct","bgsz:cv","c:r","c:ra","cm","cnt","cnt:n","cnt:oq","cnt:noq","cnt:cq","cnt:ncq","cnt:a","cnt:c","cnt:cs","tbl","tbl:a","tbl:f","cps","cps:t","cps:b","ec","ec:s","ec:h","lis","lis:n","lisp","lisp:i","lisp:o","list:n","list:d","list:c","list:s","list:dc","list:dclz","list:lr","list:ur","lisi","lisi:n","q:n","q:ru","q:en","ct","ct:n","ct:oq","ct:noq","ct:cq","ct:ncq","ct:a","ct:c","ct:cs","coi","cor","va","va:sup","va:t","va:tt","va:m","va:bl","va:b","va:tb","va:sub","ta","ta:l","ta:c","ta:r","ta:j","ta-lst","tal:a","tal:l","tal:c","tal:r","td","td:n","td:u","td:o","td:l","te","te:n","te:ac","te:dt","te:c","te:ds","te:b","te:a","th","th:a","th:f","th:t","th:m","ti","ti:-","tj","tj:a","tj:iw","tj:ii","tj:ic","tj:d","tj:k","tj:t","tov","tov:e","tov:c","to+","to:n","tr:n","tt","tt:n","tt:c","tt:u","tt:l","tw","tw:n","tw:no","tw:u","tw:s","tsh","tsh:r","tsh:ra","tsh+","tsh:n","trf","trf:skx","trf:sky","trf:sc","trf:scx","trf:scy","trf:r","trf:t","trf:tx","trf:ty","trfo","trfs","trs","trsde","trsdu","trsp","trstf","lh","whs","whs:n","whs:p","whs:nw","whs:pw","whs:pl","whsc","whsc:n","whsc:k","whsc:l","whsc:bs","whsc:ba","wob","wob:n","wob:k","wob:ba","wos","wow","wow:nm","wow:n","wow:u","wow:s","wow:b","wm","wm:lrt","wm:lrb","wm:rlt","wm:rlb","wm:tbr","wm:tbl","wm:btl","wm:btr","lts","lts-n","f+","fw","fw:n","fw:b","fw:br","fw:lr","fs","fs:n","fs:i","fs:o","fv","fv:n","fv:sc","fz","fza","fza:n","ff","ff:s","ff:ss","ff:c","ff:f","ff:m","ff:a","ff:t","ff:v","fef","fef:n","fef:eg","fef:eb","fef:o","fem","femp","femp:b","femp:a","fems","fems:n","fems:ac","fems:dt","fems:c","fems:ds","fsm","fsm:a","fsm:n","fsm:aw","fst","fst:n","fst:uc","fst:ec","fst:c","fst:sc","fst:se","fst:e","fst:ee","fst:ue","op+","op:ie","op:ms","rsz","rsz:n","rsz:b","rsz:h","rsz:v","cur","cur:a","cur:d","cur:c","cur:ha","cur:he","cur:m","cur:p","cur:t","pgbb","pgbb:au","pgbb:al","pgbb:l","pgbb:r","pgbi","pgbi:au","pgbi:av","pgba","pgba:au","pgba:al","pgba:l","pgba:r","orp","us","wid","wfsm","wfsm:a","wfsm:s","wfsm:sa","wfsm:n","!!!","!!!4t","!!!4s","!!!xt","!!!xs","!!!xxs","cc:ie6","cc:ie","cc:noie","abbreviations","a:link","a:mail","acronym","basefont","frame","hr","bdo","bdo:r","bdo:l","link","link:css","link:print","link:favicon","link:touch","link:rss","link:atom","meta","meta:utf","meta:win","meta:vp","meta:compat","script","script:src","img","iframe","embed","area","area:d","area:c","area:r","area:p","form","form:get","form:post","inp","input:hidden","input:h","input:text","input:t","input:search","input:email","input:url","input:password","input:p","input:datetime","input:date","input:datetime-local","input:month","input:week","input:time","input:number","input:color","input:checkbox","input:c","input:radio","input:r","input:range","input:file","input:f","input:submit","input:s","input:image","input:i","input:button","input:b","isindex","input:reset","select:disabled","select:d","option","textarea","marquee","menu:context","menu:c","menu:toolbar","menu:t","html:xml","keygen","command","button:submit","button:s","button:reset","button:r","button:disabled","button:d","fieldset:disabled","fieldset:d","bq","acr","fig","figc","ifr","emb","cap","colg","fst:d","btn","btn:b","btn:r","btn:s","btn:d","optg","opt","tarea","leg","sect","art","hdr","ftr","adr","dlg","prog","fset","fset:d","datag","datal","kg","out","det","cmd","doc","doc4","html:4t","html:4s","html:xt","html:xs","html:xxs","html:5","ol+","ul+","dl+","map+","table+","colgroup+","colg+","tr+","select+","optgroup+","optg+","extends","tm","tmatch","tn","tname","api","imp","xsl:when","wh","ot","if","par","pare","var","vare","wp","co","for","tex","com","msg","fall","nam","pres","strip","proc","choose+","haml","scss","sass","less","stylus","styl"],"mappings":"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","file":"static/js/0.952ff735567f47df0e2f.js","sourcesContent":["//     Underscore.js 1.3.3\n//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.\n//     Underscore is freely distributable under the MIT license.\n//     Portions of Underscore are inspired or borrowed from Prototype,\n//     Oliver Steele's Functional, and John Resig's Micro-Templating.\n//     For all details and documentation:\n//     http://documentcloud.github.com/underscore\n\nvar _ = (function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var slice            = ArrayProto.slice,\n      unshift          = ArrayProto.unshift,\n      toString         = ObjProto.toString,\n      hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) { return new wrapper(obj); };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler \"advanced\" mode.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root['_'] = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.3.3';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      for (var key in obj) {\n        if (_.has(obj, key)) {\n          if (iterator.call(context, obj[key], key, obj) === breaker) return;\n        }\n      }\n    }\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results[results.length] = iterator.call(context, value, index, list);\n    });\n    if (obj.length === +obj.length) results.length = obj.length;\n    return results;\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError('Reduce of empty array with no initial value');\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var reversed = _.toArray(obj).reverse();\n    if (context && !initial) iterator = _.bind(iterator, context);\n    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, iterator, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    each(obj, function(value, index, list) {\n      if (!iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, iterator, context) {\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if a given value is included in the array or object using `===`.\n  // Aliased as `contains`.\n  _.include = _.contains = function(obj, target) {\n    var found = false;\n    if (obj == null) return found;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    found = any(obj, function(value) {\n      return value === target;\n    });\n    return found;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    return _.map(obj, function(value) {\n      return (_.isFunction(method) ? method || value : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, function(value){ return value[key]; });\n  };\n\n  // Return the maximum element or (element-based computation).\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.max.apply(Math, obj);\n    if (!iterator && _.isEmpty(obj)) return -Infinity;\n    var result = {computed : -Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed >= result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.min.apply(Math, obj);\n    if (!iterator && _.isEmpty(obj)) return Infinity;\n    var result = {computed : Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Shuffle an array.\n  _.shuffle = function(obj) {\n    var shuffled = [], rand;\n    each(obj, function(value, index, list) {\n      rand = Math.floor(Math.random() * (index + 1));\n      shuffled[index] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, val, context) {\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value : value,\n        criteria : iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria, b = right.criteria;\n      if (a === void 0) return 1;\n      if (b === void 0) return -1;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }), 'value');\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = function(obj, val) {\n    var result = {};\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\n    each(obj, function(value, index) {\n      var key = iterator(value, index);\n      (result[key] || (result[key] = [])).push(value);\n    });\n    return result;\n  };\n\n  // Use a comparator function to figure out at what index an object should\n  // be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator) {\n    iterator || (iterator = _.identity);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >> 1;\n      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely convert anything iterable into a real, live array.\n  _.toArray = function(obj) {\n    if (!obj)                                     return [];\n    if (_.isArray(obj))                           return slice.call(obj);\n    if (_.isArguments(obj))                       return slice.call(obj);\n    if (obj.toArray && _.isFunction(obj.toArray)) return obj.toArray();\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    return _.isArray(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];\n  };\n\n  // Returns everything but the last entry of the array. Especcialy useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if ((n != null) && !guard) {\n      return slice.call(array, Math.max(array.length - n, 0));\n    } else {\n      return array[array.length - 1];\n    }\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail`.\n  // Especially useful on the arguments object. Passing an **index** will return\n  // the rest of the values in the array from that index onward. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = function(array, index, guard) {\n    return slice.call(array, (index == null) || guard ? 1 : index);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, function(value){ return !!value; });\n  };\n\n  // Return a completely flattened version of an array.\n  _.flatten = function(array, shallow) {\n    return _.reduce(array, function(memo, value) {\n      if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));\n      memo[memo.length] = value;\n      return memo;\n    }, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator) {\n    var initial = iterator ? _.map(array, iterator) : array;\n    var results = [];\n    // The `isSorted` flag is irrelevant if the array only contains two elements.\n    if (array.length < 3) isSorted = true;\n    _.reduce(initial, function (memo, value, index) {\n      if (isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) {\n        memo.push(value);\n        results.push(array[index]);\n      }\n      return memo;\n    }, []);\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays. (Aliased as \"intersect\" for back-compat.)\n  _.intersection = _.intersect = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = _.flatten(slice.call(arguments, 1), true);\n    return _.filter(array, function(value){ return !_.include(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var args = slice.call(arguments);\n    var length = _.max(_.pluck(args, 'length'));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) results[i] = _.pluck(args, \"\" + i);\n    return results;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i, l;\n    if (isSorted) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);\n    for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item) {\n    if (array == null) return -1;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);\n    var i = array.length;\n    while (i--) if (i in array && array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var len = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(len);\n\n    while(idx < len) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Binding with arguments is also known as `curry`.\n  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.\n  // We check for `func.bind` first, to fail fast when `func` is undefined.\n  _.bind = function bind(func, context) {\n    var bound, args;\n    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError;\n    args = slice.call(arguments, 2);\n    return bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      ctor.prototype = func.prototype;\n      var self = new ctor;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (Object(result) === result) return result;\n      return self;\n    };\n  };\n\n  // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length == 0) funcs = _.functions(obj);\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time.\n  _.throttle = function(func, wait) {\n    var context, args, timeout, throttling, more, result;\n    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);\n    return function() {\n      context = this; args = arguments;\n      var later = function() {\n        timeout = null;\n        if (more) func.apply(context, args);\n        whenDone();\n      };\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (throttling) {\n        more = true;\n      } else {\n        result = func.apply(context, args);\n      }\n      whenDone();\n      throttling = true;\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout;\n    return function() {\n      var context = this, args = arguments;\n      var later = function() {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      if (immediate && !timeout) func.apply(context, args);\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      return memo = func.apply(this, arguments);\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return function() {\n      var args = [func].concat(slice.call(arguments, 0));\n      return wrapper.apply(this, args);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    if (times <= 0) return func();\n    return function() {\n      if (--times < 1) { return func.apply(this, arguments); }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = nativeKeys || function(obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    return _.map(obj, _.identity);\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var result = {};\n    each(_.flatten(slice.call(arguments, 1)), function(key) {\n      if (key in obj) result[key] = obj[key];\n    });\n    return result;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        if (obj[prop] == null) obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function.\n  function eq(a, b, stack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a._chain) a = a._wrapped;\n    if (b._chain) b = b._wrapped;\n    // Invoke a custom `isEqual` method if one is provided.\n    if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);\n    if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = stack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (stack[length] == a) return true;\n    }\n    // Add the first object to the stack of traversed objects.\n    stack.push(a);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          // Ensure commutative equality for sparse arrays.\n          if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;\n        }\n      }\n    } else {\n      // Objects with different constructors are not equivalent.\n      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    stack.pop();\n    return result;\n  }\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType == 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Is a given variable an arguments object?\n  _.isArguments = function(obj) {\n    return toString.call(obj) == '[object Arguments]';\n  };\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Is a given value a function?\n  _.isFunction = function(obj) {\n    return toString.call(obj) == '[object Function]';\n  };\n\n  // Is a given value a string?\n  _.isString = function(obj) {\n    return toString.call(obj) == '[object String]';\n  };\n\n  // Is a given value a number?\n  _.isNumber = function(obj) {\n    return toString.call(obj) == '[object Number]';\n  };\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return _.isNumber(obj) && isFinite(obj);\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    // `NaN` is the only value for which `===` is not reflexive.\n    return obj !== obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value a date?\n  _.isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n\n  // Is the given value a regular expression?\n  _.isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Has own property?\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Run a function **n** times.\n  _.times = function (n, iterator, context) {\n    for (var i = 0; i < n; i++) iterator.call(context, i);\n  };\n\n  // Escape a string for HTML interpolation.\n  _.escape = function(string) {\n    return (''+string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\\//g,'&#x2F;');\n  };\n\n  // If the value of the named property is a function then invoke it;\n  // otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return null;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object, ensuring that\n  // they're correctly added to the OOP wrapper as well.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name){\n      addToWrapper(name, _[name] = obj[name]);\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /.^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    'r': '\\r',\n    'n': '\\n',\n    't': '\\t',\n    'u2028': '\\u2028',\n    'u2029': '\\u2029'\n  };\n\n  for (var p in escapes) escapes[escapes[p]] = p;\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n  var unescaper = /\\\\(\\\\|'|r|n|t|u2028|u2029)/g;\n\n  // Within an interpolation, evaluation, or escaping, remove HTML escaping\n  // that had been previously added.\n  var unescape = function(code) {\n    return code.replace(unescaper, function(match, escape) {\n      return escapes[escape];\n    });\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    settings = _.defaults(settings || {}, _.templateSettings);\n\n    // Compile the template source, taking care to escape characters that\n    // cannot be included in a string literal and then unescape them in code\n    // blocks.\n    var source = \"__p+='\" + text\n      .replace(escaper, function(match) {\n        return '\\\\' + escapes[match];\n      })\n      .replace(settings.escape || noMatch, function(match, code) {\n        return \"'+\\n_.escape(\" + unescape(code) + \")+\\n'\";\n      })\n      .replace(settings.interpolate || noMatch, function(match, code) {\n        return \"'+\\n(\" + unescape(code) + \")+\\n'\";\n      })\n      .replace(settings.evaluate || noMatch, function(match, code) {\n        return \"';\\n\" + unescape(code) + \"\\n;__p+='\";\n      }) + \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __p='';\" +\n      \"var print=function(){__p+=Array.prototype.join.call(arguments, '')};\\n\" +\n      source + \"return __p;\\n\";\n\n    var render = new Function(settings.variable || 'obj', '_', source);\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for build time\n    // precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' +\n      source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // The OOP Wrapper\n  // ---------------\n\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n  var wrapper = function(obj) { this._wrapped = obj; };\n\n  // Expose `wrapper.prototype` as `_.prototype`\n  _.prototype = wrapper.prototype;\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj, chain) {\n    return chain ? _(obj).chain() : obj;\n  };\n\n  // A method to easily add functions to the OOP wrapper.\n  var addToWrapper = function(name, func) {\n    wrapper.prototype[name] = function() {\n      var args = slice.call(arguments);\n      unshift.call(args, this._wrapped);\n      return result(func.apply(_, args), this._chain);\n    };\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      var wrapped = this._wrapped;\n      method.apply(wrapped, arguments);\n      var length = wrapped.length;\n      if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];\n      return result(wrapped, this._chain);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      return result(method.apply(this._wrapped, arguments), this._chain);\n    };\n  });\n\n  // Start chaining a wrapped Underscore object.\n  wrapper.prototype.chain = function() {\n    this._chain = true;\n    return this;\n  };\n\n  // Extracts the result from a wrapped and chained object.\n  wrapper.prototype.value = function() {\n    return this._wrapped;\n  };\n  return _;\n}).call({});\n/**\n * Core Emmet object, available in global scope\n */\nvar emmet = (function(global) {\n\tvar defaultSyntax = 'html';\n\tvar defaultProfile = 'plain';\n\t\n\tif (typeof _ == 'undefined') {\n\t\ttry {\n\t\t\t// avoid collisions with RequireJS loader\n\t\t\t// also, JS obfuscators tends to translate\n\t\t\t// a[\"name\"] to a.name, which also breaks RequireJS\n\t\t\t_ = global[['require'][0]]('underscore'); // node.js\n\t\t} catch (e) {}\n\t}\n\n\tif (typeof _ == 'undefined') {\n\t\tthrow 'Cannot access to Underscore.js lib';\n\t}\n\n\t/** List of registered modules */\n\tvar modules = {\n\t\t_ : _\n\t};\n\t\n\t/**\n\t * Shared empty constructor function to aid in prototype-chain creation.\n\t */\n\tvar ctor = function(){};\n\t\n\t/**\n\t * Helper function to correctly set up the prototype chain, for subclasses.\n\t * Similar to `goog.inherits`, but uses a hash of prototype properties and\n\t * class properties to be extended.\n\t * Took it from Backbone.\n\t * @param {Object} parent\n\t * @param {Object} protoProps\n\t * @param {Object} staticProps\n\t * @returns {Object}\n\t */\n\tfunction inherits(parent, protoProps, staticProps) {\n\t\tvar child;\n\n\t\t// The constructor function for the new subclass is either defined by\n\t\t// you (the \"constructor\" property in your `extend` definition), or\n\t\t// defaulted by us to simply call the parent's constructor.\n\t\tif (protoProps && protoProps.hasOwnProperty('constructor')) {\n\t\t\tchild = protoProps.constructor;\n\t\t} else {\n\t\t\tchild = function() {\n\t\t\t\tparent.apply(this, arguments);\n\t\t\t};\n\t\t}\n\n\t\t// Inherit class (static) properties from parent.\n\t\t_.extend(child, parent);\n\n\t\t// Set the prototype chain to inherit from `parent`, without calling\n\t\t// `parent`'s constructor function.\n\t\tctor.prototype = parent.prototype;\n\t\tchild.prototype = new ctor();\n\n\t\t// Add prototype properties (instance properties) to the subclass,\n\t\t// if supplied.\n\t\tif (protoProps)\n\t\t\t_.extend(child.prototype, protoProps);\n\n\t\t// Add static properties to the constructor function, if supplied.\n\t\tif (staticProps)\n\t\t\t_.extend(child, staticProps);\n\n\t\t// Correctly set child's `prototype.constructor`.\n\t\tchild.prototype.constructor = child;\n\n\t\t// Set a convenience property in case the parent's prototype is needed\n\t\t// later.\n\t\tchild.__super__ = parent.prototype;\n\n\t\treturn child;\n\t};\n\t\n\t/**\n\t * @type Function Function that loads module definition if it's not defined\n\t */\n\tvar moduleLoader = null;\n\t\n\t/**\n\t * Generic Emmet module loader (actually, it doesn’t load anything, just \n\t * returns module reference). Not using `require` name to avoid conflicts\n\t * with Node.js and RequireJS\n\t */\n\tfunction r(name) {\n\t\tif (!(name in modules) && moduleLoader)\n\t\t\tmoduleLoader(name);\n\t\t\n\t\treturn modules[name];\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Simple, AMD-like module definition. The module will be added into\n\t\t * <code>emmet</code> object and will be available via\n\t\t * <code>emmet.require(name)</code> or <code>emmet[name]</code>\n\t\t * @param {String} name\n\t\t * @param {Function} factory\n\t\t * @memberOf emmet\n\t\t */\n\t\tdefine: function(name, factory) {\n\t\t\t// do not let redefine existing properties\n\t\t\tif (!(name in modules)) {\n\t\t\t\tmodules[name] = _.isFunction(factory) \n\t\t\t\t\t? this.exec(factory)\n\t\t\t\t\t: factory;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns reference to Emmet module\n\t\t * @param {String} name Module name\n\t\t */\n\t\trequire: r,\n\t\t\n\t\t/**\n\t\t * Helper method that just executes passed function but with all \n\t\t * important arguments like 'require' and '_'\n\t\t * @param {Function} fn\n\t\t * @param {Object} context Execution context\n\t\t */\n\t\texec: function(fn, context) {\n\t\t\treturn fn.call(context || global, _.bind(r, this), _, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * The self-propagating extend function for classes.\n\t\t * Took it from Backbone \n\t\t * @param {Object} protoProps\n\t\t * @param {Object} classProps\n\t\t * @returns {Object}\n\t\t */\n\t\textend: function(protoProps, classProps) {\n\t\t\tvar child = inherits(this, protoProps, classProps);\n\t\t\tchild.extend = this.extend;\n\t\t\t// a hack required to WSH inherit `toString` method\n\t\t\tif (protoProps.hasOwnProperty('toString'))\n\t\t\t\tchild.prototype.toString = protoProps.toString;\n\t\t\treturn child;\n\t\t},\n\t\t\n\t\t/**\n\t\t * The essential function that expands Emmet abbreviation\n\t\t * @param {String} abbr Abbreviation to parse\n\t\t * @param {String} syntax Abbreviation's context syntax\n\t\t * @param {String} profile Output profile (or its name)\n\t\t * @param {Object} contextNode Contextual node where abbreviation is\n\t\t * written\n\t\t * @return {String}\n\t\t */\n\t\texpandAbbreviation: function(abbr, syntax, profile, contextNode) {\n\t\t\tif (!abbr) return '';\n\t\t\t\n\t\t\tsyntax = syntax || defaultSyntax;\n//\t\t\tprofile = profile || defaultProfile;\n\t\t\t\n\t\t\tvar filters = r('filters');\n\t\t\tvar parser = r('abbreviationParser');\n\t\t\t\n\t\t\tprofile = r('profile').get(profile, syntax);\n\t\t\tr('tabStops').resetTabstopIndex();\n\t\t\t\n\t\t\tvar data = filters.extractFromAbbreviation(abbr);\n\t\t\tvar outputTree = parser.parse(data[0], {\n\t\t\t\tsyntax: syntax, \n\t\t\t\tcontextNode: contextNode\n\t\t\t});\n\t\t\t\n\t\t\tvar filtersList = filters.composeList(syntax, profile, data[1]);\n\t\t\tfilters.apply(outputTree, filtersList, profile);\n\t\t\treturn outputTree.toString();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns default syntax name used in abbreviation engine\n\t\t * @returns {String}\n\t\t */\n\t\tdefaultSyntax: function() {\n\t\t\treturn defaultSyntax;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns default profile name used in abbreviation engine\n\t\t * @returns {String}\n\t\t */\n\t\tdefaultProfile: function() {\n\t\t\treturn defaultProfile;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Log message into console if it exists\n\t\t */\n\t\tlog: function() {\n\t\t\tif (global.console && global.console.log)\n\t\t\t\tglobal.console.log.apply(global.console, arguments);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Setups function that should synchronously load undefined modules\n\t\t * @param {Function} fn\n\t\t */\n\t\tsetModuleLoader: function(fn) {\n\t\t\tmoduleLoader = fn;\n\t\t}\n\t};\n})(this);\n\n// export core for Node.JS\nif (typeof exports !== 'undefined') {\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\texports = module.exports = emmet;\n\t}\n\texports.emmet = emmet;\n}\n\n// export as Require.js module\nif (typeof define !== 'undefined') {\n\tdefine('emmet', [], emmet);\n}/**\n * Emmet abbreviation parser.\n * Takes string abbreviation and recursively parses it into a tree. The parsed \n * tree can be transformed into a string representation with \n * <code>toString()</code> method. Note that string representation is defined\n * by custom processors (called <i>filters</i>), not by abbreviation parser \n * itself.\n * \n * This module can be extended with custom pre-/post-processors to shape-up\n * final tree or its representation. Actually, many features of abbreviation \n * engine are defined in other modules as tree processors\n * \n * \n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @memberOf __abbreviationParser\n * @constructor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('abbreviationParser', function(require, _) {\n\tvar reValidName = /^[\\w\\-\\$\\:@\\!%]+\\+?$/i;\n\tvar reWord = /[\\w\\-:\\$@]/;\n\t\n\tvar pairs = {\n\t\t'[': ']',\n\t\t'(': ')',\n\t\t'{': '}'\n\t};\n\t\n\tvar spliceFn = Array.prototype.splice;\n\t\n\tvar preprocessors = [];\n\tvar postprocessors = [];\n\tvar outputProcessors = [];\n\t\n\t/**\n\t * @type AbbreviationNode\n\t */\n\tfunction AbbreviationNode(parent) {\n\t\t/** @type AbbreviationNode */\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis._attributes = [];\n\t\t\n\t\t/** @type String Raw abbreviation for current node */\n\t\tthis.abbreviation = '';\n\t\tthis.counter = 1;\n\t\tthis._name = null;\n\t\tthis._text = '';\n\t\tthis.repeatCount = 1;\n\t\tthis.hasImplicitRepeat = false;\n\t\t\n\t\t/** Custom data dictionary */\n\t\tthis._data = {};\n\t\t\n\t\t// output properties\n\t\tthis.start = '';\n\t\tthis.end = '';\n\t\tthis.content = '';\n\t\tthis.padding = '';\n\t}\n\t\n\tAbbreviationNode.prototype = {\n\t\t/**\n\t\t * Adds passed node as child or creates new child\n\t\t * @param {AbbreviationNode} child\n\t\t * @param {Number} position Index in children array where child should \n\t\t * be inserted\n\t\t * @return {AbbreviationNode}\n\t\t */\n\t\taddChild: function(child, position) {\n\t\t\tchild = child || new AbbreviationNode;\n\t\t\tchild.parent = this;\n\t\t\t\n\t\t\tif (_.isUndefined(position)) {\n\t\t\t\tthis.children.push(child);\n\t\t\t} else {\n\t\t\t\tthis.children.splice(position, 0, child);\n\t\t\t}\n\t\t\t\n\t\t\treturn child;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates a deep copy of current node\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tclone: function() {\n\t\t\tvar node = new AbbreviationNode();\n\t\t\tvar attrs = ['abbreviation', 'counter', '_name', '_text', 'repeatCount', 'hasImplicitRepeat', 'start', 'end', 'content', 'padding'];\n\t\t\t_.each(attrs, function(a) {\n\t\t\t\tnode[a] = this[a];\n\t\t\t}, this);\n\t\t\t\n\t\t\t// clone attributes\n\t\t\tnode._attributes = _.map(this._attributes, function(attr) {\n\t\t\t\treturn _.clone(attr);\n\t\t\t});\n\t\t\t\n\t\t\tnode._data = _.clone(this._data);\n\t\t\t\n\t\t\t// clone children\n\t\t\tnode.children = _.map(this.children, function(child) {\n\t\t\t\tchild = child.clone();\n\t\t\t\tchild.parent = node;\n\t\t\t\treturn child;\n\t\t\t});\n\t\t\t\n\t\t\treturn node;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes current node from parent‘s child list\n\t\t * @returns {AbbreviationNode} Current node itself\n\t\t */\n\t\tremove: function() {\n\t\t\tif (this.parent) {\n\t\t\t\tthis.parent.children = _.without(this.parent.children, this);\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replaces current node in parent‘s children list with passed nodes\n\t\t * @param {AbbreviationNode} node Replacement node or array of nodes\n\t\t */\n\t\treplace: function() {\n\t\t\tvar parent = this.parent;\n\t\t\tvar ix = _.indexOf(parent.children, this);\n\t\t\tvar items = _.flatten(arguments);\n\t\t\tspliceFn.apply(parent.children, [ix, 1].concat(items));\n\t\t\t\n\t\t\t// update parent\n\t\t\t_.each(items, function(item) {\n\t\t\t\titem.parent = parent;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Recursively sets <code>property</code> to <code>value</code> of current\n\t\t * node and its children \n\t\t * @param {String} name Property to update\n\t\t * @param {Object} value New property value\n\t\t */\n\t\tupdateProperty: function(name, value) {\n\t\t\tthis[name] = value;\n\t\t\t_.each(this.children, function(child) {\n\t\t\t\tchild.updateProperty(name, value);\n\t\t\t});\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Finds first child node that matches truth test for passed \n\t\t * <code>fn</code> function\n\t\t * @param {Function} fn\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tfind: function(fn) {\n\t\t\treturn this.findAll(fn)[0];\n//\t\t\tif (!_.isFunction(fn)) {\n//\t\t\t\tvar elemName = fn.toLowerCase();\n//\t\t\t\tfn = function(item) {return item.name().toLowerCase() == elemName;};\n//\t\t\t}\n//\t\t\t\n//\t\t\tvar result = null;\n//\t\t\t_.find(this.children, function(child) {\n//\t\t\t\tif (fn(child)) {\n//\t\t\t\t\treturn result = child;\n//\t\t\t\t}\n//\t\t\t\t\n//\t\t\t\treturn result = child.find(fn);\n//\t\t\t});\n//\t\t\t\n//\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Finds all child nodes that matches truth test for passed \n\t\t * <code>fn</code> function\n\t\t * @param {Function} fn\n\t\t * @returns {Array}\n\t\t */\n\t\tfindAll: function(fn) {\n\t\t\tif (!_.isFunction(fn)) {\n\t\t\t\tvar elemName = fn.toLowerCase();\n\t\t\t\tfn = function(item) {return item.name().toLowerCase() == elemName;};\n\t\t\t}\n\t\t\t\t\n\t\t\tvar result = [];\n\t\t\t_.each(this.children, function(child) {\n\t\t\t\tif (fn(child))\n\t\t\t\t\tresult.push(child);\n\t\t\t\t\n\t\t\t\tresult = result.concat(child.findAll(fn));\n\t\t\t});\n\t\t\t\n\t\t\treturn _.compact(result);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets/gets custom data\n\t\t * @param {String} name\n\t\t * @param {Object} value\n\t\t * @returns {Object}\n\t\t */\n\t\tdata: function(name, value) {\n\t\t\tif (arguments.length == 2) {\n\t\t\t\tthis._data[name] = value;\n\t\t\t\t\n\t\t\t\tif (name == 'resource' && require('elements').is(value, 'snippet')) {\n\t\t\t\t\t// setting snippet as matched resource: update `content`\n\t\t\t\t\t// property with snippet value\n\t\t\t\t\tthis.content = value.data;\n\t\t\t\t\tif (this._text) {\n\t\t\t\t\t\tthis.content = require('abbreviationUtils')\n\t\t\t\t\t\t\t.insertChildContent(value.data, this._text);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn this._data[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns name of current node\n\t\t * @returns {String}\n\t\t */\n\t\tname: function() {\n\t\t\tvar res = this.matchedResource();\n\t\t\tif (require('elements').is(res, 'element')) {\n\t\t\t\treturn res.name;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of attributes for current node\n\t\t * @returns {Array}\n\t\t */\n\t\tattributeList: function() {\n\t\t\tvar attrs = [];\n\t\t\t\n\t\t\tvar res = this.matchedResource();\n\t\t\tif (require('elements').is(res, 'element') && _.isArray(res.attributes)) {\n\t\t\t\tattrs = attrs.concat(res.attributes);\n\t\t\t}\n\t\t\t\n\t\t\treturn optimizeAttributes(attrs.concat(this._attributes));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns or sets attribute value\n\t\t * @param {String} name Attribute name\n\t\t * @param {String} value New attribute value\n\t\t * @returns {String}\n\t\t */\n\t\tattribute: function(name, value) {\n\t\t\tif (arguments.length == 2) {\n\t\t\t\t// modifying attribute\n\t\t\t\tvar ix = _.indexOf(_.pluck(this._attributes, 'name'), name.toLowerCase());\n\t\t\t\tif (~ix) {\n\t\t\t\t\tthis._attributes[ix].value = value;\n\t\t\t\t} else {\n\t\t\t\t\tthis._attributes.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn (_.find(this.attributeList(), function(attr) {\n\t\t\t\treturn attr.name == name;\n\t\t\t}) || {}).value;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns reference to the matched <code>element</code>, if any.\n\t\t * See {@link elements} module for a list of available elements\n\t\t * @returns {Object}\n\t\t */\n\t\tmatchedResource: function() {\n\t\t\treturn this.data('resource');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns index of current node in parent‘s children list\n\t\t * @returns {Number}\n\t\t */\n\t\tindex: function() {\n\t\t\treturn this.parent ? _.indexOf(this.parent.children, this) : -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets how many times current element should be repeated\n\t\t * @private\n\t\t */\n\t\t_setRepeat: function(count) {\n\t\t\tif (count) {\n\t\t\t\tthis.repeatCount = parseInt(count, 10) || 1;\n\t\t\t} else {\n\t\t\t\tthis.hasImplicitRepeat = true;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets abbreviation that belongs to current node\n\t\t * @param {String} abbr\n\t\t */\n\t\tsetAbbreviation: function(abbr) {\n\t\t\tabbr = abbr || '';\n\t\t\t\n\t\t\tvar that = this;\n\t\t\t\n\t\t\t// find multiplier\n\t\t\tabbr = abbr.replace(/\\*(\\d+)?$/, function(str, repeatCount) {\n\t\t\t\tthat._setRepeat(repeatCount);\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\tthis.abbreviation = abbr;\n\t\t\t\n\t\t\tvar abbrText = extractText(abbr);\n\t\t\tif (abbrText) {\n\t\t\t\tabbr = abbrText.element;\n\t\t\t\tthis.content = this._text = abbrText.text;\n\t\t\t}\n\t\t\t\n\t\t\tvar abbrAttrs = parseAttributes(abbr);\n\t\t\tif (abbrAttrs) {\n\t\t\t\tabbr = abbrAttrs.element;\n\t\t\t\tthis._attributes = abbrAttrs.attributes;\n\t\t\t}\n\t\t\t\n\t\t\tthis._name = abbr;\n\t\t\t\n\t\t\t// validate name\n\t\t\tif (this._name && !reValidName.test(this._name)) {\n\t\t\t\tthrow 'Invalid abbreviation';\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns string representation of current node\n\t\t * @return {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\tvar start = this.start;\n\t\t\tvar end = this.end;\n\t\t\tvar content = this.content;\n\t\t\t\n\t\t\t// apply output processors\n\t\t\tvar node = this;\n\t\t\t_.each(outputProcessors, function(fn) {\n\t\t\t\tstart = fn(start, node, 'start');\n\t\t\t\tcontent = fn(content, node, 'content');\n\t\t\t\tend = fn(end, node, 'end');\n\t\t\t});\n\t\t\t\n\t\t\t\n\t\t\tvar innerContent = _.map(this.children, function(child) {\n\t\t\t\treturn child.toString();\n\t\t\t}).join('');\n\t\t\t\n\t\t\tcontent = require('abbreviationUtils').insertChildContent(content, innerContent, {\n\t\t\t\tkeepVariable: false\n\t\t\t});\n\t\t\t\n\t\t\treturn start + utils.padString(content, this.padding) + end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current node contains children with empty <code>expr</code>\n\t\t * property\n\t\t * @return {Boolean}\n\t\t */\n\t\thasEmptyChildren: function() {\n\t\t\treturn !!_.find(this.children, function(child) {\n\t\t\t\treturn child.isEmpty();\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current node has implied name that should be resolved\n\t\t * @returns {Boolean}\n\t\t */\n\t\thasImplicitName: function() {\n\t\t\treturn !this._name && !this.isTextNode();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates that current element is a grouping one, e.g. has no \n\t\t * representation but serves as a container for other nodes\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisGroup: function() {\n\t\t\treturn !this.abbreviation;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates empty node (i.e. without abbreviation). It may be a \n\t\t * grouping node and should not be outputted\n\t\t * @return {Boolean}\n\t\t */\n\t\tisEmpty: function() {\n\t\t\treturn !this.abbreviation && !this.children.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates that current node should be repeated\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisRepeating: function() {\n\t\t\treturn this.repeatCount > 1 || this.hasImplicitRepeat;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current node is a text-only node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisTextNode: function() {\n\t\t\treturn !this.name() && !this.attributeList().length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indicates whether this node may be used to build elements or snippets\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisElement: function() {\n\t\t\treturn !this.isEmpty() && !this.isTextNode();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns latest and deepest child of current tree\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tdeepestChild: function() {\n\t\t\tif (!this.children.length)\n\t\t\t\treturn null;\n\t\t\t\t\n\t\t\tvar deepestChild = this;\n\t\t\twhile (deepestChild.children.length) {\n\t\t\t\tdeepestChild = _.last(deepestChild.children);\n\t\t\t}\n\t\t\t\n\t\t\treturn deepestChild;\n\t\t}\n\t};\n\t\n\t/**\n\t * Returns stripped string: a string without first and last character.\n\t * Used for “unquoting” strings\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tfunction stripped(str) {\n\t\treturn str.substring(1, str.length - 1);\n\t}\n\t\n\tfunction consumeQuotedValue(stream, quote) {\n\t\tvar ch;\n\t\twhile (ch = stream.next()) {\n\t\t\tif (ch === quote)\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tif (ch == '\\\\')\n\t\t\t\tcontinue;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Parses abbreviation into a tree\n\t * @param {String} abbr\n\t * @returns {AbbreviationNode}\n\t */\n\tfunction parseAbbreviation(abbr) {\n\t\tabbr = require('utils').trim(abbr);\n\t\t\n\t\tvar root = new AbbreviationNode;\n\t\tvar context = root.addChild(), ch;\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(abbr);\n\t\tvar loopProtector = 1000, multiplier;\n\t\t\n\t\twhile (!stream.eol() && --loopProtector > 0) {\n\t\t\tch = stream.peek();\n\t\t\t\n\t\t\tswitch (ch) {\n\t\t\t\tcase '(': // abbreviation group\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tif (stream.skipToPair('(', ')')) {\n\t\t\t\t\t\tvar inner = parseAbbreviation(stripped(stream.current()));\n\t\t\t\t\t\tif (multiplier = stream.match(/^\\*(\\d+)?/, true)) {\n\t\t\t\t\t\t\tcontext._setRepeat(multiplier[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t_.each(inner.children, function(child) {\n\t\t\t\t\t\t\tcontext.addChild(child);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow 'Invalid abbreviation: mo matching \")\" found for character at ' + stream.pos;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase '>': // child operator\n\t\t\t\t\tcontext = context.addChild();\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase '+': // sibling operator\n\t\t\t\t\tcontext = context.parent.addChild();\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase '^': // climb up operator\n\t\t\t\t\tvar parent = context.parent || context;\n\t\t\t\t\tcontext = (parent.parent || parent).addChild();\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tdefault: // consume abbreviation\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tstream.eatWhile(function(c) {\n\t\t\t\t\t\tif (c == '[' || c == '{') {\n\t\t\t\t\t\t\tif (stream.skipToPair(c, pairs[c])) {\n\t\t\t\t\t\t\t\tstream.backUp(1);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthrow 'Invalid abbreviation: mo matching \"' + pairs[c] + '\" found for character at ' + stream.pos;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (c == '+') {\n\t\t\t\t\t\t\t// let's see if this is an expando marker\n\t\t\t\t\t\t\tstream.next();\n\t\t\t\t\t\t\tvar isMarker = stream.eol() ||  ~'+>^*'.indexOf(stream.peek());\n\t\t\t\t\t\t\tstream.backUp(1);\n\t\t\t\t\t\t\treturn isMarker;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn c != '(' && isAllowedChar(c);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tcontext.setAbbreviation(stream.current());\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (loopProtector < 1)\n\t\t\tthrow 'Endless loop detected';\n\t\t\n\t\treturn root;\n\t}\n\t\n\t/**\n\t * Extract attributes and their values from attribute set: \n\t * <code>[attr col=3 title=\"Quoted string\"]</code>\n\t * @param {String} attrSet\n\t * @returns {Array}\n\t */\n\tfunction extractAttributes(attrSet, attrs) {\n\t\tattrSet = require('utils').trim(attrSet);\n\t\tvar result = [];\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(attrSet);\n\t\tstream.eatSpace();\n\t\t\n\t\twhile (!stream.eol()) {\n\t\t\tstream.start = stream.pos;\n\t\t\tif (stream.eatWhile(reWord)) {\n\t\t\t\tvar attrName = stream.current();\n\t\t\t\tvar attrValue = '';\n\t\t\t\tif (stream.peek() == '=') {\n\t\t\t\t\tstream.next();\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tvar quote = stream.peek();\n\t\t\t\t\t\n\t\t\t\t\tif (quote == '\"' || quote == \"'\") {\n\t\t\t\t\t\tstream.next();\n\t\t\t\t\t\tif (consumeQuotedValue(stream, quote)) {\n\t\t\t\t\t\t\tattrValue = stream.current();\n\t\t\t\t\t\t\t// strip quotes\n\t\t\t\t\t\t\tattrValue = attrValue.substring(1, attrValue.length - 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow 'Invalid attribute value';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (stream.eatWhile(/[^\\s\\]]/)) {\n\t\t\t\t\t\tattrValue = stream.current();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow 'Invalid attribute value';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult.push({\n\t\t\t\t\tname: attrName, \n\t\t\t\t\tvalue: attrValue\n\t\t\t\t});\n\t\t\t\tstream.eatSpace();\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Parses tag attributes extracted from abbreviation. If attributes found, \n\t * returns object with <code>element</code> and <code>attributes</code>\n\t * properties\n\t * @param {String} abbr\n\t * @returns {Object} Returns <code>null</code> if no attributes found in \n\t * abbreviation\n\t */\n\tfunction parseAttributes(abbr) {\n\t\t/*\n\t\t * Example of incoming data:\n\t\t * #header\n\t\t * .some.data\n\t\t * .some.data#header\n\t\t * [attr]\n\t\t * #item[attr=Hello other=\"World\"].class\n\t\t */\n\t\tvar result = [];\n\t\tvar attrMap = {'#': 'id', '.': 'class'};\n\t\tvar nameEnd = null;\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(abbr);\n\t\twhile (!stream.eol()) {\n\t\t\tswitch (stream.peek()) {\n\t\t\t\tcase '#': // id\n\t\t\t\tcase '.': // class\n\t\t\t\t\tif (nameEnd === null)\n\t\t\t\t\t\tnameEnd = stream.pos;\n\t\t\t\t\t\n\t\t\t\t\tvar attrName = attrMap[stream.peek()];\n\t\t\t\t\t\n\t\t\t\t\tstream.next();\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tstream.eatWhile(reWord);\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tname: attrName, \n\t\t\t\t\t\tvalue: stream.current()\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase '[': //begin attribute set\n\t\t\t\t\tif (nameEnd === null)\n\t\t\t\t\t\tnameEnd = stream.pos;\n\t\t\t\t\t\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tif (!stream.skipToPair('[', ']')) \n\t\t\t\t\t\tthrow 'Invalid attribute set definition';\n\t\t\t\t\t\n\t\t\t\t\tresult = result.concat(\n\t\t\t\t\t\textractAttributes(stripped(stream.current()))\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstream.next();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!result.length)\n\t\t\treturn null;\n\t\t\n\t\treturn {\n\t\t\telement: abbr.substring(0, nameEnd),\n\t\t\tattributes: optimizeAttributes(result)\n\t\t};\n\t}\n\t\n\t/**\n\t * Optimize attribute set: remove duplicates and merge class attributes\n\t * @param attrs\n\t */\n\tfunction optimizeAttributes(attrs) {\n\t\t// clone all attributes to make sure that original objects are \n\t\t// not modified\n\t\tattrs  = _.map(attrs, function(attr) {\n\t\t\treturn _.clone(attr);\n\t\t});\n\t\t\n\t\tvar lookup = {};\n\t\treturn _.filter(attrs, function(attr) {\n\t\t\tif (!(attr.name in lookup)) {\n\t\t\t\treturn lookup[attr.name] = attr;\n\t\t\t}\n\t\t\t\n\t\t\tvar la = lookup[attr.name];\n\t\t\t\n\t\t\tif (attr.name.toLowerCase() == 'class') {\n\t\t\t\tla.value += (la.value.length ? ' ' : '') + attr.value;\n\t\t\t} else {\n\t\t\t\tla.value = attr.value;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\t/**\n\t * Extract text data from abbreviation: if <code>a{hello}</code> abbreviation\n\t * is passed, returns object <code>{element: 'a', text: 'hello'}</code>.\n\t * If nothing found, returns <code>null</code>\n\t * @param {String} abbr\n\t * \n\t */\n\tfunction extractText(abbr) {\n\t\tif (!~abbr.indexOf('{'))\n\t\t\treturn null;\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(abbr);\n\t\twhile (!stream.eol()) {\n\t\t\tswitch (stream.peek()) {\n\t\t\t\tcase '[':\n\t\t\t\tcase '(':\n\t\t\t\t\tstream.skipToPair(stream.peek(), pairs[stream.peek()]); break;\n\t\t\t\t\t\n\t\t\t\tcase '{':\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\tstream.skipToPair('{', '}');\n\t\t\t\t\treturn {\n\t\t\t\t\t\telement: abbr.substring(0, stream.start),\n\t\t\t\t\t\ttext: stripped(stream.current())\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tstream.next();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * “Un-rolls“ contents of current node: recursively replaces all repeating \n\t * children with their repeated clones\n\t * @param {AbbreviationNode} node\n\t * @returns {AbbreviationNode}\n\t */\n\tfunction unroll(node) {\n\t\tfor (var i = node.children.length - 1, j, child, maxCount; i >= 0; i--) {\n\t\t\tchild = node.children[i];\n\t\t\t\n\t\t\tif (child.isRepeating()) {\n\t\t\t\tmaxCount = j = child.repeatCount;\n\t\t\t\tchild.repeatCount = 1;\n\t\t\t\tchild.updateProperty('counter', 1);\n\t\t\t\tchild.updateProperty('maxCount', maxCount);\n\t\t\t\twhile (--j > 0) {\n\t\t\t\t\tchild.parent.addChild(child.clone(), i + 1)\n\t\t\t\t\t\t.updateProperty('counter', j + 1)\n\t\t\t\t\t\t.updateProperty('maxCount', maxCount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// to keep proper 'counter' property, we need to walk\n\t\t// on children once again\n\t\t_.each(node.children, unroll);\n\t\t\n\t\treturn node;\n\t}\n\t\n\t/**\n\t * Optimizes tree node: replaces empty nodes with their children\n\t * @param {AbbreviationNode} node\n\t * @return {AbbreviationNode}\n\t */\n\tfunction squash(node) {\n\t\tfor (var i = node.children.length - 1; i >= 0; i--) {\n\t\t\t/** @type AbbreviationNode */\n\t\t\tvar n = node.children[i];\n\t\t\tif (n.isGroup()) {\n\t\t\t\tn.replace(squash(n).children);\n\t\t\t} else if (n.isEmpty()) {\n\t\t\t\tn.remove();\n\t\t\t}\n\t\t}\n\t\t\n\t\t_.each(node.children, squash);\n\t\t\n\t\treturn node;\n\t}\n\t\n\tfunction isAllowedChar(ch) {\n\t\tvar charCode = ch.charCodeAt(0);\n\t\tvar specialChars = '#.*:$-_!@|%';\n\t\t\n\t\treturn (charCode > 64 && charCode < 91)       // uppercase letter\n\t\t\t\t|| (charCode > 96 && charCode < 123)  // lowercase letter\n\t\t\t\t|| (charCode > 47 && charCode < 58)   // number\n\t\t\t\t|| specialChars.indexOf(ch) != -1;    // special character\n\t}\n\t\n\t// XXX add counter replacer function as output processor\n\toutputProcessors.push(function(text, node) {\n\t\treturn require('utils').replaceCounter(text, node.counter, node.maxCount);\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Parses abbreviation into tree with respect of groups, \n\t\t * text nodes and attributes. Each node of the tree is a single \n\t\t * abbreviation. Tree represents actual structure of the outputted \n\t\t * result\n\t\t * @memberOf abbreviationParser\n\t\t * @param {String} abbr Abbreviation to parse\n\t\t * @param {Object} options Additional options for parser and processors\n\t\t * \n\t\t * @return {AbbreviationNode}\n\t\t */\n\t\tparse: function(abbr, options) {\n\t\t\toptions = options || {};\n\t\t\t\n\t\t\tvar tree = parseAbbreviation(abbr);\n\t\t\t\n\t\t\tif (options.contextNode) {\n\t\t\t\t// add info about context node –\n\t\t\t\t// a parent XHTML node in editor inside which abbreviation is \n\t\t\t\t// expanded\n\t\t\t\ttree._name = options.contextNode.name;\n\t\t\t\tvar attrLookup = {};\n\t\t\t\t_.each(tree._attributes, function(attr) {\n\t\t\t\t\tattrLookup[attr.name] = attr;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t_.each(options.contextNode.attributes, function(attr) {\n\t\t\t\t\tif (attr.name in attrLookup) {\n\t\t\t\t\t\tattrLookup[attr.name].value = attr.value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tattr = _.clone(attr);\n\t\t\t\t\t\ttree._attributes.push(attr);\n\t\t\t\t\t\tattrLookup[attr.name] = attr;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t// apply preprocessors\n\t\t\t_.each(preprocessors, function(fn) {\n\t\t\t\tfn(tree, options);\n\t\t\t});\n\t\t\t\n\t\t\ttree = squash(unroll(tree));\n\t\t\t\n\t\t\t// apply postprocessors\n\t\t\t_.each(postprocessors, function(fn) {\n\t\t\t\tfn(tree, options);\n\t\t\t});\n\t\t\t\n\t\t\treturn tree;\n\t\t},\n\t\t\n\t\tAbbreviationNode: AbbreviationNode,\n\t\t\n\t\t/**\n\t\t * Add new abbreviation preprocessor. <i>Preprocessor</i> is a function\n\t\t * that applies to a parsed abbreviation tree right after it get parsed.\n\t\t * The passed tree is in unoptimized state.\n\t\t * @param {Function} fn Preprocessor function. This function receives\n\t\t * two arguments: parsed abbreviation tree (<code>AbbreviationNode</code>)\n\t\t * and <code>options</code> hash that was passed to <code>parse</code>\n\t\t * method\n\t\t */\n\t\taddPreprocessor: function(fn) {\n\t\t\tif (!_.include(preprocessors, fn))\n\t\t\t\tpreprocessors.push(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered preprocessor\n\t\t */\n\t\tremoveFilter: function(fn) {\n\t\t\tpreprocessor = _.without(preprocessors, fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new abbreviation postprocessor. <i>Postprocessor</i> is a \n\t\t * functinon that applies to <i>optimized</i> parsed abbreviation tree\n\t\t * right before it returns from <code>parse()</code> method\n\t\t * @param {Function} fn Postprocessor function. This function receives\n\t\t * two arguments: parsed abbreviation tree (<code>AbbreviationNode</code>)\n\t\t * and <code>options</code> hash that was passed to <code>parse</code>\n\t\t * method\n\t\t */\n\t\taddPostprocessor: function(fn) {\n\t\t\tif (!_.include(postprocessors, fn))\n\t\t\t\tpostprocessors.push(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered postprocessor function\n\t\t */\n\t\tremovePostprocessor: function(fn) {\n\t\t\tpostprocessors = _.without(postprocessors, fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Registers output postprocessor. <i>Output processor</i> is a \n\t\t * function that applies to output part (<code>start</code>, \n\t\t * <code>end</code> and <code>content</code>) when \n\t\t * <code>AbbreviationNode.toString()</code> method is called\n\t\t */\n\t\taddOutputProcessor: function(fn) {\n\t\t\tif (!_.include(outputProcessors, fn))\n\t\t\t\toutputProcessors.push(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered output processor\n\t\t */\n\t\tremoveOutputProcessor: function(fn) {\n\t\t\toutputProcessors = _.without(outputProcessors, fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed symbol is valid symbol for abbreviation expression\n\t\t * @param {String} ch\n\t\t * @return {Boolean}\n\t\t */\n\t\tisAllowedChar: function(ch) {\n\t\t\tch = String(ch); // convert Java object to JS\n\t\t\treturn isAllowedChar(ch) || ~'>+^[](){}'.indexOf(ch);\n\t\t}\n\t};\n});/**\n * Processor function that matches parsed <code>AbbreviationNode</code>\n * against resources defined in <code>resource</code> module\n * @param {Function} require\n * @param {Underscore} _\n */ \nemmet.exec(function(require, _) {\n\t/**\n\t * Finds matched resources for child nodes of passed <code>node</code> \n\t * element. A matched resource is a reference to <i>snippets.json</i> entry\n\t * that describes output of parsed node \n\t * @param {AbbreviationNode} node\n\t * @param {String} syntax\n\t */\n\tfunction matchResources(node, syntax) {\n\t\tvar resources = require('resources');\n\t\tvar elements = require('elements');\n\t\tvar parser = require('abbreviationParser');\n\t\t\n\t\t// do a shallow copy because the children list can be modified during\n\t\t// resource matching\n\t\t_.each(_.clone(node.children), /** @param {AbbreviationNode} child */ function(child) {\n\t\t\tvar r = resources.getMatchedResource(child, syntax);\n\t\t\tif (_.isString(r)) {\n\t\t\t\tchild.data('resource', elements.create('snippet', r));\n\t\t\t} else if (elements.is(r, 'reference')) {\n\t\t\t\t// it’s a reference to another abbreviation:\n\t\t\t\t// parse it and insert instead of current child\n\t\t\t\t/** @type AbbreviationNode */\n\t\t\t\tvar subtree = parser.parse(r.data, {\n\t\t\t\t\tsyntax: syntax\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// if context element should be repeated, check if we need to \n\t\t\t\t// transfer repeated element to specific child node\n\t\t\t\tif (child.repeatCount > 1) {\n\t\t\t\t\tvar repeatedChildren = subtree.findAll(function(node) {\n\t\t\t\t\t\treturn node.hasImplicitRepeat;\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t_.each(repeatedChildren, function(node) {\n\t\t\t\t\t\tnode.repeatCount = child.repeatCount;\n\t\t\t\t\t\tnode.hasImplicitRepeat = false;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// move child‘s children into the deepest child of new subtree\n\t\t\t\tvar deepestChild = subtree.deepestChild();\n\t\t\t\tif (deepestChild) {\n\t\t\t\t\t_.each(child.children, function(c) {\n\t\t\t\t\t\tdeepestChild.addChild(c);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// copy current attributes to children\n\t\t\t\t_.each(subtree.children, function(node) {\n\t\t\t\t\t_.each(child.attributeList(), function(attr) {\n\t\t\t\t\t\tnode.attribute(attr.name, attr.value);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tchild.replace(subtree.children);\n\t\t\t} else {\n\t\t\t\tchild.data('resource', r);\n\t\t\t}\n\t\t\t\n\t\t\tmatchResources(child, syntax);\n\t\t});\n\t}\n\t\n\t// XXX register abbreviation filter that creates references to resources\n\t// on abbreviation nodes\n\t/**\n\t * @param {AbbreviationNode} tree\n\t */\n\trequire('abbreviationParser').addPreprocessor(function(tree, options) {\n\t\tvar syntax = options.syntax || emmet.defaultSyntax();\n\t\tmatchResources(tree, syntax);\n\t});\n\t\n});/**\n * Pasted content abbreviation processor. A pasted content is a content that\n * should be inserted into implicitly repeated abbreviation nodes.\n * This processor powers “Wrap With Abbreviation” action\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar parser = require('abbreviationParser');\n\tvar outputPlaceholder = '$#';\n\t\n\t/**\n\t * Locates output placeholders inside text\n\t * @param {String} text\n\t * @returns {Array} Array of ranges of output placeholder in text\n\t */\n\tfunction locateOutputPlaceholder(text) {\n\t\tvar range = require('range');\n\t\tvar result = [];\n\t\t\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(text);\n\t\t\n\t\twhile (!stream.eol()) {\n\t\t\tif (stream.peek() == '\\\\') {\n\t\t\t\tstream.next();\n\t\t\t} else {\n\t\t\t\tstream.start = stream.pos;\n\t\t\t\tif (stream.match(outputPlaceholder, true)) {\n\t\t\t\t\tresult.push(range.create(stream.start, outputPlaceholder));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstream.next();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Replaces output placeholders inside <code>source</code> with \n\t * <code>value</code>\n\t * @param {String} source\n\t * @param {String} value\n\t * @returns {String}\n\t */\n\tfunction replaceOutputPlaceholders(source, value) {\n\t\tvar utils = require('utils');\n\t\tvar ranges = locateOutputPlaceholder(source);\n\t\t\n\t\tranges.reverse();\n\t\t_.each(ranges, function(r) {\n\t\t\tsource = utils.replaceSubstring(source, value, r);\n\t\t});\n\t\t\n\t\treturn source;\n\t}\n\t\n\t/**\n\t * Check if parsed node contains output placeholder – a target where\n\t * pasted content should be inserted\n\t * @param {AbbreviationNode} node\n\t * @returns {Boolean}\n\t */\n\tfunction hasOutputPlaceholder(node) {\n\t\tif (locateOutputPlaceholder(node.content).length)\n\t\t\treturn true;\n\t\t\n\t\t// check if attributes contains placeholder\n\t\treturn !!_.find(node.attributeList(), function(attr) {\n\t\t\treturn !!locateOutputPlaceholder(attr.value).length;\n\t\t});\n\t}\n\t\n\t/**\n\t * Insert pasted content into correct positions of parsed node\n\t * @param {AbbreviationNode} node\n\t * @param {String} content\n\t * @param {Boolean} overwrite Overwrite node content if no value placeholders\n\t * found instead of appending to existing content\n\t */\n\tfunction insertPastedContent(node, content, overwrite) {\n\t\tvar nodesWithPlaceholders = node.findAll(function(item) {\n\t\t\treturn hasOutputPlaceholder(item);\n\t\t});\n\t\t\n\t\tif (hasOutputPlaceholder(node))\n\t\t\tnodesWithPlaceholders.unshift(node);\n\t\t\n\t\tif (nodesWithPlaceholders.length) {\n\t\t\t_.each(nodesWithPlaceholders, function(item) {\n\t\t\t\titem.content = replaceOutputPlaceholders(item.content, content);\n\t\t\t\t_.each(item._attributes, function(attr) {\n\t\t\t\t\tattr.value = replaceOutputPlaceholders(attr.value, content);\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// on output placeholders in subtree, insert content in the deepest\n\t\t\t// child node\n\t\t\tvar deepest = node.deepestChild() || node;\n\t\t\tif (overwrite) {\n\t\t\t\tdeepest.content = content;\n\t\t\t} else {\n\t\t\t\tdeepest.content = require('abbreviationUtils').insertChildContent(deepest.content, content);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} options\n\t */\n\tparser.addPreprocessor(function(tree, options) {\n\t\tif (options.pastedContent) {\n\t\t\tvar utils = require('utils');\n\t\t\tvar lines = _.map(utils.splitByLines(options.pastedContent, true), utils.trim);\n\t\t\t\n\t\t\t// set repeat count for implicitly repeated elements before\n\t\t\t// tree is unrolled\n\t\t\ttree.findAll(function(item) {\n\t\t\t\tif (item.hasImplicitRepeat) {\n\t\t\t\t\titem.data('paste', lines);\n\t\t\t\t\treturn item.repeatCount = lines.length;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\t\n\t/**\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} options\n\t */\n\tparser.addPostprocessor(function(tree, options) {\n\t\t// for each node with pasted content, update text data\n\t\tvar targets = tree.findAll(function(item) {\n\t\t\tvar pastedContentObj = item.data('paste');\n\t\t\tvar pastedContent = '';\n\t\t\tif (_.isArray(pastedContentObj)) {\n\t\t\t\tpastedContent = pastedContentObj[item.counter - 1];\n\t\t\t} else if (_.isFunction(pastedContentObj)) {\n\t\t\t\tpastedContent = pastedContentObj(item.counter - 1, item.content);\n\t\t\t} else if (pastedContentObj) {\n\t\t\t\tpastedContent = pastedContentObj;\n\t\t\t}\n\t\t\t\n\t\t\tif (pastedContent) {\n\t\t\t\tinsertPastedContent(item, pastedContent, !!item.data('pasteOverwrites'));\n\t\t\t}\n\t\t\t\n\t\t\titem.data('paste', null);\n\t\t\treturn !!pastedContentObj;\n\t\t});\n\t\t\n\t\tif (!targets.length && options.pastedContent) {\n\t\t\t// no implicitly repeated elements, put pasted content in\n\t\t\t// the deepest child\n\t\t\tinsertPastedContent(tree, options.pastedContent);\n\t\t}\n\t});\n});/**\n * Resolves tag names in abbreviations with implied name\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Resolves implicit node names in parsed tree\n\t * @param {AbbreviationNode} tree\n\t */\n\tfunction resolveNodeNames(tree) {\n\t\tvar tagName = require('tagName');\n\t\t_.each(tree.children, function(node) {\n\t\t\tif (node.hasImplicitName() || node.data('forceNameResolving')) {\n\t\t\t\tnode._name = tagName.resolve(node.parent.name());\n\t\t\t}\n\t\t\tresolveNodeNames(node);\n\t\t});\n\t\t\n\t\treturn tree;\n\t}\n\t\n\trequire('abbreviationParser').addPostprocessor(resolveNodeNames);\n});/**\n * @author Stoyan Stefanov\n * @link https://github.com/stoyan/etc/tree/master/cssex\n */\n\nemmet.define('cssParser', function(require, _) {\nvar walker, tokens = [], isOp, isNameChar, isDigit;\n    \n    // walks around the source\n    walker = {\n        lines: null,\n        total_lines: 0,\n        linenum: -1,\n        line: '',\n        ch: '',\n        chnum: -1,\n        init: function (source) {\n            var me = walker;\n        \n            // source, yumm\n            me.lines = source\n                .replace(/\\r\\n/g, '\\n')\n                .replace(/\\r/g, '\\n')\n                .split('\\n');\n            me.total_lines = me.lines.length;\n        \n            // reset\n            me.chnum = -1;\n            me.linenum = -1;\n            me.ch = '';\n            me.line = '';\n        \n            // advance\n            me.nextLine();\n            me.nextChar();\n        },\n        nextLine: function () {\n            var me = this;\n            me.linenum += 1;\n            if (me.total_lines <= me.linenum) {\n                me.line = false;\n            } else {\n                me.line = me.lines[me.linenum];\n            }\n            if (me.chnum !== -1) {\n                me.chnum = 0;\n            }\n            return me.line;\n        }, \n        nextChar: function () {\n            var me = this;\n            me.chnum += 1;\n            while (me.line.charAt(me.chnum) === '') {\n                if (this.nextLine() === false) {\n                    me.ch = false;\n                    return false; // end of source\n                }\n                me.chnum = -1;\n                me.ch = '\\n';\n                return '\\n';\n            }\n            me.ch = me.line.charAt(me.chnum);\n            return me.ch;\n        },\n        peek: function() {\n            return this.line.charAt(this.chnum + 1);\n        }\n    };\n\n    // utility helpers\n    isNameChar = function (c) {\n    \t// be more tolerate for name tokens: allow & character for LESS syntax\n        return (c == '&' || c === '_' || c === '-' || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));\n    };\n\n    isDigit = function (ch) {\n        return (ch !== false && ch >= '0' && ch <= '9');\n    };  \n\n    isOp = (function () {\n        var opsa = \"{}[]()+*=.,;:>~|\\\\%$#@^!\".split(''),\n            opsmatcha = \"*^|$~\".split(''),\n            ops = {},\n            opsmatch = {},\n            i = 0;\n        for (; i < opsa.length; i += 1) {\n            ops[opsa[i]] = true;\n        }\n        for (i = 0; i < opsmatcha.length; i += 1) {\n            opsmatch[opsmatcha[i]] = true;\n        }\n        return function (ch, matchattr) {\n            if (matchattr) {\n                return !!opsmatch[ch];\n            }\n            return !!ops[ch];\n        };\n    }());\n    \n    // shorthands\n    function isset(v) {\n        return typeof v !== 'undefined';\n    }\n    function getConf() {\n        return {\n            'char': walker.chnum,\n            line: walker.linenum\n        };\n    }\n\n\n    // creates token objects and pushes them to a list\n    function tokener(value, type, conf) {\n        var w = walker, c = conf || {};\n        tokens.push({\n            charstart: isset(c['char']) ? c['char'] : w.chnum,\n            charend:   isset(c.charend) ? c.charend : w.chnum,\n            linestart: isset(c.line)    ? c.line    : w.linenum,\n            lineend:   isset(c.lineend) ? c.lineend : w.linenum,\n            value:     value,\n            type:      type || value\n        });\n    }\n    \n    // oops\n    function error(m, config) { \n        var w = walker,\n            conf = config || {},\n            c = isset(conf['char']) ? conf['char'] : w.chnum,\n            l = isset(conf.line) ? conf.line : w.linenum;\n        return {\n            name: \"ParseError\",\n            message: m + \" at line \" + (l + 1) + ' char ' + (c + 1),\n            walker: w,\n            tokens: tokens\n        };\n    }\n\n\n    // token handlers follow for:\n    // white space, comment, string, identifier, number, operator\n    function white() {\n    \n        var c = walker.ch,\n            token = '',\n            conf = getConf();\n    \n        while (c === \" \" || c === \"\\t\") {\n            token += c;\n            c = walker.nextChar();\n        }\n    \n        tokener(token, 'white', conf);\n    \n    }\n\n    function comment() {\n    \n        var w = walker,\n            c = w.ch,\n            token = c,\n            cnext,\n            conf = getConf();    \n     \n        cnext = w.nextChar();\n\n        if (cnext === '/') {\n            // inline comment in SCSS and such\n            token += cnext;\n            var pk = w.peek();\n            while (pk && pk !== '\\n') {\n                token += cnext;\n                cnext = w.nextChar();\n                pk = w.peek();\n            }\n        } else if (cnext === '*') {\n            // multiline CSS commment\n            while (!(c === \"*\" && cnext === \"/\")) {\n                token += cnext;\n                c = cnext;\n                cnext = w.nextChar();        \n            }            \n        } else {\n            // oops, not a comment, just a /\n            conf.charend = conf['char'];\n            conf.lineend = conf.line;\n            return tokener(token, token, conf);\n        }\n        \n        token += cnext;\n        w.nextChar();\n        tokener(token, 'comment', conf);\n    }\n\n    function str() {\n        var w = walker,\n            c = w.ch,\n            q = c,\n            token = c,\n            cnext,\n            conf = getConf();\n    \n        c = w.nextChar();\n    \n        while (c !== q) {\n            \n            if (c === '\\n') {\n                cnext = w.nextChar();\n                if (cnext === \"\\\\\") {\n                    token += c + cnext;\n                } else {\n                    // end of line with no \\ escape = bad\n                    throw error(\"Unterminated string\", conf);\n                }\n            } else {\n                if (c === \"\\\\\") {\n                    token += c + w.nextChar();\n                } else {\n                    token += c;\n                }\n            }\n        \n            c = w.nextChar();\n        \n        }\n        token += c;\n        w.nextChar();\n        tokener(token, 'string', conf);\n    }\n    \n    function brace() {\n        var w = walker,\n            c = w.ch,\n            depth = 0,\n            token = c,\n            conf = getConf();\n    \n        c = w.nextChar();\n    \n        while (c !== ')' && !depth) {\n        \tif (c === '(') {\n        \t\tdepth++;\n        \t} else if (c === ')') {\n        \t\tdepth--;\n        \t} else if (c === false) {\n        \t\tthrow error(\"Unterminated brace\", conf);\n        \t}\n        \t\n        \ttoken += c;\n            c = w.nextChar();\n        }\n        \n        token += c;\n        w.nextChar();\n        tokener(token, 'brace', conf);\n    }\n\n    function identifier(pre) {\n        var w = walker,\n            c = w.ch,\n            conf = getConf(),\n            token = (pre) ? pre + c : c;\n            \n        c = w.nextChar();\n    \n        if (pre) { // adjust token position\n        \tconf['char'] -= pre.length;\n        }\n        \n        while (isNameChar(c) || isDigit(c)) {\n            token += c;\n            c = w.nextChar();\n        }\n    \n        tokener(token, 'identifier', conf);    \n    }\n\n    function num() {\n        var w = walker,\n            c = w.ch,\n            conf = getConf(),\n            token = c,\n            point = token === '.',\n            nondigit;\n        \n        c = w.nextChar();\n        nondigit = !isDigit(c);\n    \n        // .2px or .classname?\n        if (point && nondigit) {\n            // meh, NaN, could be a class name, so it's an operator for now\n            conf.charend = conf['char'];\n            conf.lineend = conf.line;\n            return tokener(token, '.', conf);    \n        }\n        \n        // -2px or -moz-something\n        if (token === '-' && nondigit) {\n            return identifier('-');\n        }\n    \n        while (c !== false && (isDigit(c) || (!point && c === '.'))) { // not end of source && digit or first instance of .\n            if (c === '.') {\n                point = true;\n            }\n            token += c;\n            c = w.nextChar();\n        }\n\n        tokener(token, 'number', conf);    \n    \n    }\n\n    function op() {\n        var w = walker,\n            c = w.ch,\n            conf = getConf(),\n            token = c,\n            next = w.nextChar();\n            \n        if (next === \"=\" && isOp(token, true)) {\n            token += next;\n            tokener(token, 'match', conf);\n            w.nextChar();\n            return;\n        } \n        \n        conf.charend = conf['char'] + 1;\n        conf.lineend = conf.line;    \n        tokener(token, token, conf);\n    }\n\n\n    // call the appropriate handler based on the first character in a token suspect\n    function tokenize() {\n\n        var ch = walker.ch;\n    \n        if (ch === \" \" || ch === \"\\t\") {\n            return white();\n        }\n\n        if (ch === '/') {\n            return comment();\n        } \n\n        if (ch === '\"' || ch === \"'\") {\n            return str();\n        }\n        \n        if (ch === '(') {\n            return brace();\n        }\n    \n        if (ch === '-' || ch === '.' || isDigit(ch)) { // tricky - char: minus (-1px) or dash (-moz-stuff)\n            return num();\n        }\n    \n        if (isNameChar(ch)) {\n            return identifier();\n        }\n\n        if (isOp(ch)) {\n            return op();\n        }\n        \n        if (ch === \"\\n\") {\n            tokener(\"line\");\n            walker.nextChar();\n            return;\n        }\n        \n        throw error(\"Unrecognized character\");\n    }\n    \n    /**\n\t * Returns newline character at specified position in content\n\t * @param {String} content\n\t * @param {Number} pos\n\t * @return {String}\n\t */\n\tfunction getNewline(content, pos) {\n\t\treturn content.charAt(pos) == '\\r' && content.charAt(pos + 1) == '\\n' \n\t\t\t? '\\r\\n' \n\t\t\t: content.charAt(pos);\n\t}\n\n    return {\n    \t/**\n    \t * @param source\n    \t * @returns\n    \t * @memberOf emmet.cssParser\n    \t */\n        lex: function (source) {\n            walker.init(source);\n            tokens = [];\n            while (walker.ch !== false) {\n                tokenize();            \n            }\n            return tokens;\n        },\n        \n        /**\n         * Tokenizes CSS source\n         * @param {String} source\n         * @returns {Array}\n         */\n        parse: function(source) {\n        \t// transform tokens\n\t \t\tvar pos = 0;\n\t \t\treturn _.map(this.lex(source), function(token) {\n\t \t\t\tif (token.type == 'line') {\n\t \t\t\t\ttoken.value = getNewline(source, pos);\n\t \t\t\t}\n\t \t\t\t\n\t \t\t\treturn {\n\t \t\t\t\ttype: token.type,\n\t \t\t\t\tstart: pos,\n\t \t\t\t\tend: (pos += token.value.length)\n\t \t\t\t};\n\t\t\t});\n\t\t},\n        \n        toSource: function (toks) {\n            var i = 0, max = toks.length, t, src = '';\n            for (; i < max; i += 1) {\n                t = toks[i];\n                if (t.type === 'line') {\n                    src += '\\n';\n                } else {\n                    src += t.value;\n                }\n            }\n            return src;\n        }\n    };\n});/**\n * HTML tokenizer by Marijn Haverbeke\n * http://codemirror.net/\n * @constructor\n * @memberOf __xmlParseDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('xmlParser', function(require, _) {\n\tvar Kludges = {\n\t\tautoSelfClosers : {},\n\t\timplicitlyClosed : {},\n\t\tcontextGrabbers : {},\n\t\tdoNotIndent : {},\n\t\tallowUnquoted : true,\n\t\tallowMissing : true\n\t};\n\n\t// Return variables for tokenizers\n\tvar tagName = null, type = null;\n\n\tfunction inText(stream, state) {\n\t\tfunction chain(parser) {\n\t\t\tstate.tokenize = parser;\n\t\t\treturn parser(stream, state);\n\t\t}\n\n\t\tvar ch = stream.next();\n\t\tif (ch == \"<\") {\n\t\t\tif (stream.eat(\"!\")) {\n\t\t\t\tif (stream.eat(\"[\")) {\n\t\t\t\t\tif (stream.match(\"CDATA[\"))\n\t\t\t\t\t\treturn chain(inBlock(\"atom\", \"]]>\"));\n\t\t\t\t\telse\n\t\t\t\t\t\treturn null;\n\t\t\t\t} else if (stream.match(\"--\"))\n\t\t\t\t\treturn chain(inBlock(\"comment\", \"-->\"));\n\t\t\t\telse if (stream.match(\"DOCTYPE\", true, true)) {\n\t\t\t\t\tstream.eatWhile(/[\\w\\._\\-]/);\n\t\t\t\t\treturn chain(doctype(1));\n\t\t\t\t} else\n\t\t\t\t\treturn null;\n\t\t\t} else if (stream.eat(\"?\")) {\n\t\t\t\tstream.eatWhile(/[\\w\\._\\-]/);\n\t\t\t\tstate.tokenize = inBlock(\"meta\", \"?>\");\n\t\t\t\treturn \"meta\";\n\t\t\t} else {\n\t\t\t\ttype = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n\t\t\t\tstream.eatSpace();\n\t\t\t\ttagName = \"\";\n\t\t\t\tvar c;\n\t\t\t\twhile ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/)))\n\t\t\t\t\ttagName += c;\n\t\t\t\tstate.tokenize = inTag;\n\t\t\t\treturn \"tag\";\n\t\t\t}\n\t\t} else if (ch == \"&\") {\n\t\t\tvar ok;\n\t\t\tif (stream.eat(\"#\")) {\n\t\t\t\tif (stream.eat(\"x\")) {\n\t\t\t\t\tok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n\t\t\t\t} else {\n\t\t\t\t\tok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n\t\t\t}\n\t\t\treturn ok ? \"atom\" : \"error\";\n\t\t} else {\n\t\t\tstream.eatWhile(/[^&<]/);\n\t\t\treturn \"text\";\n\t\t}\n\t}\n\n\tfunction inTag(stream, state) {\n\t\tvar ch = stream.next();\n\t\tif (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\n\t\t\tstate.tokenize = inText;\n\t\t\ttype = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n\t\t\treturn \"tag\";\n\t\t} else if (ch == \"=\") {\n\t\t\ttype = \"equals\";\n\t\t\treturn null;\n\t\t} else if (/[\\'\\\"]/.test(ch)) {\n\t\t\tstate.tokenize = inAttribute(ch);\n\t\t\treturn state.tokenize(stream, state);\n\t\t} else {\n\t\t\tstream.eatWhile(/[^\\s\\u00a0=<>\\\"\\'\\/?]/);\n\t\t\treturn \"word\";\n\t\t}\n\t}\n\n\tfunction inAttribute(quote) {\n\t\treturn function(stream, state) {\n\t\t\twhile (!stream.eol()) {\n\t\t\t\tif (stream.next() == quote) {\n\t\t\t\t\tstate.tokenize = inTag;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"string\";\n\t\t};\n\t}\n\n\tfunction inBlock(style, terminator) {\n\t\treturn function(stream, state) {\n\t\t\twhile (!stream.eol()) {\n\t\t\t\tif (stream.match(terminator)) {\n\t\t\t\t\tstate.tokenize = inText;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tstream.next();\n\t\t\t}\n\t\t\treturn style;\n\t\t};\n\t}\n\t\n\tfunction doctype(depth) {\n\t\treturn function(stream, state) {\n\t\t\tvar ch;\n\t\t\twhile ((ch = stream.next()) != null) {\n\t\t\t\tif (ch == \"<\") {\n\t\t\t\t\tstate.tokenize = doctype(depth + 1);\n\t\t\t\t\treturn state.tokenize(stream, state);\n\t\t\t\t} else if (ch == \">\") {\n\t\t\t\t\tif (depth == 1) {\n\t\t\t\t\t\tstate.tokenize = inText;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.tokenize = doctype(depth - 1);\n\t\t\t\t\t\treturn state.tokenize(stream, state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"meta\";\n\t\t};\n\t}\n\n\tvar curState = null, setStyle;\n\tfunction pass() {\n\t\tfor (var i = arguments.length - 1; i >= 0; i--)\n\t\t\tcurState.cc.push(arguments[i]);\n\t}\n\t\n\tfunction cont() {\n\t\tpass.apply(null, arguments);\n\t\treturn true;\n\t}\n\n\tfunction pushContext(tagName, startOfLine) {\n\t\tvar noIndent = Kludges.doNotIndent.hasOwnProperty(tagName) \n\t\t\t|| (curState.context && curState.context.noIndent);\n\t\tcurState.context = {\n\t\t\tprev : curState.context,\n\t\t\ttagName : tagName,\n\t\t\tindent : curState.indented,\n\t\t\tstartOfLine : startOfLine,\n\t\t\tnoIndent : noIndent\n\t\t};\n\t}\n\t\n\tfunction popContext() {\n\t\tif (curState.context)\n\t\t\tcurState.context = curState.context.prev;\n\t}\n\n\tfunction element(type) {\n\t\tif (type == \"openTag\") {\n\t\t\tcurState.tagName = tagName;\n\t\t\treturn cont(attributes, endtag(curState.startOfLine));\n\t\t} else if (type == \"closeTag\") {\n\t\t\tvar err = false;\n\t\t\tif (curState.context) {\n\t\t\t\tif (curState.context.tagName != tagName) {\n\t\t\t\t\tif (Kludges.implicitlyClosed.hasOwnProperty(curState.context.tagName.toLowerCase())) {\n\t\t\t\t\t\tpopContext();\n\t\t\t\t\t}\n\t\t\t\t\terr = !curState.context || curState.context.tagName != tagName;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (err)\n\t\t\t\tsetStyle = \"error\";\n\t\t\treturn cont(endclosetag(err));\n\t\t}\n\t\treturn cont();\n\t}\n\t\n\tfunction endtag(startOfLine) {\n\t\treturn function(type) {\n\t\t\tif (type == \"selfcloseTag\"\n\t\t\t\t\t|| (type == \"endTag\" && Kludges.autoSelfClosers\n\t\t\t\t\t\t\t.hasOwnProperty(curState.tagName\n\t\t\t\t\t\t\t\t\t.toLowerCase()))) {\n\t\t\t\tmaybePopContext(curState.tagName.toLowerCase());\n\t\t\t\treturn cont();\n\t\t\t}\n\t\t\tif (type == \"endTag\") {\n\t\t\t\tmaybePopContext(curState.tagName.toLowerCase());\n\t\t\t\tpushContext(curState.tagName, startOfLine);\n\t\t\t\treturn cont();\n\t\t\t}\n\t\t\treturn cont();\n\t\t};\n\t}\n\t\n\tfunction endclosetag(err) {\n\t\treturn function(type) {\n\t\t\tif (err)\n\t\t\t\tsetStyle = \"error\";\n\t\t\tif (type == \"endTag\") {\n\t\t\t\tpopContext();\n\t\t\t\treturn cont();\n\t\t\t}\n\t\t\tsetStyle = \"error\";\n\t\t\treturn cont(arguments.callee);\n\t\t};\n\t}\n\t\n\tfunction maybePopContext(nextTagName) {\n\t\tvar parentTagName;\n\t\twhile (true) {\n\t\t\tif (!curState.context) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tparentTagName = curState.context.tagName.toLowerCase();\n\t\t\tif (!Kludges.contextGrabbers.hasOwnProperty(parentTagName)\n\t\t\t\t\t|| !Kludges.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpopContext();\n\t\t}\n\t}\n\n\tfunction attributes(type) {\n\t\tif (type == \"word\") {\n\t\t\tsetStyle = \"attribute\";\n\t\t\treturn cont(attribute, attributes);\n\t\t}\n\t\tif (type == \"endTag\" || type == \"selfcloseTag\")\n\t\t\treturn pass();\n\t\tsetStyle = \"error\";\n\t\treturn cont(attributes);\n\t}\n\t\n\tfunction attribute(type) {\n\t\tif (type == \"equals\")\n\t\t\treturn cont(attvalue, attributes);\n\t\tif (!Kludges.allowMissing)\n\t\t\tsetStyle = \"error\";\n\t\treturn (type == \"endTag\" || type == \"selfcloseTag\") ? pass()\n\t\t\t\t: cont();\n\t}\n\t\n\tfunction attvalue(type) {\n\t\tif (type == \"string\")\n\t\t\treturn cont(attvaluemaybe);\n\t\tif (type == \"word\" && Kludges.allowUnquoted) {\n\t\t\tsetStyle = \"string\";\n\t\t\treturn cont();\n\t\t}\n\t\tsetStyle = \"error\";\n\t\treturn (type == \"endTag\" || type == \"selfCloseTag\") ? pass()\n\t\t\t\t: cont();\n\t}\n\t\n\tfunction attvaluemaybe(type) {\n\t\tif (type == \"string\")\n\t\t\treturn cont(attvaluemaybe);\n\t\telse\n\t\t\treturn pass();\n\t}\n\t\n\tfunction startState() {\n\t\treturn {\n\t\t\ttokenize : inText,\n\t\t\tcc : [],\n\t\t\tindented : 0,\n\t\t\tstartOfLine : true,\n\t\t\ttagName : null,\n\t\t\tcontext : null\n\t\t};\n\t}\n\t\n\tfunction token(stream, state) {\n\t\tif (stream.sol()) {\n\t\t\tstate.startOfLine = true;\n\t\t\tstate.indented = 0;\n\t\t}\n\t\t\n\t\tif (stream.eatSpace())\n\t\t\treturn null;\n\n\t\tsetStyle = type = tagName = null;\n\t\tvar style = state.tokenize(stream, state);\n\t\tstate.type = type;\n\t\tif ((style || type) && style != \"comment\") {\n\t\t\tcurState = state;\n\t\t\twhile (true) {\n\t\t\t\tvar comb = state.cc.pop() || element;\n\t\t\t\tif (comb(type || style))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tstate.startOfLine = false;\n\t\treturn setStyle || style;\n\t}\n\n\treturn {\n\t\t/**\n\t\t * @memberOf emmet.xmlParser\n\t\t * @returns\n\t\t */\n\t\tparse: function(data, offset) {\n\t\t\toffset = offset || 0;\n\t\t\tvar state = startState();\n\t\t\tvar stream = require('stringStream').create(data);\n\t\t\tvar tokens = [];\n\t\t\twhile (!stream.eol()) {\n\t\t\t\ttokens.push({\n\t\t\t\t\ttype: token(stream, state),\n\t\t\t\t\tstart: stream.start + offset,\n\t\t\t\t\tend: stream.pos + offset\n\t\t\t\t});\n\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t\t\n\t\t\treturn tokens;\n\t\t}\t\t\n\t};\n});\n/*!\n * string_score.js: String Scoring Algorithm 0.1.10 \n *\n * http://joshaven.com/string_score\n * https://github.com/joshaven/string_score\n *\n * Copyright (C) 2009-2011 Joshaven Potter <yourtech@gmail.com>\n * Special thanks to all of the contributors listed here https://github.com/joshaven/string_score\n * MIT license: http://www.opensource.org/licenses/mit-license.php\n *\n * Date: Tue Mar 1 2011\n*/\n\n/**\n * Scores a string against another string.\n *  'Hello World'.score('he');     //=> 0.5931818181818181\n *  'Hello World'.score('Hello');  //=> 0.7318181818181818\n */\nemmet.define('string-score', function(require, _) {\n\treturn {\n\t\tscore: function(string, abbreviation, fuzziness) {\n\t\t\t// If the string is equal to the abbreviation, perfect match.\n\t\t\t  if (string == abbreviation) {return 1;}\n\t\t\t  //if it's not a perfect match and is empty return 0\n\t\t\t  if(abbreviation == \"\") {return 0;}\n\n\t\t\t  var total_character_score = 0,\n\t\t\t      abbreviation_length = abbreviation.length,\n\t\t\t      string_length = string.length,\n\t\t\t      start_of_string_bonus,\n\t\t\t      abbreviation_score,\n\t\t\t      fuzzies=1,\n\t\t\t      final_score;\n\t\t\t  \n\t\t\t  // Walk through abbreviation and add up scores.\n\t\t\t  for (var i = 0,\n\t\t\t         character_score/* = 0*/,\n\t\t\t         index_in_string/* = 0*/,\n\t\t\t         c/* = ''*/,\n\t\t\t         index_c_lowercase/* = 0*/,\n\t\t\t         index_c_uppercase/* = 0*/,\n\t\t\t         min_index/* = 0*/;\n\t\t\t     i < abbreviation_length;\n\t\t\t     ++i) {\n\t\t\t    \n\t\t\t    // Find the first case-insensitive match of a character.\n\t\t\t    c = abbreviation.charAt(i);\n\t\t\t    \n\t\t\t    index_c_lowercase = string.indexOf(c.toLowerCase());\n\t\t\t    index_c_uppercase = string.indexOf(c.toUpperCase());\n\t\t\t    min_index = Math.min(index_c_lowercase, index_c_uppercase);\n\t\t\t    index_in_string = (min_index > -1) ? min_index : Math.max(index_c_lowercase, index_c_uppercase);\n\t\t\t    \n\t\t\t    if (index_in_string === -1) { \n\t\t\t      if (fuzziness) {\n\t\t\t        fuzzies += 1-fuzziness;\n\t\t\t        continue;\n\t\t\t      } else {\n\t\t\t        return 0;\n\t\t\t      }\n\t\t\t    } else {\n\t\t\t      character_score = 0.1;\n\t\t\t    }\n\t\t\t    \n\t\t\t    // Set base score for matching 'c'.\n\t\t\t    \n\t\t\t    // Same case bonus.\n\t\t\t    if (string[index_in_string] === c) { \n\t\t\t      character_score += 0.1; \n\t\t\t    }\n\t\t\t    \n\t\t\t    // Consecutive letter & start-of-string Bonus\n\t\t\t    if (index_in_string === 0) {\n\t\t\t      // Increase the score when matching first character of the remainder of the string\n\t\t\t      character_score += 0.6;\n\t\t\t      if (i === 0) {\n\t\t\t        // If match is the first character of the string\n\t\t\t        // & the first character of abbreviation, add a\n\t\t\t        // start-of-string match bonus.\n\t\t\t        start_of_string_bonus = 1; //true;\n\t\t\t      }\n\t\t\t    }\n\t\t\t    else {\n\t\t\t  // Acronym Bonus\n\t\t\t  // Weighing Logic: Typing the first character of an acronym is as if you\n\t\t\t  // preceded it with two perfect character matches.\n\t\t\t  if (string.charAt(index_in_string - 1) === ' ') {\n\t\t\t    character_score += 0.8; // * Math.min(index_in_string, 5); // Cap bonus at 0.4 * 5\n\t\t\t  }\n\t\t\t    }\n\t\t\t    \n\t\t\t    // Left trim the already matched part of the string\n\t\t\t    // (forces sequential matching).\n\t\t\t    string = string.substring(index_in_string + 1, string_length);\n\t\t\t    \n\t\t\t    total_character_score += character_score;\n\t\t\t  } // end of for loop\n\t\t\t  \n\t\t\t  // Uncomment to weigh smaller words higher.\n\t\t\t  // return total_character_score / string_length;\n\t\t\t  \n\t\t\t  abbreviation_score = total_character_score / abbreviation_length;\n\t\t\t  //percentage_of_matched_string = abbreviation_length / string_length;\n\t\t\t  //word_score = abbreviation_score * percentage_of_matched_string;\n\t\t\t  \n\t\t\t  // Reduce penalty for longer strings.\n\t\t\t  //final_score = (word_score + abbreviation_score) / 2;\n\t\t\t  final_score = ((abbreviation_score * (abbreviation_length / string_length)) + abbreviation_score) / 2;\n\t\t\t  \n\t\t\t  final_score = final_score / fuzzies;\n\t\t\t  \n\t\t\t  if (start_of_string_bonus && (final_score + 0.15 < 1)) {\n\t\t\t    final_score += 0.15;\n\t\t\t  }\n\t\t\t  \n\t\t\t  return final_score;\n\t\t}\n\t};\n});/**\n * Utility module for Emmet\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('utils', function(require, _) {\n\t/** \n\t * Special token used as a placeholder for caret positions inside \n\t * generated output \n\t */\n\tvar caretPlaceholder = '${0}';\n\t\n\t/**\n\t * A simple string builder, optimized for faster text concatenation\n\t * @param {String} value Initial value\n\t */\n\tfunction StringBuilder(value) {\n\t\tthis._data = [];\n\t\tthis.length = 0;\n\t\t\n\t\tif (value)\n\t\t\tthis.append(value);\n\t}\n\t\n\tStringBuilder.prototype = {\n\t\t/**\n\t\t * Append string\n\t\t * @param {String} text\n\t\t */\n\t\tappend: function(text) {\n\t\t\tthis._data.push(text);\n\t\t\tthis.length += text.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this._data.join('');\n\t\t},\n\t\t\n\t\t/**\n\t\t * @returns {String}\n\t\t */\n\t\tvalueOf: function() {\n\t\t\treturn this.toString();\n\t\t}\n\t};\n\t\n\treturn {\n\t\t/** @memberOf utils */\n\t\treTag: /<\\/?[\\w:\\-]+(?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*\\s*(\\/?)>$/,\n\t\t\n\t\t/**\n\t\t * Test if passed string ends with XHTML tag. This method is used for testing\n\t\t * '>' character: it belongs to tag or it's a part of abbreviation? \n\t\t * @param {String} str\n\t\t * @return {Boolean}\n\t\t */\n\t\tendsWithTag: function(str) {\n\t\t\treturn this.reTag.test(str);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed symbol is a number\n\t\t * @param {String} ch\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisNumeric: function(ch) {\n\t\t\tif (typeof(ch) == 'string')\n\t\t\t\tch = ch.charCodeAt(0);\n\t\t\t\t\n\t\t\treturn (ch && ch > 47 && ch < 58);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Trim whitespace from string\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\ttrim: function(text) {\n\t\t\treturn (text || \"\").replace(/^\\s+|\\s+$/g, \"\");\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns newline character\n\t\t * @returns {String}\n\t\t */\n\t\tgetNewline: function() {\n\t\t\tvar res = require('resources');\n\t\t\tif (!res) {\n\t\t\t\treturn '\\n';\n\t\t\t}\n\t\t\t\n\t\t\tvar nl = res.getVariable('newline');\n\t\t\treturn _.isString(nl) ? nl : '\\n';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets new newline character that will be used in output\n\t\t * @param {String} str\n\t\t */\n\t\tsetNewline: function(str) {\n\t\t\tvar res = require('resources');\n\t\t\tres.setVariable('newline', str);\n\t\t\tres.setVariable('nl', str);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Split text into lines. Set <code>remove_empty</code> to true to filter\n\t\t * empty lines\n\t\t * @param {String} text Text to split\n\t\t * @param {Boolean} removeEmpty Remove empty lines from result\n\t\t * @return {Array}\n\t\t */\n\t\tsplitByLines: function(text, removeEmpty) {\n\t\t\t// IE fails to split string by regexp, \n\t\t\t// need to normalize newlines first\n\t\t\t// Also, Mozilla's Rhiho JS engine has a weird newline bug\n\t\t\tvar nl = this.getNewline();\n\t\t\tvar lines = (text || '')\n\t\t\t\t.replace(/\\r\\n/g, '\\n')\n\t\t\t\t.replace(/\\n\\r/g, '\\n')\n\t\t\t\t.replace(/\\r/g, '\\n')\n\t\t\t\t.replace(/\\n/g, nl)\n\t\t\t\t.split(nl);\n\t\t\t\n\t\t\tif (removeEmpty) {\n\t\t\t\tlines = _.filter(lines, function(line) {\n\t\t\t\t\treturn line.length && !!this.trim(line);\n\t\t\t\t}, this);\n\t\t\t}\n\t\t\t\n\t\t\treturn lines;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Normalizes newline character: replaces newlines in <code>text</code> \n\t\t * with newline defined in preferences\n\t\t * @param {String} text\n\t\t * @returns {String}\n\t\t */\n\t\tnormalizeNewline: function(text) {\n\t\t\treturn this.splitByLines(text).join(this.getNewline());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Repeats string <code>howMany</code> times\n\t\t * @param {String} str\n\t\t * @param {Number} how_many\n\t\t * @return {String}\n\t\t */\n\t\trepeatString: function(str, howMany) {\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < howMany; i++) \n\t\t\t\tresult.push(str);\n\t\t\t\t\n\t\t\treturn result.join('');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of paddings that should be used to align passed string\n\t\t * @param {Array} strings\n\t\t * @returns {Array}\n\t\t */\n\t\tgetStringsPads: function(strings) {\n\t\t\tvar lengths = _.map(strings, function(s) {\n\t\t\t\treturn _.isString(s) ? s.length : +s;\n\t\t\t});\n\t\t\t\n\t\t\tvar max = _.max(lengths);\n\t\t\treturn _.map(lengths, function(l) {\n\t\t\t\tvar pad = max - l;\n\t\t\t\treturn pad ? this.repeatString(' ', pad) : '';\n\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Indents text with padding\n\t\t * @param {String} text Text to indent\n\t\t * @param {String} pad Padding size (number) or padding itself (string)\n\t\t * @return {String}\n\t\t */\n\t\tpadString: function(text, pad) {\n\t\t\tvar padStr = (_.isNumber(pad)) \n\t\t\t\t? this.repeatString(require('resources').getVariable('indentation') || '\\t', pad) \n\t\t\t\t: pad;\n\t\t\t\t\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tvar lines = this.splitByLines(text);\n\t\t\tvar nl = this.getNewline();\n\t\t\t\t\n\t\t\tresult.push(lines[0]);\n\t\t\tfor (var j = 1; j < lines.length; j++) \n\t\t\t\tresult.push(nl + padStr + lines[j]);\n\t\t\t\t\n\t\t\treturn result.join('');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Pad string with zeroes\n\t\t * @param {String} str String to pad\n\t\t * @param {Number} pad Desired string length\n\t\t * @return {String}\n\t\t */\n\t\tzeroPadString: function(str, pad) {\n\t\t\tvar padding = '';\n\t\t\tvar il = str.length;\n\t\t\t\t\n\t\t\twhile (pad > il++) padding += '0';\n\t\t\treturn padding + str; \n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes padding at the beginning of each text's line\n\t\t * @param {String} text\n\t\t * @param {String} pad\n\t\t */\n\t\tunindentString: function(text, pad) {\n\t\t\tvar lines = this.splitByLines(text);\n\t\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\t\tif (lines[i].search(pad) == 0)\n\t\t\t\t\tlines[i] = lines[i].substr(pad.length);\n\t\t\t}\n\t\t\t\n\t\t\treturn lines.join(this.getNewline());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replaces unescaped symbols in <code>str</code>. For example, the '$' symbol\n\t\t * will be replaced in 'item$count', but not in 'item\\$count'.\n\t\t * @param {String} str Original string\n\t\t * @param {String} symbol Symbol to replace\n\t\t * @param {String} replace Symbol replacement. Might be a function that \n\t\t * returns new value\n\t\t * @return {String}\n\t\t */\n\t\treplaceUnescapedSymbol: function(str, symbol, replace) {\n\t\t\tvar i = 0;\n\t\t\tvar il = str.length;\n\t\t\tvar sl = symbol.length;\n\t\t\tvar matchCount = 0;\n\t\t\t\t\n\t\t\twhile (i < il) {\n\t\t\t\tif (str.charAt(i) == '\\\\') {\n\t\t\t\t\t// escaped symbol, skip next character\n\t\t\t\t\ti += sl + 1;\n\t\t\t\t} else if (str.substr(i, sl) == symbol) {\n\t\t\t\t\t// have match\n\t\t\t\t\tvar curSl = sl;\n\t\t\t\t\tmatchCount++;\n\t\t\t\t\tvar newValue = replace;\n\t\t\t\t\tif (_.isFunction(replace)) {\n\t\t\t\t\t\tvar replaceData = replace(str, symbol, i, matchCount);\n\t\t\t\t\t\tif (replaceData) {\n\t\t\t\t\t\t\tcurSl = replaceData[0].length;\n\t\t\t\t\t\t\tnewValue = replaceData[1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewValue = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (newValue === false) { // skip replacement\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstr = str.substring(0, i) + newValue + str.substring(i + curSl);\n\t\t\t\t\t// adjust indexes\n\t\t\t\t\til = str.length;\n\t\t\t\t\ti += newValue.length;\n\t\t\t\t} else {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn str;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replace variables like ${var} in string\n\t\t * @param {String} str\n\t\t * @param {Object} vars Variable set (defaults to variables defined in \n\t\t * <code>snippets.json</code>) or variable resolver (<code>Function</code>)\n\t\t * @return {String}\n\t\t */\n\t\treplaceVariables: function(str, vars) {\n\t\t\tvars = vars || {};\n\t\t\tvar resolver = _.isFunction(vars) ? vars : function(str, p1) {\n\t\t\t\treturn p1 in vars ? vars[p1] : null;\n\t\t\t};\n\t\t\t\n\t\t\tvar res = require('resources');\n\t\t\treturn require('tabStops').processText(str, {\n\t\t\t\tvariable: function(data) {\n\t\t\t\t\tvar newValue = resolver(data.token, data.name, data);\n\t\t\t\t\tif (newValue === null) {\n\t\t\t\t\t\t// try to find variable in resources\n\t\t\t\t\t\tnewValue = res.getVariable(data.name);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (newValue === null || _.isUndefined(newValue))\n\t\t\t\t\t\t// nothing found, return token itself\n\t\t\t\t\t\tnewValue = data.token;\n\t\t\t\t\treturn newValue;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replaces '$' character in string assuming it might be escaped with '\\'\n\t\t * @param {String} str String where character should be replaced\n\t\t * @param {String} value New value\n\t\t * @return {String}\n\t\t */\n\t\treplaceCounter: function(str, value, total) {\n\t\t\tvar symbol = '$';\n\t\t\t// in case we received strings from Java, convert the to native strings\n\t\t\tstr = String(str);\n\t\t\tvalue = String(value);\n\t\t\t\n\t\t\tif (/^\\-?\\d+$/.test(value)) {\n\t\t\t\tvalue = +value;\n\t\t\t}\n\t\t\t\n\t\t\tvar that = this;\n\t\t\t\n\t\t\treturn this.replaceUnescapedSymbol(str, symbol, function(str, symbol, pos, matchNum){\n\t\t\t\tif (str.charAt(pos + 1) == '{' || that.isNumeric(str.charAt(pos + 1)) ) {\n\t\t\t\t\t// it's a variable, skip it\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// replace sequense of $ symbols with padded number  \n\t\t\t\tvar j = pos + 1;\n\t\t\t\twhile(str.charAt(j) == '$' && str.charAt(j + 1) != '{') j++;\n\t\t\t\tvar pad = j - pos;\n\t\t\t\t\n\t\t\t\t// get counter base\n\t\t\t\tvar base = 0, decrement = false, m;\n\t\t\t\tif (m = str.substr(j).match(/^@(\\-?)(\\d*)/)) {\n\t\t\t\t\tj += m[0].length;\n\t\t\t\t\t\n\t\t\t\t\tif (m[1]) {\n\t\t\t\t\t\tdecrement = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbase = parseInt(m[2] || 1) - 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (decrement && total && _.isNumber(value)) {\n\t\t\t\t\tvalue = total - value + 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue += base;\n\t\t\t\t\n\t\t\t\treturn [str.substring(pos, j), that.zeroPadString(value + '', pad)];\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if string matches against <code>reTag</code> regexp. This \n\t\t * function may be used to test if provided string contains HTML tags\n\t\t * @param {String} str\n\t\t * @returns {Boolean}\n\t\t */\n\t\tmatchesTag: function(str) {\n\t\t\treturn this.reTag.test(str || '');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Escapes special characters used in Emmet, like '$', '|', etc.\n\t\t * Use this method before passing to actions like \"Wrap with Abbreviation\"\n\t\t * to make sure that existing special characters won't be altered\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\tescapeText: function(text) {\n\t\t\treturn text.replace(/([\\$\\\\])/g, '\\\\$1');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Unescapes special characters used in Emmet, like '$', '|', etc.\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\tunescapeText: function(text) {\n\t\t\treturn text.replace(/\\\\(.)/g, '$1');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns caret placeholder\n\t\t * @returns {String}\n\t\t */\n\t\tgetCaretPlaceholder: function() {\n\t\t\treturn _.isFunction(caretPlaceholder) \n\t\t\t\t? caretPlaceholder.apply(this, arguments)\n\t\t\t\t: caretPlaceholder;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets new representation for carets in generated output\n\t\t * @param {String} value New caret placeholder. Might be a \n\t\t * <code>Function</code>\n\t\t */\n\t\tsetCaretPlaceholder: function(value) {\n\t\t\tcaretPlaceholder = value;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns line padding\n\t\t * @param {String} line\n\t\t * @return {String}\n\t\t */\n\t\tgetLinePadding: function(line) {\n\t\t\treturn (line.match(/^(\\s+)/) || [''])[0];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper function that returns padding of line of <code>pos</code>\n\t\t * position in <code>content</code>\n\t\t * @param {String} content\n\t\t * @param {Number} pos\n\t\t * @returns {String}\n\t\t */\n\t\tgetLinePaddingFromPosition: function(content, pos) {\n\t\t\tvar lineRange = this.findNewlineBounds(content, pos);\n\t\t\treturn this.getLinePadding(lineRange.substring(content));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Escape special regexp chars in string, making it usable for creating dynamic\n\t\t * regular expressions\n\t\t * @param {String} str\n\t\t * @return {String}\n\t\t */\n\t\tescapeForRegexp: function(str) {\n\t\t\tvar specials = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\]\", \"g\"); // .*+?|()[]{}\\\n\t\t\treturn str.replace(specials, \"\\\\$&\");\n\t\t},\n\t\t\n\t\t/**\n\t\t * Make decimal number look good: convert it to fixed precision end remove\n\t\t * traling zeroes \n\t\t * @param {Number} num\n\t\t * @param {Number} fracion Fraction numbers (default is 2)\n\t\t * @return {String}\n\t\t */\n\t\tprettifyNumber: function(num, fraction) {\n\t\t\treturn num.toFixed(typeof fraction == 'undefined' ? 2 : fraction).replace(/\\.?0+$/, '');\n\t\t},\n\t\t\n\t\t/**\n\t\t * A simple mutable string shim, optimized for faster text concatenation\n\t\t * @param {String} value Initial value\n\t\t * @returns {StringBuilder}\n\t\t */\n\t\tstringBuilder: function(value) {\n\t\t\treturn new StringBuilder(value);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Replace substring of <code>str</code> with <code>value</code>\n\t\t * @param {String} str String where to replace substring\n\t\t * @param {String} value New substring value\n\t\t * @param {Number} start Start index of substring to replace. May also\n\t\t * be a <code>Range</code> object: in this case, the <code>end</code>\n\t\t * argument is not required\n\t\t * @param {Number} end End index of substring to replace. If ommited, \n\t\t * <code>start</code> argument is used\n\t\t */\n\t\treplaceSubstring: function(str, value, start, end) {\n\t\t\tif (_.isObject(start) && 'end' in start) {\n\t\t\t\tend = start.end;\n\t\t\t\tstart = start.start;\n\t\t\t}\n\t\t\t\n\t\t\tif (_.isString(end))\n\t\t\t\tend = start + end.length;\n\t\t\t\n\t\t\tif (_.isUndefined(end))\n\t\t\t\tend = start;\n\t\t\t\n\t\t\tif (start < 0 || start > str.length)\n\t\t\t\treturn str;\n\t\t\t\n\t\t\treturn str.substring(0, start) + value + str.substring(end);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Narrows down text range, adjusting selection to non-space characters\n\t\t * @param {String} text\n\t\t * @param {Number} start Starting range in <code>text</code> where \n\t\t * slection should be adjusted. Can also be any object that is accepted\n\t\t * by <code>Range</code> class\n\t\t * @return {Range}\n\t\t */\n\t\tnarrowToNonSpace: function(text, start, end) {\n\t\t\tvar range = require('range').create(start, end);\n\t\t\t\n\t\t\tvar reSpace = /[\\s\\n\\r\\u00a0]/;\n\t\t\t// narrow down selection until first non-space character\n\t\t\twhile (range.start < range.end) {\n\t\t\t\tif (!reSpace.test(text.charAt(range.start)))\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\trange.start++;\n\t\t\t}\n\t\t\t\n\t\t\twhile (range.end > range.start) {\n\t\t\t\trange.end--;\n\t\t\t\tif (!reSpace.test(text.charAt(range.end))) {\n\t\t\t\t\trange.end++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn range;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Find start and end index of text line for <code>from</code> index\n\t\t * @param {String} text \n\t\t * @param {Number} from\n\t\t */\n\t\tfindNewlineBounds: function(text, from) {\n\t\t\tvar len = text.length,\n\t\t\t\tstart = 0,\n\t\t\t\tend = len - 1;\n\t\t\t\n\t\t\t// search left\n\t\t\tfor (var i = from - 1; i > 0; i--) {\n\t\t\t\tvar ch = text.charAt(i);\n\t\t\t\tif (ch == '\\n' || ch == '\\r') {\n\t\t\t\t\tstart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// search right\n\t\t\tfor (var j = from; j < len; j++) {\n\t\t\t\tvar ch = text.charAt(j);\n\t\t\t\tif (ch == '\\n' || ch == '\\r') {\n\t\t\t\t\tend = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn require('range').create(start, end - start);\n\t\t},\n\n\t\t/**\n\t\t * Deep merge of two or more objects. Taken from jQuery.extend()\n\t\t */\n\t\tdeepMerge: function() {\n\t\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\t\ttarget = arguments[0] || {},\n\t\t\t\ti = 1,\n\t\t\t\tlength = arguments.length;\n\n\n\t\t\t// Handle case when target is a string or something (possible in deep copy)\n\t\t\tif (!_.isObject(target) && !_.isFunction(target)) {\n\t\t\t\ttarget = {};\n\t\t\t}\n\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\t// Only deal with non-null/undefined values\n\t\t\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t\t\t// Extend the base object\n\t\t\t\t\tfor ( name in options ) {\n\t\t\t\t\t\tsrc = target[ name ];\n\t\t\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\t\tif ( target === copy ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif ( copy && ( _.isObject(copy) || (copyIsArray = _.isArray(copy)) ) ) {\n\t\t\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && _.isArray(src) ? src : [];\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && _.isObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[ name ] = this.deepMerge(clone, copy );\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the modified object\n\t\t\treturn target;\n\t\t}\n\t};\n});\n/**\n * Helper module to work with ranges\n * @constructor\n * @memberOf __rangeDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('range', function(require, _) {\n\tfunction cmp(a, b, op) {\n\t\tswitch (op) {\n\t\t\tcase 'eq':\n\t\t\tcase '==':\n\t\t\t\treturn a === b;\n\t\t\tcase 'lt':\n\t\t\tcase '<':\n\t\t\t\treturn a < b;\n\t\t\tcase 'lte':\n\t\t\tcase '<=':\n\t\t\t\treturn a <= b;\n\t\t\tcase 'gt':\n\t\t\tcase '>':\n\t\t\t\treturn a > b;\n\t\t\tcase 'gte':\n\t\t\tcase '>=':\n\t\t\t\treturn a >= b;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * @type Range\n\t * @constructor\n\t * @param {Object} start\n\t * @param {Number} len\n\t */\n\tfunction Range(start, len) {\n\t\tif (_.isObject(start) && 'start' in start) {\n\t\t\t// create range from object stub\n\t\t\tthis.start = Math.min(start.start, start.end);\n\t\t\tthis.end = Math.max(start.start, start.end);\n\t\t} else if (_.isArray(start)) {\n\t\t\tthis.start = start[0];\n\t\t\tthis.end = start[1];\n\t\t} else {\n\t\t\tlen = _.isString(len) ? len.length : +len;\n\t\t\tthis.start = start;\n\t\t\tthis.end = start + len;\n\t\t}\n\t}\n\t\n\tRange.prototype = {\n\t\tlength: function() {\n\t\t\treturn Math.abs(this.end - this.start);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns <code>true</code> if passed range is equals to current one\n\t\t * @param {Range} range\n\t\t * @returns {Boolean}\n\t\t */\n\t\tequal: function(range) {\n\t\t\treturn this.cmp(range, 'eq', 'eq');\n//\t\t\treturn this.start === range.start && this.end === range.end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Shifts indexes position with passed <code>delat</code>\n\t\t * @param {Number} delta\n\t\t * @returns {Range} range itself\n\t\t */\n\t\tshift: function(delta) {\n\t\t\tthis.start += delta;\n\t\t\tthis.end += delta;\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if two ranges are overlapped\n\t\t * @param {Range} range\n\t\t * @returns {Boolean}\n\t\t */\n\t\toverlap: function(range) {\n\t\t\treturn range.start <= this.end && range.end >= this.start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Finds intersection of two ranges\n\t\t * @param {Range} range\n\t\t * @returns {Range} <code>null</code> if ranges does not overlap\n\t\t */\n\t\tintersection: function(range) {\n\t\t\tif (this.overlap(range)) {\n\t\t\t\tvar start = Math.max(range.start, this.start);\n\t\t\t\tvar end = Math.min(range.end, this.end);\n\t\t\t\treturn new Range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns the union of the thow ranges.\n\t\t * @param {Range} range\n\t\t * @returns {Range} <code>null</code> if ranges are not overlapped\n\t\t */\n\t\tunion: function(range) {\n\t\t\tif (this.overlap(range)) {\n\t\t\t\tvar start = Math.min(range.start, this.start);\n\t\t\t\tvar end = Math.max(range.end, this.end);\n\t\t\t\treturn new Range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns a Boolean value that indicates whether a specified position \n\t\t * is in a given range.\n\t\t * @param {Number} loc\n\t\t */\n\t\tinside: function(loc) {\n\t\t\treturn this.cmp(loc, 'lte', 'gt');\n//\t\t\treturn this.start <= loc && this.end > loc;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns a Boolean value that indicates whether a specified position \n\t\t * is in a given range, but not equals bounds.\n\t\t * @param {Number} loc\n\t\t */\n\t\tcontains: function(loc) {\n\t\t\treturn this.cmp(loc, 'lt', 'gt');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current range completely includes specified one\n\t\t * @param {Range} r\n\t\t * @returns {Boolean} \n\t\t */\n\t\tinclude: function(r) {\n\t\t\treturn this.cmp(loc, 'lte', 'gte');\n//\t\t\treturn this.start <= r.start && this.end >= r.end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Low-level comparision method\n\t\t * @param {Number} loc\n\t\t * @param {String} left Left comparison operator\n\t\t * @param {String} right Right comaprison operator\n\t\t */\n\t\tcmp: function(loc, left, right) {\n\t\t\tvar a, b;\n\t\t\tif (loc instanceof Range) {\n\t\t\t\ta = loc.start;\n\t\t\t\tb = loc.end;\n\t\t\t} else {\n\t\t\t\ta = b = loc;\n\t\t\t}\n\t\t\t\n\t\t\treturn cmp(this.start, a, left || '<=') && cmp(this.end, b, right || '>');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns substring of specified <code>str</code> for current range\n\t\t * @param {String} str\n\t\t * @returns {String}\n\t\t */\n\t\tsubstring: function(str) {\n\t\t\treturn this.length() > 0 \n\t\t\t\t? str.substring(this.start, this.end) \n\t\t\t\t: '';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates copy of current range\n\t\t * @returns {Range}\n\t\t */\n\t\tclone: function() {\n\t\t\treturn new Range(this.start, this.length());\n\t\t},\n\t\t\n\t\t/**\n\t\t * @returns {Array}\n\t\t */\n\t\ttoArray: function() {\n\t\t\treturn [this.start, this.end];\n\t\t},\n\t\t\n\t\ttoString: function() {\n\t\t\treturn '{' + this.start + ', ' + this.length() + '}';\n\t\t}\n\t};\n\t\n\treturn {\n\t\t/**\n\t\t * Creates new range object instance\n\t\t * @param {Object} start Range start or array with 'start' and 'end'\n\t\t * as two first indexes or object with 'start' and 'end' properties\n\t\t * @param {Number} len Range length or string to produce range from\n\t\t * @returns {Range}\n\t\t * @memberOf emmet.range\n\t\t */\n\t\tcreate: function(start, len) {\n\t\t\tif (_.isUndefined(start) || start === null)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tif (start instanceof Range)\n\t\t\t\treturn start;\n\t\t\t\n\t\t\tif (_.isObject(start) && 'start' in start && 'end' in start) {\n\t\t\t\tlen = start.end - start.start;\n\t\t\t\tstart = start.start;\n\t\t\t}\n\t\t\t\t\n\t\t\treturn new Range(start, len);\n\t\t},\n\t\t\n\t\t/**\n\t\t * <code>Range</code> object factory, the same as <code>this.create()</code>\n\t\t * but last argument represents end of range, not length\n\t\t * @returns {Range}\n\t\t */\n\t\tcreate2: function(start, end) {\n\t\t\tif (_.isNumber(start) && _.isNumber(end)) {\n\t\t\t\tend -= start;\n\t\t\t}\n\t\t\t\n\t\t\treturn this.create(start, end);\n\t\t}\n\t};\n});/**\n * Utility module that provides ordered storage of function handlers. \n * Many Emmet modules' functionality can be extended/overridden by custom\n * function. This modules provides unified storage of handler functions, their \n * management and execution\n * \n * @constructor\n * @memberOf __handlerListDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('handlerList', function(require, _) {\n\t/**\n\t * @type HandlerList\n\t * @constructor\n\t */\n\tfunction HandlerList() {\n\t\tthis._list = [];\n\t}\n\t\n\tHandlerList.prototype = {\n\t\t/**\n\t\t * Adds function handler\n\t\t * @param {Function} fn Handler\n\t\t * @param {Object} options Handler options. Possible values are:<br><br>\n\t\t * <b>order</b> : (<code>Number</code>) – order in handler list. Handlers\n\t\t * with higher order value will be executed earlier.\n\t\t */\n\t\tadd: function(fn, options) {\n\t\t\tthis._list.push(_.extend({order: 0}, options || {}, {fn: fn}));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes handler from list\n\t\t * @param {Function} fn\n\t\t */\n\t\tremove: function(fn) {\n\t\t\tthis._list = _.without(this._list, _.find(this._list, function(item) {\n\t\t\t\treturn item.fn === fn;\n\t\t\t}));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns ordered list of handlers. By default, handlers \n\t\t * with the same <code>order</code> option returned in reverse order, \n\t\t * i.e. the latter function was added into the handlers list, the higher \n\t\t * it will be in the returned array \n\t\t * @returns {Array}\n\t\t */\n\t\tlist: function() {\n\t\t\treturn _.sortBy(this._list, 'order').reverse();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns ordered list of handler functions\n\t\t * @returns {Array}\n\t\t */\n\t\tlistFn: function() {\n\t\t\treturn _.pluck(this.list(), 'fn');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Executes handler functions in their designated order. If function\n\t\t * returns <code>skipVal</code>, meaning that function was unable to \n\t\t * handle passed <code>args</code>, the next function will be executed\n\t\t * and so on.\n\t\t * @param {Object} skipValue If function returns this value, execute \n\t\t * next handler.\n\t\t * @param {Array} args Arguments to pass to handler function\n\t\t * @returns {Boolean} Whether any of registered handlers performed\n\t\t * successfully  \n\t\t */\n\t\texec: function(skipValue, args) {\n\t\t\targs = args || [];\n\t\t\tvar result = null;\n\t\t\t_.find(this.list(), function(h) {\n\t\t\t\tresult = h.fn.apply(h, args);\n\t\t\t\tif (result !== skipValue)\n\t\t\t\t\treturn true;\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t};\n\t\n\treturn {\n\t\t/**\n\t\t * Factory method that produces <code>HandlerList</code> instance\n\t\t * @returns {HandlerList}\n\t\t * @memberOf handlerList\n\t\t */\n\t\tcreate: function() {\n\t\t\treturn new HandlerList();\n\t\t}\n\t};\n});/**\n * Helper class for convenient token iteration\n */\nemmet.define('tokenIterator', function(require, _) {\n\t/**\n\t * @type TokenIterator\n\t * @param {Array} tokens\n\t * @type TokenIterator\n\t * @constructor\n\t */\n\tfunction TokenIterator(tokens) {\n\t\t/** @type Array */\n\t\tthis.tokens = tokens;\n\t\tthis._position = 0;\n\t\tthis.reset();\n\t}\n\t\n\tTokenIterator.prototype = {\n\t\tnext: function() {\n\t\t\tif (this.hasNext()) {\n\t\t\t\tvar token = this.tokens[++this._i];\n\t\t\t\tthis._position = token.start;\n\t\t\t\treturn token;\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\tcurrent: function() {\n\t\t\treturn this.tokens[this._i];\n\t\t},\n\t\t\n\t\tposition: function() {\n\t\t\treturn this._position;\n\t\t},\n\t\t\n\t\thasNext: function() {\n\t\t\treturn this._i < this._il - 1;\n\t\t},\n\t\t\n\t\treset: function() {\n\t\t\tthis._i = -1;\n\t\t\tthis._il = this.tokens.length;\n\t\t},\n\t\t\n\t\titem: function() {\n\t\t\treturn this.tokens[this._i];\n\t\t},\n\t\t\n\t\titemNext: function() {\n\t\t\treturn this.tokens[this._i + 1];\n\t\t},\n\t\t\n\t\titemPrev: function() {\n\t\t\treturn this.tokens[this._i - 1];\n\t\t},\n\t\t\n\t\tnextUntil: function(type, callback) {\n\t\t\tvar token;\n\t\t\tvar test = _.isString(type) \n\t\t\t\t? function(t){return t.type == type;} \n\t\t\t\t: type;\n\t\t\t\n\t\t\twhile (token = this.next()) {\n\t\t\t\tif (callback)\n\t\t\t\t\tcallback.call(this, token);\n\t\t\t\tif (test.call(this, token))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\t\n\treturn {\n\t\tcreate: function(tokens) {\n\t\t\treturn new TokenIterator(tokens);\n\t\t}\n\t};\n});/**\n * A trimmed version of CodeMirror's StringStream module for string parsing\n */\nemmet.define('stringStream', function(require, _) {\n\t/**\n\t * @type StringStream\n\t * @constructor\n\t * @param {String} string\n\t */\n\tfunction StringStream(string) {\n\t\tthis.pos = this.start = 0;\n\t\tthis.string = string;\n\t}\n\t\n\tStringStream.prototype = {\n\t\t/**\n\t\t * Returns true only if the stream is at the end of the line.\n\t\t * @returns {Boolean}\n\t\t */\n\t\teol: function() {\n\t\t\treturn this.pos >= this.string.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns true only if the stream is at the start of the line\n\t\t * @returns {Boolean}\n\t\t */\n\t\tsol: function() {\n\t\t\treturn this.pos == 0;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns the next character in the stream without advancing it. \n\t\t * Will return <code>undefined</code> at the end of the line.\n\t\t * @returns {String}\n\t\t */\n\t\tpeek: function() {\n\t\t\treturn this.string.charAt(this.pos);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns the next character in the stream and advances it.\n\t\t * Also returns <code>undefined</code> when no more characters are available.\n\t\t * @returns {String}\n\t\t */\n\t\tnext: function() {\n\t\t\tif (this.pos < this.string.length)\n\t\t\t\treturn this.string.charAt(this.pos++);\n\t\t},\n\t\t\n\t\t/**\n\t\t * match can be a character, a regular expression, or a function that\n\t\t * takes a character and returns a boolean. If the next character in the\n\t\t * stream 'matches' the given argument, it is consumed and returned.\n\t\t * Otherwise, undefined is returned.\n\t\t * @param {Object} match\n\t\t * @returns {String}\n\t\t */\n\t\teat: function(match) {\n\t\t\tvar ch = this.string.charAt(this.pos), ok;\n\t\t\tif (typeof match == \"string\")\n\t\t\t\tok = ch == match;\n\t\t\telse\n\t\t\t\tok = ch && (match.test ? match.test(ch) : match(ch));\n\t\t\t\n\t\t\tif (ok) {\n\t\t\t\t++this.pos;\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Repeatedly calls <code>eat</code> with the given argument, until it\n\t\t * fails. Returns <code>true</code> if any characters were eaten.\n\t\t * @param {Object} match\n\t\t * @returns {Boolean}\n\t\t */\n\t\teatWhile: function(match) {\n\t\t\tvar start = this.pos;\n\t\t\twhile (this.eat(match)) {}\n\t\t\treturn this.pos > start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Shortcut for <code>eatWhile</code> when matching white-space.\n\t\t * @returns {Boolean}\n\t\t */\n\t\teatSpace: function() {\n\t\t\tvar start = this.pos;\n\t\t\twhile (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n\t\t\t\t++this.pos;\n\t\t\treturn this.pos > start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Moves the position to the end of the line.\n\t\t */\n\t\tskipToEnd: function() {\n\t\t\tthis.pos = this.string.length;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Skips to the next occurrence of the given character, if found on the\n\t\t * current line (doesn't advance the stream if the character does not\n\t\t * occur on the line). Returns true if the character was found.\n\t\t * @param {String} ch\n\t\t * @returns {Boolean}\n\t\t */\n\t\tskipTo: function(ch) {\n\t\t\tvar found = this.string.indexOf(ch, this.pos);\n\t\t\tif (found > -1) {\n\t\t\t\tthis.pos = found;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Skips to <code>close</code> character which is pair to <code>open</code>\n\t\t * character, considering possible pair nesting. This function is used\n\t\t * to consume pair of characters, like opening and closing braces\n\t\t * @param {String} open\n\t\t * @param {String} close\n\t\t * @returns {Boolean} Returns <code>true</code> if pair was successfully\n\t\t * consumed\n\t\t */\n\t\tskipToPair: function(open, close) {\n\t\t\tvar braceCount = 0, ch;\n\t\t\tvar pos = this.pos, len = this.string.length;\n\t\t\twhile (pos < len) {\n\t\t\t\tch = this.string.charAt(pos++);\n\t\t\t\tif (ch == open) {\n\t\t\t\t\tbraceCount++;\n\t\t\t\t} else if (ch == close) {\n\t\t\t\t\tbraceCount--;\n\t\t\t\t\tif (braceCount < 1) {\n\t\t\t\t\t\tthis.pos = pos;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Backs up the stream n characters. Backing it up further than the\n\t\t * start of the current token will cause things to break, so be careful.\n\t\t * @param {Number} n\n\t\t */\n\t\tbackUp : function(n) {\n\t\t\tthis.pos -= n;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Act like a multi-character <code>eat</code>—if <code>consume</code> is true or\n\t\t * not given—or a look-ahead that doesn't update the stream position—if\n\t\t * it is false. <code>pattern</code> can be either a string or a\n\t\t * regular expression starting with ^. When it is a string,\n\t\t * <code>caseInsensitive</code> can be set to true to make the match\n\t\t * case-insensitive. When successfully matching a regular expression,\n\t\t * the returned value will be the array returned by <code>match</code>,\n\t\t * in case you need to extract matched groups.\n\t\t * \n\t\t * @param {RegExp} pattern\n\t\t * @param {Boolean} consume\n\t\t * @param {Boolean} caseInsensitive\n\t\t * @returns\n\t\t */\n\t\tmatch: function(pattern, consume, caseInsensitive) {\n\t\t\tif (typeof pattern == \"string\") {\n\t\t\t\tvar cased = caseInsensitive\n\t\t\t\t\t? function(str) {return str.toLowerCase();}\n\t\t\t\t\t: function(str) {return str;};\n\t\t\t\t\n\t\t\t\tif (cased(this.string).indexOf(cased(pattern), this.pos) == this.pos) {\n\t\t\t\t\tif (consume !== false)\n\t\t\t\t\t\tthis.pos += pattern.length;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar match = this.string.slice(this.pos).match(pattern);\n\t\t\t\tif (match && consume !== false)\n\t\t\t\t\tthis.pos += match[0].length;\n\t\t\t\treturn match;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Get the string between the start of the current token and the \n\t\t * current stream position.\n\t\t * @returns {String}\n\t\t */\n\t\tcurrent: function() {\n\t\t\treturn this.string.slice(this.start, this.pos);\n\t\t}\n\t};\n\t\n\treturn {\n\t\tcreate: function(string) {\n\t\t\treturn new StringStream(string);\n\t\t}\n\t};\n});/**\n * Parsed resources (snippets, abbreviations, variables, etc.) for Emmet.\n * Contains convenient method to get access for snippets with respect of \n * inheritance. Also provides ability to store data in different vocabularies\n * ('system' and 'user') for fast and safe resource update\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * \n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('resources', function(require, _) {\n\tvar VOC_SYSTEM = 'system';\n\tvar VOC_USER = 'user';\n\t\n\tvar cache = {};\n\t\t\n\t/** Regular expression for XML tag matching */\n\tvar reTag = /^<(\\w+\\:?[\\w\\-]*)((?:\\s+[\\w\\:\\-]+\\s*=\\s*(['\"]).*?\\3)*)\\s*(\\/?)>/;\n\t\t\n\tvar systemSettings = {};\n\tvar userSettings = {};\n\t\n\t/** @type HandlerList List of registered abbreviation resolvers */\n\tvar resolvers = require('handlerList').create();\n\t\n\t/**\n\t * Normalizes caret plceholder in passed text: replaces | character with\n\t * default caret placeholder\n\t * @param {String} text\n\t * @returns {String}\n\t */\n\tfunction normalizeCaretPlaceholder(text) {\n\t\tvar utils = require('utils');\n\t\treturn utils.replaceUnescapedSymbol(text, '|', utils.getCaretPlaceholder());\n\t}\n\t\n\tfunction parseItem(name, value, type) {\n\t\tvalue = normalizeCaretPlaceholder(value);\n\t\t\n\t\tif (type == 'snippets') {\n\t\t\treturn require('elements').create('snippet', value);\n\t\t}\n\t\t\n\t\tif (type == 'abbreviations') {\n\t\t\treturn parseAbbreviation(name, value);\n\t\t}\n\t}\n\t\n\t/**\n\t * Parses single abbreviation\n\t * @param {String} key Abbreviation name\n\t * @param {String} value Abbreviation value\n\t * @return {Object}\n\t */\n\tfunction parseAbbreviation(key, value) {\n\t\tkey = require('utils').trim(key);\n\t\tvar elements = require('elements');\n\t\tvar m;\n\t\tif (m = reTag.exec(value)) {\n\t\t\treturn elements.create('element', m[1], m[2], m[4] == '/');\n\t\t} else {\n\t\t\t// assume it's reference to another abbreviation\n\t\t\treturn elements.create('reference', value);\n\t\t}\n\t}\n\t\n\t/**\n\t * Normalizes snippet key name for better fuzzy search\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tfunction normalizeName(str) {\n\t\treturn str.replace(/:$/, '').replace(/:/g, '-');\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Sets new unparsed data for specified settings vocabulary\n\t\t * @param {Object} data\n\t\t * @param {String} type Vocabulary type ('system' or 'user')\n\t\t * @memberOf resources\n\t\t */\n\t\tsetVocabulary: function(data, type) {\n\t\t\tcache = {};\n\t\t\tif (type == VOC_SYSTEM)\n\t\t\t\tsystemSettings = data;\n\t\t\telse\n\t\t\t\tuserSettings = data;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns resource vocabulary by its name\n\t\t * @param {String} name Vocabulary name ('system' or 'user')\n\t\t * @return {Object}\n\t\t */\n\t\tgetVocabulary: function(name) {\n\t\t\treturn name == VOC_SYSTEM ? systemSettings : userSettings;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns resource (abbreviation, snippet, etc.) matched for passed \n\t\t * abbreviation\n\t\t * @param {AbbreviationNode} node\n\t\t * @param {String} syntax\n\t\t * @returns {Object}\n\t\t */\n\t\tgetMatchedResource: function(node, syntax) {\n\t\t\treturn resolvers.exec(null, _.toArray(arguments)) \n\t\t\t\t|| this.findSnippet(syntax, node.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns variable value\n\t\t * @return {String}\n\t\t */\n\t\tgetVariable: function(name) {\n\t\t\treturn (this.getSection('variables') || {})[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Store runtime variable in user storage\n\t\t * @param {String} name Variable name\n\t\t * @param {String} value Variable value\n\t\t */\n\t\tsetVariable: function(name, value){\n\t\t\tvar voc = this.getVocabulary('user') || {};\n\t\t\tif (!('variables' in voc))\n\t\t\t\tvoc.variables = {};\n\t\t\t\t\n\t\t\tvoc.variables[name] = value;\n\t\t\tthis.setVocabulary(voc, 'user');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if there are resources for specified syntax\n\t\t * @param {String} syntax\n\t\t * @return {Boolean}\n\t\t */\n\t\thasSyntax: function(syntax) {\n\t\t\treturn syntax in this.getVocabulary(VOC_USER) \n\t\t\t\t|| syntax in this.getVocabulary(VOC_SYSTEM);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Registers new abbreviation resolver.\n\t\t * @param {Function} fn Abbreviation resolver which will receive \n\t\t * abbreviation as first argument and should return parsed abbreviation\n\t\t * object if abbreviation has handled successfully, <code>null</code>\n\t\t * otherwise\n\t\t * @param {Object} options Options list as described in \n\t\t * {@link HandlerList#add()} method\n\t\t */\n\t\taddResolver: function(fn, options) {\n\t\t\tresolvers.add(fn, options);\n\t\t},\n\t\t\n\t\tremoveResolver: function(fn) {\n\t\t\tresolvers.remove(fn);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns actual section data, merged from both\n\t\t * system and user data\n\t\t * @param {String} name Section name (syntax)\n\t\t * @param {String} ...args Subsections\n\t\t * @returns\n\t\t */\n\t\tgetSection: function(name) {\n\t\t\tif (!name)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tif (!(name in cache)) {\n\t\t\t\tcache[name] = require('utils').deepMerge({}, systemSettings[name], userSettings[name]);\n\t\t\t}\n\t\t\t\n\t\t\tvar data = cache[name], subsections = _.rest(arguments), key;\n\t\t\twhile (data && (key = subsections.shift())) {\n\t\t\t\tif (key in data) {\n\t\t\t\t\tdata = data[key];\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn data;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Recursively searches for a item inside top level sections (syntaxes)\n\t\t * with respect of `extends` attribute\n\t\t * @param {String} topSection Top section name (syntax)\n\t\t * @param {String} subsection Inner section name\n\t\t * @returns {Object}\n\t\t */\n\t\tfindItem: function(topSection, subsection) {\n\t\t\tvar data = this.getSection(topSection);\n\t\t\twhile (data) {\n\t\t\t\tif (subsection in data)\n\t\t\t\t\treturn data[subsection];\n\t\t\t\t\n\t\t\t\tdata = this.getSection(data['extends']);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Recursively searches for a snippet definition inside syntax section.\n\t\t * Definition is searched inside `snippets` and `abbreviations` \n\t\t * subsections  \n\t\t * @param {String} syntax Top-level section name (syntax)\n\t\t * @param {String} name Snippet name\n\t\t * @returns {Object}\n\t\t */\n\t\tfindSnippet: function(syntax, name, memo) {\n\t\t\tif (!syntax || !name)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tmemo = memo || [];\n\t\t\t\n\t\t\tvar names = [name];\n\t\t\t// create automatic aliases to properties with colons,\n\t\t\t// e.g. pos-a == pos:a\n\t\t\tif (~name.indexOf('-'))\n\t\t\t\tnames.push(name.replace(/\\-/g, ':'));\n\t\t\t\n\t\t\tvar data = this.getSection(syntax), matchedItem = null;\n\t\t\t_.find(['snippets', 'abbreviations'], function(sectionName) {\n\t\t\t\tvar data = this.getSection(syntax, sectionName);\n\t\t\t\tif (data) {\n\t\t\t\t\treturn _.find(names, function(n) {\n\t\t\t\t\t\tif (data[n])\n\t\t\t\t\t\t\treturn matchedItem = parseItem(n, data[n], sectionName);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\t\t\tmemo.push(syntax);\n\t\t\tif (!matchedItem && data['extends'] && !_.include(memo, data['extends'])) {\n\t\t\t\t// try to find item in parent syntax section\n\t\t\t\treturn this.findSnippet(data['extends'], name, memo);\n\t\t\t}\n\t\t\t\n\t\t\treturn matchedItem;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Performs fuzzy search of snippet definition\n\t\t * @param {String} syntax Top-level section name (syntax)\n\t\t * @param {String} name Snippet name\n\t\t * @returns\n\t\t */\n\t\tfuzzyFindSnippet: function(syntax, name, minScore) {\n\t\t\tminScore = minScore || 0.3;\n\t\t\t\n\t\t\tvar payload = this.getAllSnippets(syntax);\n\t\t\tvar sc = require('string-score');\n\t\t\t\n\t\t\tname = normalizeName(name);\n\t\t\tvar scores = _.map(payload, function(value, key) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: key,\n\t\t\t\t\tscore: sc.score(value.nk, name, 0.1)\n\t\t\t\t};\n\t\t\t});\n\t\t\t\n\t\t\tvar result = _.last(_.sortBy(scores, 'score'));\n\t\t\tif (result && result.score >= minScore) {\n\t\t\t\tvar k = result.key;\n\t\t\t\treturn payload[k].parsedValue;\n//\t\t\t\treturn parseItem(k, payload[k].value, payload[k].type);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns plain dictionary of all available abbreviations and snippets\n\t\t * for specified syntax with respect of inheritance\n\t\t * @param {String} syntax\n\t\t * @returns {Object}\n\t\t */\n\t\tgetAllSnippets: function(syntax) {\n\t\t\tvar cacheKey = 'all-' + syntax;\n\t\t\tif (!cache[cacheKey]) {\n\t\t\t\tvar stack = [], sectionKey = syntax;\n\t\t\t\tvar memo = [];\n\t\t\t\t\n\t\t\t\tdo {\n\t\t\t\t\tvar section = this.getSection(sectionKey);\n\t\t\t\t\tif (!section)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\t_.each(['snippets', 'abbreviations'], function(sectionName) {\n\t\t\t\t\t\tvar stackItem = {};\n\t\t\t\t\t\t_.each(section[sectionName] || null, function(v, k) {\n\t\t\t\t\t\t\tstackItem[k] = {\n\t\t\t\t\t\t\t\tnk: normalizeName(k),\n\t\t\t\t\t\t\t\tvalue: v,\n\t\t\t\t\t\t\t\tparsedValue: parseItem(k, v, sectionName),\n\t\t\t\t\t\t\t\ttype: sectionName\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tstack.push(stackItem);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmemo.push(sectionKey);\n\t\t\t\t\tsectionKey = section['extends'];\n\t\t\t\t} while (sectionKey && !_.include(memo, sectionKey));\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tcache[cacheKey] = _.extend.apply(_, stack.reverse());\n\t\t\t}\n\t\t\t\n\t\t\treturn cache[cacheKey];\n\t\t}\n\t};\n});/**\n * Module describes and performs Emmet actions. The actions themselves are\n * defined in <i>actions</i> folder\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('actions', function(require, _, zc) {\n\tvar actions = {};\n\t\n\t/**\n\t * “Humanizes” action name, makes it more readable for people\n\t * @param {String} name Action name (like 'expand_abbreviation')\n\t * @return Humanized name (like 'Expand Abbreviation')\n\t */\n\tfunction humanizeActionName(name) {\n\t\treturn require('utils').trim(name.charAt(0).toUpperCase() \n\t\t\t+ name.substring(1).replace(/_[a-z]/g, function(str) {\n\t\t\t\treturn ' ' + str.charAt(1).toUpperCase();\n\t\t\t}));\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Registers new action\n\t\t * @param {String} name Action name\n\t\t * @param {Function} fn Action function\n\t\t * @param {Object} options Custom action options:<br>\n\t\t * <b>label</b> : (<code>String</code>) – Human-readable action name. \n\t\t * May contain '/' symbols as submenu separators<br>\n\t\t * <b>hidden</b> : (<code>Boolean</code>) – Indicates whether action\n\t\t * should be displayed in menu (<code>getMenu()</code> method)\n\t\t * \n\t\t * @memberOf actions\n\t\t */\n\t\tadd: function(name, fn, options) {\n\t\t\tname = name.toLowerCase();\n\t\t\toptions = options || {};\n\t\t\tif (!options.label) {\n\t\t\t\toptions.label = humanizeActionName(name);\n\t\t\t}\n\t\t\t\n\t\t\tactions[name] = {\n\t\t\t\tname: name,\n\t\t\t\tfn: fn,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns action object\n\t\t * @param {String} name Action name\n\t\t * @returns {Object}\n\t\t */\n\t\tget: function(name) {\n\t\t\treturn actions[name.toLowerCase()];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Runs Emmet action. For list of available actions and their\n\t\t * arguments see <i>actions</i> folder.\n\t\t * @param {String} name Action name \n\t\t * @param {Array} args Additional arguments. It may be array of arguments\n\t\t * or inline arguments. The first argument should be <code>IEmmetEditor</code> instance\n\t\t * @returns {Boolean} Status of performed operation, <code>true</code>\n\t\t * means action was performed successfully.\n\t\t * @example\n\t\t * emmet.require('actions').run('expand_abbreviation', editor);  \n\t\t * emmet.require('actions').run('wrap_with_abbreviation', [editor, 'div']);  \n\t\t */\n\t\trun: function(name, args) {\n\t\t\tif (!_.isArray(args)) {\n\t\t\t\targs = _.rest(arguments);\n\t\t\t}\n\t\t\t\n\t\t\tvar action = this.get(name);\n\t\t\tif (action) {\n\t\t\t\treturn action.fn.apply(emmet, args);\n\t\t\t} else {\n\t\t\t\temmet.log('Action \"%s\" is not defined', name);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all registered actions as object\n\t\t * @returns {Object}\n\t\t */\n\t\tgetAll: function() {\n\t\t\treturn actions;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all registered actions as array\n\t\t * @returns {Array}\n\t\t */\n\t\tgetList: function() {\n\t\t\treturn _.values(this.getAll());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns actions list as structured menu. If action has <i>label</i>,\n\t\t * it will be splitted by '/' symbol into submenus (for example: \n\t\t * CSS/Reflect Value) and grouped with other items\n\t\t * @param {Array} skipActions List of action identifiers that should be \n\t\t * skipped from menu\n\t\t * @returns {Array}\n\t\t */\n\t\tgetMenu: function(skipActions) {\n\t\t\tvar result = [];\n\t\t\tskipActions = skipActions || [];\n\t\t\t_.each(this.getList(), function(action) {\n\t\t\t\tif (action.options.hidden || _.include(skipActions, action.name))\n\t\t\t\t\treturn;\n\t\t\t\t\n\t\t\t\tvar actionName = humanizeActionName(action.name);\n\t\t\t\tvar ctx = result;\n\t\t\t\tif (action.options.label) {\n\t\t\t\t\tvar parts = action.options.label.split('/');\n\t\t\t\t\tactionName = parts.pop();\n\t\t\t\t\t\n\t\t\t\t\t// create submenus, if needed\n\t\t\t\t\tvar menuName, submenu;\n\t\t\t\t\twhile (menuName = parts.shift()) {\n\t\t\t\t\t\tsubmenu = _.find(ctx, function(item) {\n\t\t\t\t\t\t\treturn item.type == 'submenu' && item.name == menuName;\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!submenu) {\n\t\t\t\t\t\t\tsubmenu = {\n\t\t\t\t\t\t\t\tname: menuName,\n\t\t\t\t\t\t\t\ttype: 'submenu',\n\t\t\t\t\t\t\t\titems: []\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tctx.push(submenu);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tctx = submenu.items;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tctx.push({\n\t\t\t\t\ttype: 'action',\n\t\t\t\t\tname: action.name,\n\t\t\t\t\tlabel: actionName\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\n\t\t/**\n\t\t * Returns action name associated with menu item title\n\t\t * @param {String} title\n\t\t * @returns {String}\n\t\t */\n\t\tgetActionNameForMenuTitle: function(title, menu) {\n\t\t\tvar item = null;\n\t\t\t_.find(menu || this.getMenu(), function(val) {\n\t\t\t\tif (val.type == 'action') {\n\t\t\t\t\tif (val.label == title || val.name == title) {\n\t\t\t\t\t\treturn item = val.name;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn item = this.getActionNameForMenuTitle(title, val.items);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\t\t\treturn item || null;\n\t\t}\n\t};\n});/**\n * Output profile module.\n * Profile defines how XHTML output data should look like\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('profile', function(require, _) {\n\tvar profiles = {};\n\t\n\tvar defaultProfile = {\n\t\ttag_case: 'asis',\n\t\tattr_case: 'asis',\n\t\tattr_quotes: 'double',\n\t\t\n\t\t// each tag on new line\n\t\ttag_nl: 'decide',\n\t\t\n\t\t// with tag_nl === true, defines if leaf node (e.g. node with no children)\n\t\t// should have formatted line breaks\n\t\ttag_nl_leaf: false,\n\t\t\n\t\tplace_cursor: true,\n\t\t\n\t\t// indent tags\n\t\tindent: true,\n\t\t\n\t\t// how many inline elements should be to force line break \n\t\t// (set to 0 to disable)\n\t\tinline_break: 3,\n\t\t\n\t\t// use self-closing style for writing empty elements, e.g. <br /> or <br>\n\t\tself_closing_tag: 'xhtml',\n\t\t\n\t\t// Profile-level output filters, re-defines syntax filters \n\t\tfilters: '',\n\t\t\n\t\t// Additional filters applied to abbreviation.\n\t\t// Unlike \"filters\", this preference doesn't override default filters\n\t\t// but add the instead every time given profile is chosen\n\t\textraFilters: ''\n\t};\n\t\n\t/**\n\t * @constructor\n\t * @type OutputProfile\n\t * @param {Object} options\n\t */\n\tfunction OutputProfile(options) {\n\t\t_.extend(this, defaultProfile, options);\n\t}\n\t\n\tOutputProfile.prototype = {\n\t\t/**\n\t\t * Transforms tag name case depending on current profile settings\n\t\t * @param {String} name String to transform\n\t\t * @returns {String}\n\t\t */\n\t\ttagName: function(name) {\n\t\t\treturn stringCase(name, this.tag_case);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Transforms attribute name case depending on current profile settings \n\t\t * @param {String} name String to transform\n\t\t * @returns {String}\n\t\t */\n\t\tattributeName: function(name) {\n\t\t\treturn stringCase(name, this.attr_case);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns quote character for current profile\n\t\t * @returns {String}\n\t\t */\n\t\tattributeQuote: function() {\n\t\t\treturn this.attr_quotes == 'single' ? \"'\" : '\"';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns self-closing tag symbol for current profile\n\t\t * @param {String} param\n\t\t * @returns {String}\n\t\t */\n\t\tselfClosing: function(param) {\n\t\t\tif (this.self_closing_tag == 'xhtml')\n\t\t\t\treturn ' /';\n\t\t\t\n\t\t\tif (this.self_closing_tag === true)\n\t\t\t\treturn '/';\n\t\t\t\n\t\t\treturn '';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns cursor token based on current profile settings\n\t\t * @returns {String}\n\t\t */\n\t\tcursor: function() {\n\t\t\treturn this.place_cursor ? require('utils').getCaretPlaceholder() : '';\n\t\t}\n\t};\n\t\n\t/**\n\t * Helper function that converts string case depending on \n\t * <code>caseValue</code> \n\t * @param {String} str String to transform\n\t * @param {String} caseValue Case value: can be <i>lower</i>, \n\t * <i>upper</i> and <i>leave</i>\n\t * @returns {String}\n\t */\n\tfunction stringCase(str, caseValue) {\n\t\tswitch (String(caseValue || '').toLowerCase()) {\n\t\t\tcase 'lower':\n\t\t\t\treturn str.toLowerCase();\n\t\t\tcase 'upper':\n\t\t\t\treturn str.toUpperCase();\n\t\t}\n\t\t\n\t\treturn str;\n\t}\n\t\n\t/**\n\t * Creates new output profile\n\t * @param {String} name Profile name\n\t * @param {Object} options Profile options\n\t */\n\tfunction createProfile(name, options) {\n\t\treturn profiles[name.toLowerCase()] = new OutputProfile(options);\n\t}\n\t\n\tfunction createDefaultProfiles() {\n\t\tcreateProfile('xhtml');\n\t\tcreateProfile('html', {self_closing_tag: false});\n\t\tcreateProfile('xml', {self_closing_tag: true, tag_nl: true});\n\t\tcreateProfile('plain', {tag_nl: false, indent: false, place_cursor: false});\n\t\tcreateProfile('line', {tag_nl: false, indent: false, extraFilters: 's'});\n\t}\n\t\n\tcreateDefaultProfiles();\n\t\n\treturn  {\n\t\t/**\n\t\t * Creates new output profile and adds it into internal dictionary\n\t\t * @param {String} name Profile name\n\t\t * @param {Object} options Profile options\n\t\t * @memberOf emmet.profile\n\t\t * @returns {Object} New profile\n\t\t */\n\t\tcreate: function(name, options) {\n\t\t\tif (arguments.length == 2)\n\t\t\t\treturn createProfile(name, options);\n\t\t\telse\n\t\t\t\t// create profile object only\n\t\t\t\treturn new OutputProfile(_.defaults(name || {}, defaultProfile));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns profile by its name. If profile wasn't found, returns\n\t\t * 'plain' profile\n\t\t * @param {String} name Profile name. Might be profile itself\n\t\t * @param {String} syntax. Optional. Current editor syntax. If defined,\n\t\t * profile is searched in resources first, then in predefined profiles\n\t\t * @returns {Object}\n\t\t */\n\t\tget: function(name, syntax) {\n\t\t\tif (!name && syntax) {\n\t\t\t\t// search in user resources first\n\t\t\t\tvar profile = require('resources').findItem(syntax, 'profile');\n\t\t\t\tif (profile) {\n\t\t\t\t\tname = profile;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!name) {\n\t\t\t\treturn profiles.plain;\n\t\t\t}\n\t\t\t\n\t\t\tif (name instanceof OutputProfile) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t\t\n\t\t\tif (_.isString(name) && name.toLowerCase() in profiles) {\n\t\t\t\treturn profiles[name.toLowerCase()];\n\t\t\t}\n\t\t\t\n\t\t\treturn this.create(name);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Deletes profile with specified name\n\t\t * @param {String} name Profile name\n\t\t */\n\t\tremove: function(name) {\n\t\t\tname = (name || '').toLowerCase();\n\t\t\tif (name in profiles)\n\t\t\t\tdelete profiles[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Resets all user-defined profiles\n\t\t */\n\t\treset: function() {\n\t\t\tprofiles = {};\n\t\t\tcreateDefaultProfiles();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper function that converts string case depending on \n\t\t * <code>caseValue</code> \n\t\t * @param {String} str String to transform\n\t\t * @param {String} caseValue Case value: can be <i>lower</i>, \n\t\t * <i>upper</i> and <i>leave</i>\n\t\t * @returns {String}\n\t\t */\n\t\tstringCase: stringCase\n\t};\n});/**\n * Utility module used to prepare text for pasting into back-end editor\n * @param {Function} require\n * @param {Underscore} _\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\n */\nemmet.define('editorUtils', function(require, _) {\n\treturn  {\n\t\t/**\n\t\t * Check if cursor is placed inside XHTML tag\n\t\t * @param {String} html Contents of the document\n\t\t * @param {Number} caretPos Current caret position inside tag\n\t\t * @return {Boolean}\n\t\t */\n\t\tisInsideTag: function(html, caretPos) {\n\t\t\tvar reTag = /^<\\/?\\w[\\w\\:\\-]*.*?>/;\n\t\t\t\n\t\t\t// search left to find opening brace\n\t\t\tvar pos = caretPos;\n\t\t\twhile (pos > -1) {\n\t\t\t\tif (html.charAt(pos) == '<') \n\t\t\t\t\tbreak;\n\t\t\t\tpos--;\n\t\t\t}\n\t\t\t\n\t\t\tif (pos != -1) {\n\t\t\t\tvar m = reTag.exec(html.substring(pos));\n\t\t\t\tif (m && caretPos > pos && caretPos < pos + m[0].length)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sanitizes incoming editor data and provides default values for\n\t\t * output-specific info\n\t\t * @param {IEmmetEditor} editor\n\t\t * @param {String} syntax\n\t\t * @param {String} profile\n\t\t */\n\t\toutputInfo: function(editor, syntax, profile) {\n\t\t\t// most of this code makes sense for Java/Rhino environment\n\t\t\t// because string that comes from Java are not actually JS string\n\t\t\t// but Java String object so the have to be explicitly converted\n\t\t\t// to native string\n\t\t\tprofile = profile || editor.getProfileName();\n\t\t\treturn  {\n\t\t\t\t/** @memberOf outputInfo */\n\t\t\t\tsyntax: String(syntax || editor.getSyntax()),\n\t\t\t\tprofile: profile || null,\n\t\t\t\tcontent: String(editor.getContent())\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Unindent content, thus preparing text for tag wrapping\n\t\t * @param {IEmmetEditor} editor Editor instance\n\t\t * @param {String} text\n\t\t * @return {String}\n\t\t */\n\t\tunindent: function(editor, text) {\n\t\t\treturn require('utils').unindentString(text, this.getCurrentLinePadding(editor));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns padding of current editor's line\n\t\t * @param {IEmmetEditor} Editor instance\n\t\t * @return {String}\n\t\t */\n\t\tgetCurrentLinePadding: function(editor) {\n\t\t\treturn require('utils').getLinePadding(editor.getCurrentLine());\n\t\t}\n\t};\n});\n/**\n * Utility methods for Emmet actions\n * @param {Function} require\n * @param {Underscore} _\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\n */\nemmet.define('actionUtils', function(require, _) {\n\treturn {\n\t\tmimeTypes: {\n\t\t\t'gif' : 'image/gif',\n\t\t\t'png' : 'image/png',\n\t\t\t'jpg' : 'image/jpeg',\n\t\t\t'jpeg': 'image/jpeg',\n\t\t\t'svg' : 'image/svg+xml',\n\t\t\t'html': 'text/html',\n\t\t\t'htm' : 'text/html'\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts abbreviations from text stream, starting from the end\n\t\t * @param {String} str\n\t\t * @return {String} Abbreviation or empty string\n\t\t * @memberOf emmet.actionUtils\n\t\t */\n\t\textractAbbreviation: function(str) {\n\t\t\tvar curOffset = str.length;\n\t\t\tvar startIndex = -1;\n\t\t\tvar groupCount = 0;\n\t\t\tvar braceCount = 0;\n\t\t\tvar textCount = 0;\n\t\t\t\n\t\t\tvar utils = require('utils');\n\t\t\tvar parser = require('abbreviationParser');\n\t\t\t\n\t\t\twhile (true) {\n\t\t\t\tcurOffset--;\n\t\t\t\tif (curOffset < 0) {\n\t\t\t\t\t// moved to the beginning of the line\n\t\t\t\t\tstartIndex = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar ch = str.charAt(curOffset);\n\t\t\t\t\n\t\t\t\tif (ch == ']') {\n\t\t\t\t\tbraceCount++;\n\t\t\t\t} else if (ch == '[') {\n\t\t\t\t\tif (!braceCount) { // unexpected brace\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbraceCount--;\n\t\t\t\t} else if (ch == '}') {\n\t\t\t\t\ttextCount++;\n\t\t\t\t} else if (ch == '{') {\n\t\t\t\t\tif (!textCount) { // unexpected brace\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ttextCount--;\n\t\t\t\t} else if (ch == ')') {\n\t\t\t\t\tgroupCount++;\n\t\t\t\t} else if (ch == '(') {\n\t\t\t\t\tif (!groupCount) { // unexpected brace\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tgroupCount--;\n\t\t\t\t} else {\n\t\t\t\t\tif (braceCount || textCount) \n\t\t\t\t\t\t// respect all characters inside attribute sets or text nodes\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\telse if (!parser.isAllowedChar(ch) || (ch == '>' && utils.endsWithTag(str.substring(0, curOffset + 1)))) {\n\t\t\t\t\t\t// found stop symbol\n\t\t\t\t\t\tstartIndex = curOffset + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (startIndex != -1 && !textCount && !braceCount && !groupCount) \n\t\t\t\t// found something, remove some invalid symbols from the \n\t\t\t\t// beginning and return abbreviation\n\t\t\t\treturn str.substring(startIndex).replace(/^[\\*\\+\\>\\^]+/, '');\n\t\t\telse\n\t\t\t\treturn '';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Gets image size from image byte stream.\n\t\t * @author http://romeda.org/rePublish/\n\t\t * @param {String} stream Image byte stream (use <code>IEmmetFile.read()</code>)\n\t\t * @return {Object} Object with <code>width</code> and <code>height</code> properties\n\t\t */\n\t\tgetImageSize: function(stream) {\n\t\t\tvar pngMagicNum = \"\\211PNG\\r\\n\\032\\n\",\n\t\t\t\tjpgMagicNum = \"\\377\\330\",\n\t\t\t\tgifMagicNum = \"GIF8\",\n\t\t\t\tnextByte = function() {\n\t\t\t\t\treturn stream.charCodeAt(pos++);\n\t\t\t\t};\n\t\t\n\t\t\tif (stream.substr(0, 8) === pngMagicNum) {\n\t\t\t\t// PNG. Easy peasy.\n\t\t\t\tvar pos = stream.indexOf('IHDR') + 4;\n\t\t\t\n\t\t\t\treturn { width:  (nextByte() << 24) | (nextByte() << 16) |\n\t\t\t\t\t\t\t\t (nextByte() <<  8) | nextByte(),\n\t\t\t\t\t\t height: (nextByte() << 24) | (nextByte() << 16) |\n\t\t\t\t\t\t\t\t (nextByte() <<  8) | nextByte() };\n\t\t\t\n\t\t\t} else if (stream.substr(0, 4) === gifMagicNum) {\n\t\t\t\tpos = 6;\n\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\twidth:  nextByte() | (nextByte() << 8),\n\t\t\t\t\theight: nextByte() | (nextByte() << 8)\n\t\t\t\t};\n\t\t\t\n\t\t\t} else if (stream.substr(0, 2) === jpgMagicNum) {\n\t\t\t\tpos = 2;\n\t\t\t\n\t\t\t\tvar l = stream.length;\n\t\t\t\twhile (pos < l) {\n\t\t\t\t\tif (nextByte() != 0xFF) return;\n\t\t\t\t\n\t\t\t\t\tvar marker = nextByte();\n\t\t\t\t\tif (marker == 0xDA) break;\n\t\t\t\t\n\t\t\t\t\tvar size = (nextByte() << 8) | nextByte();\n\t\t\t\t\n\t\t\t\t\tif (marker >= 0xC0 && marker <= 0xCF && !(marker & 0x4) && !(marker & 0x8)) {\n\t\t\t\t\t\tpos += 1;\n\t\t\t\t\t\treturn { height:  (nextByte() << 8) | nextByte(),\n\t\t\t\t\t\t\t\t width: (nextByte() << 8) | nextByte() };\n\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpos += size - 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Captures context XHTML element from editor under current caret position.\n\t\t * This node can be used as a helper for abbreviation extraction\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {Object}\n\t\t */\n\t\tcaptureContext: function(editor) {\n\t\t\tvar allowedSyntaxes = {'html': 1, 'xml': 1, 'xsl': 1};\n\t\t\tvar syntax = String(editor.getSyntax());\n\t\t\tif (syntax in allowedSyntaxes) {\n\t\t\t\tvar content = String(editor.getContent());\n\t\t\t\tvar tag = require('htmlMatcher').find(content, editor.getCaretPos());\n\t\t\t\t\n\t\t\t\tif (tag && tag.type == 'tag') {\n\t\t\t\t\tvar startTag = tag.open;\n\t\t\t\t\tvar contextNode = {\n\t\t\t\t\t\tname: startTag.name,\n\t\t\t\t\t\tattributes: []\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// parse attributes\n\t\t\t\t\tvar tagTree = require('xmlEditTree').parse(startTag.range.substring(content));\n\t\t\t\t\tif (tagTree) {\n\t\t\t\t\t\tcontextNode.attributes = _.map(tagTree.getAll(), function(item) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tname: item.name(),\n\t\t\t\t\t\t\t\tvalue: item.value()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn contextNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Find expression bounds in current editor at caret position. \n\t\t * On each character a <code>fn</code> function will be called and must \n\t\t * return <code>true</code> if current character meets requirements, \n\t\t * <code>false</code> otherwise\n\t\t * @param {IEmmetEditor} editor\n\t\t * @param {Function} fn Function to test each character of expression\n\t\t * @return {Range}\n\t\t */\n\t\tfindExpressionBounds: function(editor, fn) {\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar il = content.length;\n\t\t\tvar exprStart = editor.getCaretPos() - 1;\n\t\t\tvar exprEnd = exprStart + 1;\n\t\t\t\t\n\t\t\t// start by searching left\n\t\t\twhile (exprStart >= 0 && fn(content.charAt(exprStart), exprStart, content)) exprStart--;\n\t\t\t\n\t\t\t// then search right\n\t\t\twhile (exprEnd < il && fn(content.charAt(exprEnd), exprEnd, content)) exprEnd++;\n\t\t\t\n\t\t\tif (exprEnd > exprStart) {\n\t\t\t\treturn require('range').create([++exprStart, exprEnd]);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * @param {IEmmetEditor} editor\n\t\t * @param {Object} data\n\t\t * @returns {Boolean}\n\t\t */\n\t\tcompoundUpdate: function(editor, data) {\n\t\t\tif (data) {\n\t\t\t\tvar sel = editor.getSelectionRange();\n\t\t\t\teditor.replaceContent(data.data, data.start, data.end, true);\n\t\t\t\teditor.createSelection(data.caret, data.caret + sel.end - sel.start);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Common syntax detection method for editors that doesn’t provide any\n\t\t * info about current syntax scope. \n\t\t * @param {IEmmetEditor} editor Current editor\n\t\t * @param {String} hint Any syntax hint that editor can provide \n\t\t * for syntax detection. Default is 'html'\n\t\t * @returns {String} \n\t\t */\n\t\tdetectSyntax: function(editor, hint) {\n\t\t\tvar syntax = hint || 'html';\n\t\t\t\n\t\t\tif (!require('resources').hasSyntax(syntax)) {\n\t\t\t\tsyntax = 'html';\n\t\t\t}\n\t\t\t\n\t\t\tif (syntax == 'html' && (this.isStyle(editor) || this.isInlineCSS(editor))) {\n\t\t\t\tsyntax = 'css';\n\t\t\t}\n\t\t\t\n\t\t\treturn syntax;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Common method for detecting output profile\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {String}\n\t\t */\n\t\tdetectProfile: function(editor) {\n\t\t\tvar syntax = editor.getSyntax();\n\t\t\t\n\t\t\t// get profile from syntax definition\n\t\t\tvar profile = require('resources').findItem(syntax, 'profile');\n\t\t\tif (profile) {\n\t\t\t\treturn profile;\n\t\t\t}\n\t\t\t\n\t\t\tswitch(syntax) {\n\t\t\t\tcase 'xml':\n\t\t\t\tcase 'xsl':\n\t\t\t\t\treturn 'xml';\n\t\t\t\tcase 'css':\n\t\t\t\t\tif (this.isInlineCSS(editor)) {\n\t\t\t\t\t\treturn 'line';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'html':\n\t\t\t\t\tvar profile = require('resources').getVariable('profile');\n\t\t\t\t\tif (!profile) { // no forced profile, guess from content\n\t\t\t\t\t\t// html or xhtml?\n\t\t\t\t\t\tprofile = this.isXHTML(editor) ? 'xhtml': 'html';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn profile;\n\t\t\t}\n\n\t\t\treturn 'xhtml';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Tries to detect if current document is XHTML one.\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisXHTML: function(editor) {\n\t\t\treturn editor.getContent().search(/<!DOCTYPE[^>]+XHTML/i) != -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current caret position is inside &lt;style&gt; tag\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns\n\t\t */\n\t\tisStyle: function(editor) {\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar tag = require('htmlMatcher').tag(content, caretPos);\n\t\t\treturn tag && tag.open.name.toLowerCase() == 'style' \n\t\t\t\t&& tag.innerRange.cmp(caretPos, 'lte', 'gte');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if current caret position is inside \"style\" attribute of HTML\n\t\t * element\n\t\t * @param {IEmmetEditor} editor\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisInlineCSS: function(editor) {\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar tree = require('xmlEditTree').parseFromPosition(content, caretPos, true);\n            if (tree) {\n                var attr = tree.itemFromPosition(caretPos, true);\n                return attr && attr.name().toLowerCase() == 'style' \n                \t&& attr.valueRange(true).cmp(caretPos, 'lte', 'gte');\n            }\n            \n            return false;\n\t\t}\n\t};\n});/**\n * Utility functions to work with <code>AbbreviationNode</code> as HTML element\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('abbreviationUtils', function(require, _) {\n\treturn {\n\t\t/**\n\t\t * Check if passed abbreviation node has matched snippet resource\n\t\t * @param {AbbreviationNode} node\n\t\t * @returns {Boolean}\n\t\t * @memberOf abbreviationUtils\n\t\t */\n\t\tisSnippet: function(node) {\n\t\t\treturn require('elements').is(node.matchedResource(), 'snippet');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if passed node is unary (no closing tag)\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisUnary: function(node) {\n\t\t\tif (node.children.length || node._text || this.isSnippet(node)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tvar r = node.matchedResource();\n\t\t\treturn r && r.is_empty;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if passed node is inline-level (like &lt;strong&gt;, &lt;img&gt;)\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisInline: function(node) {\n\t\t\treturn node.isTextNode() \n\t\t\t\t|| !node.name() \n\t\t\t\t|| require('tagName').isInlineLevel(node.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if passed node is block-level\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisBlock: function(node) {\n\t\t\treturn this.isSnippet(node) || !this.isInline(node);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if given node is a snippet\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\tisSnippet: function(node) {\n\t\t\treturn require('elements').is(node.matchedResource(), 'snippet');\n\t\t},\n\t\t\n\t\t/**\n\t\t * This function tests if passed node content contains HTML tags. \n\t\t * This function is mostly used for output formatting\n\t\t * @param {AbbreviationNode} node\n\t\t * @returns {Boolean}\n\t\t */\n\t\thasTagsInContent: function(node) {\n\t\t\treturn require('utils').matchesTag(node.content);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Test if current element contains block-level children\n\t\t * @param {AbbreviationNode} node\n\t\t * @return {Boolean}\n\t\t */\n\t\thasBlockChildren: function(node) {\n\t\t\treturn (this.hasTagsInContent(node) && this.isBlock(node)) \n\t\t\t\t|| _.any(node.children, function(child) {\n\t\t\t\t\treturn this.isBlock(child);\n\t\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Utility function that inserts content instead of <code>${child}</code>\n\t\t * variables on <code>text</code>\n\t\t * @param {String} text Text where child content should be inserted\n\t\t * @param {String} childContent Content to insert\n\t\t * @param {Object} options\n\t\t * @returns {String\n\t\t */\n\t\tinsertChildContent: function(text, childContent, options) {\n\t\t\toptions = _.extend({\n\t\t\t\tkeepVariable: true,\n\t\t\t\tappendIfNoChild: true\n\t\t\t}, options || {});\n\t\t\t\n\t\t\tvar childVariableReplaced = false;\n\t\t\tvar utils = require('utils');\n\t\t\ttext = utils.replaceVariables(text, function(variable, name, data) {\n\t\t\t\tvar output = variable;\n\t\t\t\tif (name == 'child') {\n\t\t\t\t\t// add correct indentation\n\t\t\t\t\toutput = utils.padString(childContent, utils.getLinePaddingFromPosition(text, data.start));\n\t\t\t\t\tchildVariableReplaced = true;\n\t\t\t\t\tif (options.keepVariable)\n\t\t\t\t\t\toutput += variable;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn output;\n\t\t\t});\n\t\t\t\n\t\t\tif (!childVariableReplaced && options.appendIfNoChild) {\n\t\t\t\ttext += childContent;\n\t\t\t}\n\t\t\t\n\t\t\treturn text;\n\t\t}\n\t};\n});/**\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n */\nemmet.define('base64', function(require, _) {\n\tvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\t\n\treturn {\n\t\t/**\n\t\t * Encodes data using base64 algorithm\n\t\t * @author Tyler Akins (http://rumkin.com)\n\t\t * @param {String} input\n\t\t * @returns {String}\n\t\t * @memberOf emmet.base64\n\t\t */\n\t\tencode : function(input) {\n\t\t\tvar output = [];\n\t\t\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4, cdp1, cdp2, cdp3;\n\t\t\tvar i = 0, il = input.length, b64 = chars;\n\n\t\t\twhile (i < il) {\n\n\t\t\t\tcdp1 = input.charCodeAt(i++);\n\t\t\t\tcdp2 = input.charCodeAt(i++);\n\t\t\t\tcdp3 = input.charCodeAt(i++);\n\n\t\t\t\tchr1 = cdp1 & 0xff;\n\t\t\t\tchr2 = cdp2 & 0xff;\n\t\t\t\tchr3 = cdp3 & 0xff;\n\n\t\t\t\tenc1 = chr1 >> 2;\n\t\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\t\t\tenc4 = chr3 & 63;\n\n\t\t\t\tif (isNaN(cdp2)) {\n\t\t\t\t\tenc3 = enc4 = 64;\n\t\t\t\t} else if (isNaN(cdp3)) {\n\t\t\t\t\tenc4 = 64;\n\t\t\t\t}\n\n\t\t\t\toutput.push(b64.charAt(enc1) + b64.charAt(enc2) + b64.charAt(enc3) + b64.charAt(enc4));\n\t\t\t}\n\n\t\t\treturn output.join('');\n\t\t},\n\n\t\t/**\n\t\t * Decodes string using MIME base64 algorithm\n\t\t * \n\t\t * @author Tyler Akins (http://rumkin.com)\n\t\t * @param {String} data\n\t\t * @return {String}\n\t\t */\n\t\tdecode : function(data) {\n\t\t\tvar o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, tmpArr = [];\n\t\t\tvar b64 = chars, il = data.length;\n\n\t\t\tif (!data) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tdata += '';\n\n\t\t\tdo { // unpack four hexets into three octets using index points in b64\n\t\t\t\th1 = b64.indexOf(data.charAt(i++));\n\t\t\t\th2 = b64.indexOf(data.charAt(i++));\n\t\t\t\th3 = b64.indexOf(data.charAt(i++));\n\t\t\t\th4 = b64.indexOf(data.charAt(i++));\n\n\t\t\t\tbits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n\n\t\t\t\to1 = bits >> 16 & 0xff;\n\t\t\t\to2 = bits >> 8 & 0xff;\n\t\t\t\to3 = bits & 0xff;\n\n\t\t\t\tif (h3 == 64) {\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1);\n\t\t\t\t} else if (h4 == 64) {\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1, o2);\n\t\t\t\t} else {\n\t\t\t\t\ttmpArr[ac++] = String.fromCharCode(o1, o2, o3);\n\t\t\t\t}\n\t\t\t} while (i < il);\n\n\t\t\treturn tmpArr.join('');\n\t\t}\n\t};\n});/**\n * HTML matcher: takes string and searches for HTML tag pairs for given position \n * \n * Unlike “classic” matchers, it parses content from the specified \n * position, not from the start, so it may work even outside HTML documents\n * (for example, inside strings of programming languages like JavaScript, Python \n * etc.)\n * @constructor\n * @memberOf __htmlMatcherDefine\n */\nemmet.define('htmlMatcher', function(require, _) {\n\t// Regular Expressions for parsing tags and attributes\n\tvar reOpenTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\n\tvar reCloseTag = /^<\\/([\\w\\:\\-]+)[^>]*>/;\n\t\n\tfunction openTag(i, match) {\n\t\treturn {\n\t\t\tname: match[1],\n\t\t\tselfClose: !!match[3],\n\t\t\t/** @type Range */\n\t\t\trange: require('range').create(i, match[0]),\n\t\t\ttype: 'open'\n\t\t};\n\t}\n\t\n\tfunction closeTag(i, match) {\n\t\treturn {\n\t\t\tname: match[1],\n\t\t\t/** @type Range */\n\t\t\trange: require('range').create(i, match[0]),\n\t\t\ttype: 'close'\n\t\t};\n\t}\n\t\n\tfunction comment(i, match) {\n\t\treturn {\n\t\t\t/** @type Range */\n\t\t\trange: require('range').create(i, _.isNumber(match) ? match - i : match[0]),\n\t\t\ttype: 'comment'\n\t\t};\n\t}\n\t\n\t/**\n\t * Creates new tag matcher session\n\t * @param {String} text\n\t */\n\tfunction createMatcher(text) {\n\t\tvar memo = {}, m;\n\t\treturn {\n\t\t\t/**\n\t\t\t * Test if given position matches opening tag\n\t\t\t * @param {Number} i\n\t\t\t * @returns {Object} Matched tag object\n\t\t\t */\n\t\t\topen: function(i) {\n\t\t\t\tvar m = this.matches(i);\n\t\t\t\treturn m && m.type == 'open' ? m : null;\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Test if given position matches closing tag\n\t\t\t * @param {Number} i\n\t\t\t * @returns {Object} Matched tag object\n\t\t\t */\n\t\t\tclose: function(i) {\n\t\t\t\tvar m = this.matches(i);\n\t\t\t\treturn m && m.type == 'close' ? m : null;\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Matches either opening or closing tag for given position\n\t\t\t * @param i\n\t\t\t * @returns\n\t\t\t */\n\t\t\tmatches: function(i) {\n\t\t\t\tvar key = 'p' + i;\n\t\t\t\t\n\t\t\t\tif (!(key in memo)) {\n\t\t\t\t\tif (text.charAt(i) == '<') {\n\t\t\t\t\t\tvar substr = text.slice(i);\n\t\t\t\t\t\tif (m = substr.match(reOpenTag)) {\n\t\t\t\t\t\t\tmemo[key] = openTag(i, m);\n\t\t\t\t\t\t} else if (m = substr.match(reCloseTag)) {\n\t\t\t\t\t\t\tmemo[key] = closeTag(i, m);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// remember that given position contains no valid tag\n\t\t\t\t\t\t\tmemo[key] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn memo[key];\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Returns original text\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\ttext: function() {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t};\n\t}\n\t\n\tfunction matches(text, pos, pattern) {\n\t\treturn text.substring(pos, pos + pattern.length) == pattern;\n\t}\n\t\n\t/**\n\t * Search for closing pair of opening tag\n\t * @param {Object} open Open tag instance\n\t * @param {Object} matcher Matcher instance\n\t */\n\tfunction findClosingPair(open, matcher) {\n\t\tvar stack = [], tag = null;\n\t\tvar text = matcher.text();\n\t\t\n\t\tfor (var pos = open.range.end, len = text.length; pos < len; pos++) {\n\t\t\tif (matches(text, pos, '<!--')) {\n\t\t\t\t// skip to end of comment\n\t\t\t\tfor (var j = pos; j < len; j++) {\n\t\t\t\t\tif (matches(text, j, '-->')) {\n\t\t\t\t\t\tpos = j + 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (tag = matcher.matches(pos)) {\n\t\t\t\tif (tag.type == 'open' && !tag.selfClose) {\n\t\t\t\t\tstack.push(tag.name);\n\t\t\t\t} else if (tag.type == 'close') {\n\t\t\t\t\tif (!stack.length) { // found valid pair?\n\t\t\t\t\t\treturn tag.name == open.name ? tag : null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// check if current closing tag matches previously opened one\n\t\t\t\t\tif (_.last(stack) == tag.name) {\n\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\twhile (stack.length && !found) {\n\t\t\t\t\t\t\tvar last = stack.pop();\n\t\t\t\t\t\t\tif (last == tag.name) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!stack.length && !found) {\n\t\t\t\t\t\t\treturn tag.name == open.name ? tag : null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Main function: search for tag pair in <code>text</code> for given \n\t\t * position\n\t\t * @memberOf htmlMatcher\n\t\t * @param {String} text \n\t\t * @param {Number} pos\n\t\t * @returns {Object}\n\t\t */\n\t\tfind: function(text, pos) {\n\t\t\tvar range = require('range');\n\t\t\tvar matcher = createMatcher(text); \n\t\t\tvar open = null, close = null;\n\t\t\t\n\t\t\tfor (var i = pos; i >= 0; i--) {\n\t\t\t\tif (open = matcher.open(i)) {\n\t\t\t\t\t// found opening tag\n\t\t\t\t\tif (open.selfClose) {\n\t\t\t\t\t\tif (open.range.cmp(pos, 'lt', 'gt')) {\n\t\t\t\t\t\t\t// inside self-closing tag, found match\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// outside self-closing tag, continue\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tclose = findClosingPair(open, matcher);\n\t\t\t\t\tif (close) {\n\t\t\t\t\t\t// found closing tag.\n\t\t\t\t\t\tvar r = range.create2(open.range.start, close.range.end);\n\t\t\t\t\t\tif (r.contains(pos)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (open.range.contains(pos)) {\n\t\t\t\t\t\t// we inside empty HTML tag like <br>\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\topen = null;\n\t\t\t\t} else if (matches(text, i, '-->')) {\n\t\t\t\t\t// skip back to comment start\n\t\t\t\t\tfor (var j = i - 1; j >= 0; j--) {\n\t\t\t\t\t\tif (matches(text, j, '-->')) {\n\t\t\t\t\t\t\t// found another comment end, do nothing\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (matches(text, j, '<!--')) {\n\t\t\t\t\t\t\ti = j;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (matches(text, i, '<!--')) {\n\t\t\t\t\t// we're inside comment, match it\n\t\t\t\t\tvar j = i + 4, jl = text.length;\n\t\t\t\t\tfor (; j < jl; j++) {\n\t\t\t\t\t\tif (matches(text, j, '-->')) {\n\t\t\t\t\t\t\tj += 3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\topen = comment(i, j);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (open) {\n\t\t\t\tvar outerRange = null;\n\t\t\t\tvar innerRange = null;\n\t\t\t\t\n\t\t\t\tif (close) {\n\t\t\t\t\touterRange = range.create2(open.range.start, close.range.end);\n\t\t\t\t\tinnerRange = range.create2(open.range.end, close.range.start);\n\t\t\t\t} else {\n\t\t\t\t\touterRange = innerRange = range.create2(open.range.start, open.range.end);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (open.type == 'comment') {\n\t\t\t\t\t// adjust positions of inner range for comment\n\t\t\t\t\tvar _c = outerRange.substring(text);\n\t\t\t\t\tinnerRange.start += _c.length - _c.replace(/^<\\!--\\s*/, '').length;\n\t\t\t\t\tinnerRange.end -= _c.length - _c.replace(/\\s*-->$/, '').length;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\topen: open,\n\t\t\t\t\tclose: close,\n\t\t\t\t\ttype: open.type == 'comment' ? 'comment' : 'tag',\n\t\t\t\t\tinnerRange: innerRange,\n\t\t\t\t\tinnerContent: function() {\n\t\t\t\t\t\treturn this.innerRange.substring(text);\n\t\t\t\t\t},\n\t\t\t\t\touterRange: outerRange,\n\t\t\t\t\touterContent: function() {\n\t\t\t\t\t\treturn this.outerRange.substring(text);\n\t\t\t\t\t},\n\t\t\t\t\trange: !innerRange.length() || !innerRange.cmp(pos, 'lte', 'gte') ? outerRange : innerRange,\n\t\t\t\t\tcontent: function() {\n\t\t\t\t\t\treturn this.range.substring(text);\n\t\t\t\t\t},\n\t\t\t\t\tsource: text\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * The same as <code>find()</code> method, but restricts matched result \n\t\t * to <code>tag</code> type\n\t\t * @param {String} text \n\t\t * @param {Number} pos\n\t\t * @returns {Object}\n\t\t */\n\t\ttag: function(text, pos) {\n\t\t\tvar result = this.find(text, pos);\n\t\t\tif (result && result.type == 'tag') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t};\n});/**\n * Utility module for handling tabstops tokens generated by Emmet's \n * \"Expand Abbreviation\" action. The main <code>extract</code> method will take\n * raw text (for example: <i>${0} some ${1:text}</i>), find all tabstops \n * occurrences, replace them with tokens suitable for your editor of choice and \n * return object with processed text and list of found tabstops and their ranges.\n * For sake of portability (Objective-C/Java) the tabstops list is a plain \n * sorted array with plain objects.\n * \n * Placeholders with the same are meant to be <i>linked</i> in your editor.\n * @param {Function} require\n * @param {Underscore} _  \n */\nemmet.define('tabStops', function(require, _) {\n\t/**\n\t * Global placeholder value, automatically incremented by \n\t * <code>variablesResolver()</code> function\n\t */\n\tvar startPlaceholderNum = 100;\n\t\n\tvar tabstopIndex = 0;\n\t\n\tvar defaultOptions = {\n\t\treplaceCarets: false,\n\t\tescape: function(ch) {\n\t\t\treturn '\\\\' + ch;\n\t\t},\n\t\ttabstop: function(data) {\n\t\t\treturn data.token;\n\t\t},\n\t\tvariable: function(data) {\n\t\t\treturn data.token;\n\t\t}\n\t};\n\t\n\t// XXX register output processor that will upgrade tabstops of parsed node\n\t// in order to prevent tabstop index conflicts\n\trequire('abbreviationParser').addOutputProcessor(function(text, node, type) {\n\t\tvar maxNum = 0;\n\t\tvar tabstops = require('tabStops');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar tsOptions = {\n\t\t\ttabstop: function(data) {\n\t\t\t\tvar group = parseInt(data.group);\n\t\t\t\tif (group == 0)\n\t\t\t\t\treturn '${0}';\n\t\t\t\t\n\t\t\t\tif (group > maxNum) maxNum = group;\n\t\t\t\tif (data.placeholder) {\n\t\t\t\t\t// respect nested placeholders\n\t\t\t\t\tvar ix = group + tabstopIndex;\n\t\t\t\t\tvar placeholder = tabstops.processText(data.placeholder, tsOptions);\n\t\t\t\t\treturn '${' + ix + ':' + placeholder + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn '${' + (group + tabstopIndex) + '}';\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t// upgrade tabstops\n\t\ttext = tabstops.processText(text, tsOptions);\n\t\t\n\t\t// resolve variables\n\t\ttext = utils.replaceVariables(text, tabstops.variablesResolver(node));\n\t\t\n\t\ttabstopIndex += maxNum + 1;\n\t\treturn text;\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Main function that looks for a tabstops in provided <code>text</code>\n\t\t * and returns a processed version of <code>text</code> with expanded \n\t\t * placeholders and list of tabstops found.\n\t\t * @param {String} text Text to process\n\t\t * @param {Object} options List of processor options:<br>\n\t\t * \n\t\t * <b>replaceCarets</b> : <code>Boolean</code> — replace all default\n\t\t * caret placeholders (like <i>{%::emmet-caret::%}</i>) with <i>${0:caret}</i><br>\n\t\t * \n\t\t * <b>escape</b> : <code>Function</code> — function that handle escaped\n\t\t * characters (mostly '$'). By default, it returns the character itself \n\t\t * to be displayed as is in output, but sometimes you will use \n\t\t * <code>extract</code> method as intermediate solution for further \n\t\t * processing and want to keep character escaped. Thus, you should override\n\t\t * <code>escape</code> method to return escaped symbol (e.g. '\\\\$')<br>\n\t\t * \n\t\t * <b>tabstop</b> : <code>Function</code> – a tabstop handler. Receives \n\t\t * a single argument – an object describing token: its position, number \n\t\t * group, placeholder and token itself. Should return a replacement \n\t\t * string that will appear in final output\n\t\t * \n\t\t * <b>variable</b> : <code>Function</code> – variable handler. Receives \n\t\t * a single argument – an object describing token: its position, name \n\t\t * and original token itself. Should return a replacement \n\t\t * string that will appear in final output\n\t\t * \n\t\t * @returns {Object} Object with processed <code>text</code> property\n\t\t * and array of <code>tabstops</code> found\n\t\t * @memberOf tabStops\n\t\t */\n\t\textract: function(text, options) {\n\t\t\t// prepare defaults\n\t\t\tvar utils = require('utils');\n\t\t\tvar placeholders = {carets: ''};\n\t\t\tvar marks = [];\n\t\t\t\n\t\t\toptions = _.extend({}, defaultOptions, options, {\n\t\t\t\ttabstop: function(data) {\n\t\t\t\t\tvar token = data.token;\n\t\t\t\t\tvar ret = '';\n\t\t\t\t\tif (data.placeholder == 'cursor') {\n\t\t\t\t\t\tmarks.push({\n\t\t\t\t\t\t\tstart: data.start,\n\t\t\t\t\t\t\tend: data.start + token.length,\n\t\t\t\t\t\t\tgroup: 'carets',\n\t\t\t\t\t\t\tvalue: ''\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// unify placeholder value for single group\n\t\t\t\t\t\tif ('placeholder' in data)\n\t\t\t\t\t\t\tplaceholders[data.group] = data.placeholder;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (data.group in placeholders)\n\t\t\t\t\t\t\tret = placeholders[data.group];\n\t\t\t\t\t\t\n\t\t\t\t\t\tmarks.push({\n\t\t\t\t\t\t\tstart: data.start,\n\t\t\t\t\t\t\tend: data.start + token.length,\n\t\t\t\t\t\t\tgroup: data.group,\n\t\t\t\t\t\t\tvalue: ret\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn token;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif (options.replaceCarets) {\n\t\t\t\ttext = text.replace(new RegExp( utils.escapeForRegexp( utils.getCaretPlaceholder() ), 'g'), '${0:cursor}');\n\t\t\t}\n\t\t\t\n\t\t\t// locate tabstops and unify group's placeholders\n\t\t\ttext = this.processText(text, options);\n\t\t\t\n\t\t\t// now, replace all tabstops with placeholders\n\t\t\tvar buf = utils.stringBuilder(), lastIx = 0;\n\t\t\tvar tabStops = _.map(marks, function(mark) {\n\t\t\t\tbuf.append(text.substring(lastIx, mark.start));\n\t\t\t\t\n\t\t\t\tvar pos = buf.length;\n\t\t\t\tvar ph = placeholders[mark.group] || '';\n\t\t\t\t\n\t\t\t\tbuf.append(ph);\n\t\t\t\tlastIx = mark.end;\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\tgroup: mark.group,\n\t\t\t\t\tstart: pos,\n\t\t\t\t\tend:  pos + ph.length\n\t\t\t\t};\n\t\t\t});\n\t\t\t\n\t\t\tbuf.append(text.substring(lastIx));\n\t\t\t\n\t\t\treturn {\n\t\t\t\ttext: buf.toString(),\n\t\t\t\ttabstops: _.sortBy(tabStops, 'start')\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Text processing routine. Locates escaped characters and tabstops and\n\t\t * replaces them with values returned by handlers defined in \n\t\t * <code>options</code>\n\t\t * @param {String} text\n\t\t * @param {Object} options See <code>extract</code> method options \n\t\t * description\n\t\t * @returns {String}\n\t\t */\n\t\tprocessText: function(text, options) {\n\t\t\toptions = _.extend({}, defaultOptions, options);\n\t\t\t\n\t\t\tvar buf = require('utils').stringBuilder();\n\t\t\t/** @type StringStream */\n\t\t\tvar stream = require('stringStream').create(text);\n\t\t\tvar ch, m, a;\n\t\t\t\n\t\t\twhile (ch = stream.next()) {\n\t\t\t\tif (ch == '\\\\' && !stream.eol()) {\n\t\t\t\t\t// handle escaped character\n\t\t\t\t\tbuf.append(options.escape(stream.next()));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ta = ch;\n\t\t\t\t\n\t\t\t\tif (ch == '$') {\n\t\t\t\t\t// looks like a tabstop\n\t\t\t\t\tstream.start = stream.pos - 1;\n\t\t\t\t\t\n\t\t\t\t\tif (m = stream.match(/^[0-9]+/)) {\n\t\t\t\t\t\t// it's $N\n\t\t\t\t\t\ta = options.tabstop({\n\t\t\t\t\t\t\tstart: buf.length, \n\t\t\t\t\t\t\tgroup: stream.current().substr(1),\n\t\t\t\t\t\t\ttoken: stream.current()\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (m = stream.match(/^\\{([a-z_\\-][\\w\\-]*)\\}/)) {\n\t\t\t\t\t\t// ${variable}\n\t\t\t\t\t\ta = options.variable({\n\t\t\t\t\t\t\tstart: buf.length, \n\t\t\t\t\t\t\tname: m[1],\n\t\t\t\t\t\t\ttoken: stream.current()\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (m = stream.match(/^\\{([0-9]+)(:.+?)?\\}/, false)) {\n\t\t\t\t\t\t// ${N:value} or ${N} placeholder\n\t\t\t\t\t\t// parse placeholder, including nested ones\n\t\t\t\t\t\tstream.skipToPair('{', '}');\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar obj = {\n\t\t\t\t\t\t\tstart: buf.length, \n\t\t\t\t\t\t\tgroup: m[1],\n\t\t\t\t\t\t\ttoken: stream.current()\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar placeholder = obj.token.substring(obj.group.length + 2, obj.token.length - 1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (placeholder) {\n\t\t\t\t\t\t\tobj.placeholder = placeholder.substr(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\ta = options.tabstop(obj);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbuf.append(a);\n\t\t\t}\n\t\t\t\n\t\t\treturn buf.toString();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Upgrades tabstops in output node in order to prevent naming conflicts\n\t\t * @param {AbbreviationNode} node\n\t\t * @param {Number} offset Tab index offset\n\t\t * @returns {Number} Maximum tabstop index in element\n\t\t */\n\t\tupgrade: function(node, offset) {\n\t\t\tvar maxNum = 0;\n\t\t\tvar options = {\n\t\t\t\ttabstop: function(data) {\n\t\t\t\t\tvar group = parseInt(data.group);\n\t\t\t\t\tif (group > maxNum) maxNum = group;\n\t\t\t\t\t\t\n\t\t\t\t\tif (data.placeholder)\n\t\t\t\t\t\treturn '${' + (group + offset) + ':' + data.placeholder + '}';\n\t\t\t\t\telse\n\t\t\t\t\t\treturn '${' + (group + offset) + '}';\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t_.each(['start', 'end', 'content'], function(p) {\n\t\t\t\tnode[p] = this.processText(node[p], options);\n\t\t\t}, this);\n\t\t\t\n\t\t\treturn maxNum;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper function that produces a callback function for \n\t\t * <code>replaceVariables()</code> method from {@link utils}\n\t\t * module. This callback will replace variable definitions (like \n\t\t * ${var_name}) with their value defined in <i>resource</i> module,\n\t\t * or outputs tabstop with variable name otherwise.\n\t\t * @param {AbbreviationNode} node Context node\n\t\t * @returns {Function}\n\t\t */\n\t\tvariablesResolver: function(node) {\n\t\t\tvar placeholderMemo = {};\n\t\t\tvar res = require('resources');\n\t\t\treturn function(str, varName) {\n\t\t\t\t// do not mark `child` variable as placeholder – it‘s a reserved\n\t\t\t\t// variable name\n\t\t\t\tif (varName == 'child')\n\t\t\t\t\treturn str;\n\t\t\t\t\n\t\t\t\tif (varName == 'cursor')\n\t\t\t\t\treturn require('utils').getCaretPlaceholder();\n\t\t\t\t\n\t\t\t\tvar attr = node.attribute(varName);\n\t\t\t\tif (!_.isUndefined(attr) && attr !== str) {\n\t\t\t\t\treturn attr;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar varValue = res.getVariable(varName);\n\t\t\t\tif (varValue)\n\t\t\t\t\treturn varValue;\n\t\t\t\t\n\t\t\t\t// output as placeholder\n\t\t\t\tif (!placeholderMemo[varName])\n\t\t\t\t\tplaceholderMemo[varName] = startPlaceholderNum++;\n\t\t\t\t\t\n\t\t\t\treturn '${' + placeholderMemo[varName] + ':' + varName + '}';\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Resets global tabstop index. When parsed tree is converted to output\n\t\t * string (<code>AbbreviationNode.toString()</code>), all tabstops \n\t\t * defined in snippets and elements are upgraded in order to prevent\n\t\t * naming conflicts of nested. For example, <code>${1}</code> of a node\n\t\t * should not be linked with the same placehilder of the child node.\n\t\t * By default, <code>AbbreviationNode.toString()</code> automatically\n\t\t * upgrades tabstops of the same index for each node and writes maximum\n\t\t * tabstop index into the <code>tabstopIndex</code> variable. To keep\n\t\t * this variable at reasonable value, it is recommended to call \n\t\t * <code>resetTabstopIndex()</code> method each time you expand variable \n\t\t * @returns\n\t\t */\n\t\tresetTabstopIndex: function() {\n\t\t\ttabstopIndex = 0;\n\t\t\tstartPlaceholderNum = 100;\n\t\t}\n\t};\n});/**\n * Common module's preferences storage. This module \n * provides general storage for all module preferences, their description and\n * default values.<br><br>\n * \n * This module can also be used to list all available properties to create \n * UI for updating properties\n * \n * @memberOf __preferencesDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.define('preferences', function(require, _) {\n\tvar preferences = {};\n\tvar defaults = {};\n\tvar _dbgDefaults = null;\n\tvar _dbgPreferences = null;\n\n\tfunction toBoolean(val) {\n\t\tif (_.isString(val)) {\n\t\t\tval = val.toLowerCase();\n\t\t\treturn val == 'yes' || val == 'true' || val == '1';\n\t\t}\n\n\t\treturn !!val;\n\t}\n\t\n\tfunction isValueObj(obj) {\n\t\treturn _.isObject(obj) \n\t\t\t&& 'value' in obj \n\t\t\t&& _.keys(obj).length < 3;\n\t}\n\t\n\treturn {\n\t\t/**\n\t\t * Creates new preference item with default value\n\t\t * @param {String} name Preference name. You can also pass object\n\t\t * with many options\n\t\t * @param {Object} value Preference default value\n\t\t * @param {String} description Item textual description\n\t\t * @memberOf preferences\n\t\t */\n\t\tdefine: function(name, value, description) {\n\t\t\tvar prefs = name;\n\t\t\tif (_.isString(name)) {\n\t\t\t\tprefs = {};\n\t\t\t\tprefs[name] = {\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tdescription: description\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\t_.each(prefs, function(v, k) {\n\t\t\t\tdefaults[k] = isValueObj(v) ? v : {value: v};\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Updates preference item value. Preference value should be defined\n\t\t * first with <code>define</code> method.\n\t\t * @param {String} name Preference name. You can also pass object\n\t\t * with many options\n\t\t * @param {Object} value Preference default value\n\t\t * @memberOf preferences\n\t\t */\n\t\tset: function(name, value) {\n\t\t\tvar prefs = name;\n\t\t\tif (_.isString(name)) {\n\t\t\t\tprefs = {};\n\t\t\t\tprefs[name] = value;\n\t\t\t}\n\t\t\t\n\t\t\t_.each(prefs, function(v, k) {\n\t\t\t\tif (!(k in defaults)) {\n\t\t\t\t\tthrow 'Property \"' + k + '\" is not defined. You should define it first with `define` method of current module';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// do not set value if it equals to default value\n\t\t\t\tif (v !== defaults[k].value) {\n\t\t\t\t\t// make sure we have value of correct type\n\t\t\t\t\tswitch (typeof defaults[k].value) {\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tv = toBoolean(v);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tv = parseInt(v + '', 10) || 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault: // convert to string\n\t\t\t\t\t\t\tif (v !== null) {\n\t\t\t\t\t\t\t\tv += '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tpreferences[k] = v;\n\t\t\t\t} else if  (k in preferences) {\n\t\t\t\t\tdelete preferences[k];\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns preference value\n\t\t * @param {String} name\n\t\t * @returns {String} Returns <code>undefined</code> if preference is \n\t\t * not defined\n\t\t */\n\t\tget: function(name) {\n\t\t\tif (name in preferences)\n\t\t\t\treturn preferences[name];\n\t\t\t\n\t\t\tif (name in defaults)\n\t\t\t\treturn defaults[name].value;\n\t\t\t\n\t\t\treturn void 0;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns comma-separated preference value as array of values\n\t\t * @param {String} name\n\t\t * @returns {Array} Returns <code>undefined</code> if preference is \n\t\t * not defined, <code>null</code> if string cannot be converted to array\n\t\t */\n\t\tgetArray: function(name) {\n\t\t\tvar val = this.get(name);\n\t\t\tif (_.isUndefined(val) || val === null || val === '')  {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tval = _.map(val.split(','), require('utils').trim);\n\t\t\tif (!val.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\treturn val;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns comma and colon-separated preference value as dictionary\n\t\t * @param {String} name\n\t\t * @returns {Object}\n\t\t */\n\t\tgetDict: function(name) {\n\t\t\tvar result = {};\n\t\t\t_.each(this.getArray(name), function(val) {\n\t\t\t\tvar parts = val.split(':');\n\t\t\t\tresult[parts[0]] = parts[1];\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns description of preference item\n\t\t * @param {String} name Preference name\n\t\t * @returns {Object}\n\t\t */\n\t\tdescription: function(name) {\n\t\t\treturn name in defaults ? defaults[name].description : void 0;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Completely removes specified preference(s)\n\t\t * @param {String} name Preference name (or array of names)\n\t\t */\n\t\tremove: function(name) {\n\t\t\tif (!_.isArray(name))\n\t\t\t\tname = [name];\n\t\t\t\n\t\t\t_.each(name, function(key) {\n\t\t\t\tif (key in preferences)\n\t\t\t\t\tdelete preferences[key];\n\t\t\t\t\n\t\t\t\tif (key in defaults)\n\t\t\t\t\tdelete defaults[key];\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns sorted list of all available properties\n\t\t * @returns {Array}\n\t\t */\n\t\tlist: function() {\n\t\t\treturn _.map(_.keys(defaults).sort(), function(key) {\n\t\t\t\treturn {\n\t\t\t\t\tname: key,\n\t\t\t\t\tvalue: this.get(key),\n\t\t\t\t\ttype: typeof defaults[key].value,\n\t\t\t\t\tdescription: defaults[key].description\n\t\t\t\t};\n\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Loads user-defined preferences from JSON\n\t\t * @param {Object} json\n\t\t * @returns\n\t\t */\n\t\tload: function(json) {\n\t\t\t_.each(json, function(value, key) {\n\t\t\t\tthis.set(key, value);\n\t\t\t}, this);\n\t\t},\n\n\t\t/**\n\t\t * Returns hash of user-modified preferences\n\t\t * @returns {Object}\n\t\t */\n\t\texportModified: function() {\n\t\t\treturn _.clone(preferences);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Reset to defaults\n\t\t * @returns\n\t\t */\n\t\treset: function() {\n\t\t\tpreferences = {};\n\t\t},\n\t\t\n\t\t/**\n\t\t * For unit testing: use empty storage\n\t\t */\n\t\t_startTest: function() {\n\t\t\t_dbgDefaults = defaults;\n\t\t\t_dbgPreferences = preferences;\n\t\t\tdefaults = {};\n\t\t\tpreferences = {};\n\t\t},\n\t\t\n\t\t/**\n\t\t * For unit testing: restore original storage\n\t\t */\n\t\t_stopTest: function() {\n\t\t\tdefaults = _dbgDefaults;\n\t\t\tpreferences = _dbgPreferences;\n\t\t}\n\t};\n});/**\n * Module for handling filters\n * @param {Function} require\n * @param {Underscore} _\n * @author Sergey Chikuyonok (serge.che@gmail.com) <http://chikuyonok.ru>\n */\nemmet.define('filters', function(require, _) {\n\t/** List of registered filters */\n\tvar registeredFilters = {};\n\t\n\t/** Filters that will be applied for unknown syntax */\n\tvar basicFilters = 'html';\n\t\n\tfunction list(filters) {\n\t\tif (!filters)\n\t\t\treturn [];\n\t\t\n\t\tif (_.isString(filters))\n\t\t\treturn filters.split(/[\\|,]/g);\n\t\t\n\t\treturn filters;\n\t}\n\t\n\treturn  {\n\t\t/**\n\t\t * Register new filter\n\t\t * @param {String} name Filter name\n\t\t * @param {Function} fn Filter function\n\t\t */\n\t\tadd: function(name, fn) {\n\t\t\tregisteredFilters[name] = fn;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Apply filters for final output tree\n\t\t * @param {AbbreviationNode} tree Output tree\n\t\t * @param {Array} filters List of filters to apply. Might be a \n\t\t * <code>String</code>\n\t\t * @param {Object} profile Output profile, defined in <i>profile</i> \n\t\t * module. Filters defined it profile are not used, <code>profile</code>\n\t\t * is passed to filter function\n\t\t * @memberOf emmet.filters\n\t\t * @returns {AbbreviationNode}\n\t\t */\n\t\tapply: function(tree, filters, profile) {\n\t\t\tvar utils = require('utils');\n\t\t\tprofile = require('profile').get(profile);\n\t\t\t\n\t\t\t_.each(list(filters), function(filter) {\n\t\t\t\tvar name = utils.trim(filter.toLowerCase());\n\t\t\t\tif (name && name in registeredFilters) {\n\t\t\t\t\ttree = registeredFilters[name](tree, profile);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\treturn tree;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Composes list of filters that should be applied to a tree, based on \n\t\t * passed data\n\t\t * @param {String} syntax Syntax name ('html', 'css', etc.)\n\t\t * @param {Object} profile Output profile\n\t\t * @param {String} additionalFilters List or pipe-separated\n\t\t * string of additional filters to apply\n\t\t * @returns {Array}\n\t\t */\n\t\tcomposeList: function(syntax, profile, additionalFilters) {\n\t\t\tprofile = require('profile').get(profile);\n\t\t\tvar filters = list(profile.filters || require('resources').findItem(syntax, 'filters') || basicFilters);\n\t\t\t\n\t\t\tif (profile.extraFilters) {\n\t\t\t\tfilters = filters.concat(list(profile.extraFilters));\n\t\t\t}\n\t\t\t\t\n\t\t\tif (additionalFilters) {\n\t\t\t\tfilters = filters.concat(list(additionalFilters));\n\t\t\t}\n\t\t\t\t\n\t\t\tif (!filters || !filters.length) {\n\t\t\t\t// looks like unknown syntax, apply basic filters\n\t\t\t\tfilters = list(basicFilters);\n\t\t\t}\n\t\t\t\t\n\t\t\treturn filters;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts filter list from abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {Array} Array with cleaned abbreviation and list of \n\t\t * extracted filters\n\t\t */\n\t\textractFromAbbreviation: function(abbr) {\n\t\t\tvar filters = '';\n\t\t\tabbr = abbr.replace(/\\|([\\w\\|\\-]+)$/, function(str, p1){\n\t\t\t\tfilters = p1;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\treturn [abbr, list(filters)];\n\t\t}\n\t};\n});/**\n * Module that contains factories for element types used by Emmet\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('elements', function(require, _) {\n\tvar factories = {};\n\tvar reAttrs = /([\\w\\-:]+)\\s*=\\s*(['\"])(.*?)\\2/g;\n\t\n\tvar result = {\n\t\t/**\n\t\t * Create new element factory\n\t\t * @param {String} name Element identifier\n\t\t * @param {Function} factory Function that produces element of specified \n\t\t * type. The object generated by this factory is automatically \n\t\t * augmented with <code>type</code> property pointing to element\n\t\t * <code>name</code>\n\t\t * @memberOf elements\n\t\t */\n\t\tadd: function(name, factory) {\n\t\t\tvar that = this;\n\t\t\tfactories[name] = function() {\n\t\t\t\tvar elem = factory.apply(that, arguments);\n\t\t\t\tif (elem)\n\t\t\t\t\telem.type = name;\n\t\t\t\t\n\t\t\t\treturn elem;\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns factory for specified name\n\t\t * @param {String} name\n\t\t * @returns {Function}\n\t\t */\n\t\tget: function(name) {\n\t\t\treturn factories[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates new element with specified type\n\t\t * @param {String} name\n\t\t * @returns {Object}\n\t\t */\n\t\tcreate: function(name) {\n\t\t\tvar args = [].slice.call(arguments, 1);\n\t\t\tvar factory = this.get(name);\n\t\t\treturn factory ? factory.apply(this, args) : null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element is of specified type\n\t\t * @param {Object} elem\n\t\t * @param {String} type\n\t\t * @returns {Boolean}\n\t\t */\n\t\tis: function(elem, type) {\n\t\t\treturn elem && elem.type === type;\n\t\t}\n\t};\n\t\n\t// register resource references\n\tfunction commonFactory(value) {\n\t\treturn {data: value};\n\t}\n\t\n\t/**\n\t * Element factory\n\t * @param {String} elementName Name of output element\n\t * @param {String} attrs Attributes definition. You may also pass\n\t * <code>Array</code> where each contains object with <code>name</code> \n\t * and <code>value</code> properties, or <code>Object</code>\n\t * @param {Boolean} isEmpty Is expanded element should be empty\n\t */\n\tresult.add('element', function(elementName, attrs, isEmpty) {\n\t\tvar ret = {\n\t\t\t/** @memberOf __emmetDataElement */\n\t\t\tname: elementName,\n\t\t\tis_empty: !!isEmpty\n\t\t};\n\t\t\n\t\tif (attrs) {\n\t\t\tret.attributes = [];\n\t\t\tif (_.isArray(attrs)) {\n\t\t\t\tret.attributes = attrs;\n\t\t\t} else if (_.isString(attrs)) {\n\t\t\t\tvar m;\n\t\t\t\twhile (m = reAttrs.exec(attrs)) {\n\t\t\t\t\tret.attributes.push({\n\t\t\t\t\t\tname: m[1],\n\t\t\t\t\t\tvalue: m[3]\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_.each(attrs, function(value, name) {\n\t\t\t\t\tret.attributes.push({\n\t\t\t\t\t\tname: name, \n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn ret;\n\t});\n\t\n\tresult.add('snippet', commonFactory);\n\tresult.add('reference', commonFactory);\n\tresult.add('empty', function() {\n\t\treturn {};\n\t});\n\t\n\treturn result;\n});/**\n * Abstract implementation of edit tree interface.\n * Edit tree is a named container of editable “name-value” child elements, \n * parsed from <code>source</code>. This container provides convenient methods\n * for editing/adding/removing child elements. All these update actions are\n * instantly reflected in the <code>source</code> code with respect of formatting.\n * <br><br>\n * For example, developer can create an edit tree from CSS rule and add or \n * remove properties from it–all changes will be immediately reflected in the \n * original source.\n * <br><br>\n * All classes defined in this module should be extended the same way as in\n * Backbone framework: using <code>extend</code> method to create new class and \n * <code>initialize</code> method to define custom class constructor.\n * \n * @example\n * <pre><code>\n * var MyClass = require('editTree').EditElement.extend({\n * \tinitialize: function() {\n * \t\t// constructor code here\n * \t}\n * });\n * \n * var elem = new MyClass(); \n * </code></pre>\n * \n * \n * @param {Function} require\n * @param {Underscore} _\n * @constructor\n * @memberOf __editTreeDefine\n */\nemmet.define('editTree', function(require, _, core) {\n\tvar range = require('range').create;\n\t\n\t/**\n\t * Named container of edited source\n\t * @type EditContainer\n\t * @param {String} source\n\t * @param {Object} options\n\t */\n\tfunction EditContainer(source, options) {\n\t\tthis.options = _.extend({offset: 0}, options);\n\t\t/**\n\t\t * Source code of edited structure. All changes in the structure are \n\t\t * immediately reflected into this property\n\t\t */\n\t\tthis.source = source;\n\t\t\n\t\t/** \n\t\t * List of all editable children\n\t\t * @private \n\t\t */\n\t\tthis._children = [];\n\t\t\n\t\t/**\n\t\t * Hash of all positions of container\n\t\t * @private\n\t\t */\n\t\tthis._positions = {\n\t\t\tname: 0\n\t\t};\n\t\t\n\t\tthis.initialize.apply(this, arguments);\n\t}\n\t\n\t/**\n\t * The self-propagating extend function for classes.\n\t * @type Function\n\t */\n\tEditContainer.extend = core.extend;\n\t\n\tEditContainer.prototype = {\n\t\t/**\n\t\t * Child class constructor\n\t\t */\n\t\tinitialize: function() {},\n\t\t\n\t\t/**\n\t\t * Replace substring of tag's source\n\t\t * @param {String} value\n\t\t * @param {Number} start\n\t\t * @param {Number} end\n\t\t * @private\n\t\t */\n\t\t_updateSource: function(value, start, end) {\n\t\t\t// create modification range\n\t\t\tvar r = range(start, _.isUndefined(end) ? 0 : end - start);\n\t\t\tvar delta = value.length - r.length();\n\t\t\t\n\t\t\tvar update = function(obj) {\n\t\t\t\t_.each(obj, function(v, k) {\n\t\t\t\t\tif (v >= r.end)\n\t\t\t\t\t\tobj[k] += delta;\n\t\t\t\t});\n\t\t\t};\n\t\t\t\n\t\t\t// update affected positions of current container\n\t\t\tupdate(this._positions);\n\t\t\t\n\t\t\t// update affected positions of children\n\t\t\t_.each(this.list(), function(item) {\n\t\t\t\tupdate(item._positions);\n\t\t\t});\n\t\t\t\n\t\t\tthis.source = require('utils').replaceSubstring(this.source, value, r);\n\t\t},\n\t\t\t\n\t\t\t\n\t\t/**\n\t\t * Adds new attribute \n\t\t * @param {String} name Property name\n\t\t * @param {String} value Property value\n\t\t * @param {Number} pos Position at which to insert new property. By \n\t\t * default the property is inserted at the end of rule \n\t\t * @returns {EditElement} Newly created element\n\t\t */\n\t\tadd: function(name, value, pos) {\n\t\t\t// this is abstract implementation\n\t\t\tvar item = new EditElement(name, value);\n\t\t\tthis._children.push(item);\n\t\t\treturn item;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns attribute object\n\t\t * @param {String} name Attribute name or its index\n\t\t * @returns {EditElement}\n\t\t */\n\t\tget: function(name) {\n\t\t\tif (_.isNumber(name))\n\t\t\t\treturn this.list()[name];\n\t\t\t\n\t\t\tif (_.isString(name))\n\t\t\t\treturn _.find(this.list(), function(prop) {\n\t\t\t\t\treturn prop.name() === name;\n\t\t\t\t});\n\t\t\t\n\t\t\treturn name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all children by name or indexes\n\t\t * @param {Object} name Element name(s) or indexes (<code>String</code>,\n\t\t * <code>Array</code>, <code>Number</code>)\n\t\t * @returns {Array}\n\t\t */\n\t\tgetAll: function(name) {\n\t\t\tif (!_.isArray(name))\n\t\t\t\tname = [name];\n\t\t\t\n\t\t\t// split names and indexes\n\t\t\tvar names = [], indexes = [];\n\t\t\t_.each(name, function(item) {\n\t\t\t\tif (_.isString(item))\n\t\t\t\t\tnames.push(item);\n\t\t\t\telse if (_.isNumber(item))\n\t\t\t\t\tindexes.push(item);\n\t\t\t});\n\t\t\t\n\t\t\treturn _.filter(this.list(), function(attribute, i) {\n\t\t\t\treturn _.include(indexes, i) || _.include(names, attribute.name());\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns or updates element value. If such element doesn't exists,\n\t\t * it will be created automatically and added at the end of child list.\n\t\t * @param {String} name Element name or its index\n\t\t * @param {String} value New element value\n\t\t * @returns {String}\n\t\t */\n\t\tvalue: function(name, value, pos) {\n\t\t\tvar element = this.get(name);\n\t\t\tif (element)\n\t\t\t\treturn element.value(value);\n\t\t\t\n\t\t\tif (!_.isUndefined(value)) {\n\t\t\t\t// no such element — create it\n\t\t\t\treturn this.add(name, value, pos);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns all values of child elements found by <code>getAll()</code>\n\t\t * method\n\t\t * @param {Object} name Element name(s) or indexes (<code>String</code>,\n\t\t * <code>Array</code>, <code>Number</code>)\n\t\t * @returns {Array}\n\t\t */\n\t\tvalues: function(name) {\n\t\t\treturn _.map(this.getAll(name), function(element) {\n\t\t\t\treturn element.value();\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remove child element\n\t\t * @param {String} name Property name or its index\n\t\t */\n\t\tremove: function(name) {\n\t\t\tvar element = this.get(name);\n\t\t\tif (element) {\n\t\t\t\tthis._updateSource('', element.fullRange());\n\t\t\t\tthis._children = _.without(this._children, element);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of all editable child elements\n\t\t * @returns {Array}\n\t\t */\n\t\tlist: function() {\n\t\t\treturn this._children;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns index of editble child in list\n\t\t * @param {Object} item\n\t\t * @returns {Number}\n\t\t */\n\t\tindexOf: function(item) {\n\t\t\treturn _.indexOf(this.list(), this.get(item));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets or gets container name\n\t\t * @param {String} val New name. If not passed, current \n\t\t * name is returned\n\t\t * @return {String}\n\t\t */\n\t\tname: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._name !== (val = String(val))) {\n\t\t\t\tthis._updateSource(val, this._positions.name, this._positions.name + this._name.length);\n\t\t\t\tthis._name = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns name range object\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of \n\t\t * rule offset)\n\t\t * @returns {Range}\n\t\t */\n\t\tnameRange: function(isAbsolute) {\n\t\t\treturn range(this._positions.name + (isAbsolute ? this.options.offset : 0), this.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns range of current source\n\t\t * @param {Boolean} isAbsolute\n\t\t */\n\t\trange: function(isAbsolute) {\n\t\t\treturn range(isAbsolute ? this.options.offset : 0, this.toString());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element that belongs to specified position\n\t\t * @param {Number} pos\n\t\t * @param {Boolean} isAbsolute\n\t\t * @returns {EditElement}\n\t\t */\n\t\titemFromPosition: function(pos, isAbsolute) {\n\t\t\treturn _.find(this.list(), function(elem) {\n\t\t\t\treturn elem.range(isAbsolute).inside(pos);\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns source code of current container \n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this.source;\n\t\t}\n\t};\n\t\n\t/**\n\t * @param {EditContainer} parent\n\t * @param {Object} nameToken\n\t * @param {Object} valueToken\n\t */\n\tfunction EditElement(parent, nameToken, valueToken) {\n\t\t/** @type EditContainer */\n\t\tthis.parent = parent;\n\t\t\n\t\tthis._name = nameToken.value;\n\t\tthis._value = valueToken ? valueToken.value : '';\n\t\t\n\t\tthis._positions = {\n\t\t\tname: nameToken.start,\n\t\t\tvalue: valueToken ? valueToken.start : -1\n\t\t};\n\t\t\n\t\tthis.initialize.apply(this, arguments);\n\t}\n\t\n\t/**\n\t * The self-propagating extend function for classes.\n\t * @type Function\n\t */\n\tEditElement.extend = core.extend;\n\t\n\tEditElement.prototype = {\n\t\t/**\n\t\t * Child class constructor\n\t\t */\n\t\tinitialize: function() {},\n\t\t\n\t\t/**\n\t\t * Make position absolute\n\t\t * @private\n\t\t * @param {Number} num\n\t\t * @param {Boolean} isAbsolute\n\t\t * @returns {Boolean}\n\t\t */\n\t\t_pos: function(num, isAbsolute) {\n\t\t\treturn num + (isAbsolute ? this.parent.options.offset : 0);\n\t\t},\n\t\t\t\n\t\t/**\n\t\t * Sets of gets element value\n\t\t * @param {String} val New element value. If not passed, current \n\t\t * value is returned\n\t\t * @returns {String}\n\t\t */\n\t\tvalue: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._value !== (val = String(val))) {\n\t\t\t\tthis.parent._updateSource(val, this.valueRange());\n\t\t\t\tthis._value = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._value;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets of gets element name\n\t\t * @param {String} val New element name. If not passed, current \n\t\t * name is returned\n\t\t * @returns {String}\n\t\t */\n\t\tname: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._name !== (val = String(val))) {\n\t\t\t\tthis.parent._updateSource(val, this.nameRange());\n\t\t\t\tthis._name = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns position of element name token\n\t\t * @param {Boolean} isAbsolute Return absolute position\n\t\t * @returns {Number}\n\t\t */\n\t\tnamePosition: function(isAbsolute) {\n\t\t\treturn this._pos(this._positions.name, isAbsolute);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns position of element value token\n\t\t * @param {Boolean} isAbsolute Return absolute position\n\t\t * @returns {Number}\n\t\t */\n\t\tvaluePosition: function(isAbsolute) {\n\t\t\treturn this._pos(this._positions.value, isAbsolute);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element name\n\t\t * @param {Boolean} isAbsolute Return absolute range \n\t\t * @returns {Range}\n\t\t */\n\t\trange: function(isAbsolute) {\n\t\t\treturn range(this.namePosition(isAbsolute), this.toString());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns full element range, including possible indentation\n\t\t * @param {Boolean} isAbsolute Return absolute range\n\t\t * @returns {Range}\n\t\t */\n\t\tfullRange: function(isAbsolute) {\n\t\t\treturn this.range(isAbsolute);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element name range\n\t\t * @param {Boolean} isAbsolute Return absolute range\n\t\t * @returns {Range}\n\t\t */\n\t\tnameRange: function(isAbsolute) {\n\t\t\treturn range(this.namePosition(isAbsolute), this.name());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns element value range\n\t\t * @param {Boolean} isAbsolute Return absolute range\n\t\t * @returns {Range}\n\t\t */\n\t\tvalueRange: function(isAbsolute) {\n\t\t\treturn range(this.valuePosition(isAbsolute), this.value());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns current element string representation\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this.name() + this.value();\n\t\t},\n\t\t\n\t\tvalueOf: function() {\n\t\t\treturn this.toString();\n\t\t}\n\t};\n\t\n\treturn {\n\t\tEditContainer: EditContainer,\n\t\tEditElement: EditElement,\n\t\t\n\t\t/**\n\t\t * Creates token that can be fed to <code>EditElement</code>\n\t\t * @param {Number} start\n\t\t * @param {String} value\n\t\t * @param {String} type\n\t\t * @returns\n\t\t */\n\t\tcreateToken: function(start, value, type) {\n\t\t\tvar obj = {\n\t\t\t\tstart: start || 0,\n\t\t\t\tvalue: value || '',\n\t\t\t\ttype: type\n\t\t\t};\n\t\t\t\n\t\t\tobj.end = obj.start + obj.value.length;\n\t\t\treturn obj;\n\t\t}\n\t};\n});/**\n * CSS EditTree is a module that can parse a CSS rule into a tree with \n * convenient methods for adding, modifying and removing CSS properties. These \n * changes can be written back to string with respect of code formatting.\n * \n * @memberOf __cssEditTreeDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.define('cssEditTree', function(require, _) {\n\tvar defaultOptions = {\n\t\tstyleBefore: '\\n\\t',\n\t\tstyleSeparator: ': ',\n\t\toffset: 0\n\t};\n\t\n\tvar WHITESPACE_REMOVE_FROM_START = 1;\n\tvar WHITESPACE_REMOVE_FROM_END   = 2;\n\t\n\t/**\n\t * Returns range object\n\t * @param {Number} start\n\t * @param {Number} len \n\t * @returns {Range}\n\t */\n\tfunction range(start, len) {\n\t\treturn require('range').create(start, len);\n\t}\n\t\n\t/**\n\t * Removes whitespace tokens from the array ends\n\t * @param {Array} tokens\n\t * @param {Number} mask Mask indicating from which end whitespace should be \n\t * removed \n\t * @returns {Array}\n\t */\n\tfunction trimWhitespaceTokens(tokens, mask) {\n\t\tmask = mask || (WHITESPACE_REMOVE_FROM_START | WHITESPACE_REMOVE_FROM_END);\n\t\tvar whitespace = ['white', 'line'];\n\t\t\n\t\tif ((mask & WHITESPACE_REMOVE_FROM_END) == WHITESPACE_REMOVE_FROM_END)\n\t\t\twhile (tokens.length && _.include(whitespace, _.last(tokens).type)) {\n\t\t\t\ttokens.pop();\n\t \t\t}\n\t\t\n\t\tif ((mask & WHITESPACE_REMOVE_FROM_START) == WHITESPACE_REMOVE_FROM_START)\n\t\t\twhile (tokens.length && _.include(whitespace, tokens[0].type)) {\n\t\t\t\ttokens.shift();\n\t\t\t}\n\t\t\n\t\treturn tokens;\n\t}\n\t\n\t/**\n\t * Helper function that searches for selector range for <code>CSSEditRule</code>\n\t * @param {TokenIterator} it\n\t * @returns {Range}\n\t */\n\tfunction findSelectorRange(it) {\n\t\tvar tokens = [], token;\n \t\tvar start = it.position(), end;\n \t\t\n \t\twhile (token = it.next()) {\n\t\t\tif (token.type == '{')\n\t\t\t\tbreak;\n\t\t\ttokens.push(token);\n\t\t}\n \t\t\n \t\ttrimWhitespaceTokens(tokens);\n \t\t\n \t\tif (tokens.length) {\n \t\t\tstart = tokens[0].start;\n \t\t\tend = _.last(tokens).end;\n \t\t} else {\n \t\t\tend = start;\n \t\t}\n \t\t\n \t\treturn range(start, end - start);\n\t}\n\t\n\t/**\n\t * Helper function that searches for CSS property value range next to\n\t * iterator's current position  \n\t * @param {TokenIterator} it\n\t * @returns {Range}\n\t */\n\tfunction findValueRange(it) {\n\t\t// find value start position\n\t\tvar skipTokens = ['white', 'line', ':'];\n\t\tvar tokens = [], token, start, end;\n\t\t\n\t\tit.nextUntil(function(tok) {\n\t\t\treturn !_.include(skipTokens, this.itemNext().type);\n\t\t});\n\t\t\n\t\tstart = it.current().end;\n\t\t// consume value\n\t\twhile (token = it.next()) {\n\t\t\tif (token.type == '}' || token.type == ';') {\n\t\t\t\t// found value end\n\t\t\t\ttrimWhitespaceTokens(tokens, WHITESPACE_REMOVE_FROM_START \n\t\t\t\t\t\t| (token.type == '}' ? WHITESPACE_REMOVE_FROM_END : 0));\n\t\t\t\t\n\t\t\t\tif (tokens.length) {\n\t\t\t\t\tstart = tokens[0].start;\n\t\t\t\t\tend = _.last(tokens).end;\n\t\t\t\t} else {\n\t\t\t\t\tend = start;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn range(start, end - start);\n\t\t\t}\n\t\t\t\n\t\t\ttokens.push(token);\n\t\t}\n\t\t\n\t\t// reached the end of tokens list\n\t\tif (tokens.length) {\n\t\t\treturn range(tokens[0].start, _.last(tokens).end - tokens[0].start);\n\t\t}\n\t}\n\t\n\t/**\n\t * Finds parts of complex CSS value\n\t * @param {String} str\n\t * @returns {Array} Returns list of <code>Range</code>'s\n\t */\n\tfunction findParts(str) {\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(str);\n\t\tvar ch;\n\t\tvar result = [];\n\t\tvar sep = /[\\s\\u00a0,]/;\n\t\t\n\t\tvar add = function() {\n\t\t\tstream.next();\n\t\t\tresult.push(range(stream.start, stream.current()));\n\t\t\tstream.start = stream.pos;\n\t\t};\n\t\t\n\t\t// skip whitespace\n\t\tstream.eatSpace();\n\t\tstream.start = stream.pos;\n\t\t\n\t\twhile (ch = stream.next()) {\n\t\t\tif (ch == '\"' || ch == \"'\") {\n\t\t\t\tstream.next();\n\t\t\t\tif (!stream.skipTo(ch)) break;\n\t\t\t\tadd();\n\t\t\t} else if (ch == '(') {\n\t\t\t\t// function found, may have nested function\n\t\t\t\tstream.backUp(1);\n\t\t\t\tif (!stream.skipToPair('(', ')')) break;\n\t\t\t\tstream.backUp(1);\n\t\t\t\tadd();\n\t\t\t} else {\n\t\t\t\tif (sep.test(ch)) {\n\t\t\t\t\tresult.push(range(stream.start, stream.current().length - 1));\n\t\t\t\t\tstream.eatWhile(sep);\n\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tadd();\n\t\t\n\t\treturn _.chain(result)\n\t\t\t.filter(function(item) {\n\t\t\t\treturn !!item.length();\n\t\t\t})\n\t\t\t.uniq(false, function(item) {\n\t\t\t\treturn item.toString();\n\t\t\t})\n\t\t\t.value();\n\t}\n\t\n\t/**\n\t * A bit hacky way to identify invalid CSS property definition: when user\n\t * starts writing new abbreviation in CSS rule, he actually creates invalid\n\t * CSS property definition and this method tries to identify such abbreviation\n\t * and prevent it from being added to CSS edit tree \n\t * @param {TokenIterator} it\n\t */\n\tfunction isValidIdentifier(it) {\n//\t\treturn true;\n\t\tvar tokens = it.tokens;\n\t\tfor (var i = it._i + 1, il = tokens.length; i < il; i++) {\n\t\t\tif (tokens[i].type == ':')\n\t\t\t\treturn true;\n\t\t\t\n\t\t\tif (tokens[i].type == 'identifier' || tokens[i].type == 'line')\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * @class\n\t * @extends EditContainer\n\t */\n\tvar CSSEditContainer = require('editTree').EditContainer.extend({\n\t\tinitialize: function(source, options) {\n\t\t\t_.defaults(this.options, defaultOptions);\n\t\t\tvar editTree = require('editTree');\n\t\t\t\n\t\t\t/** @type TokenIterator */\n\t \t\tvar it = require('tokenIterator').create(\n\t \t\t\t\trequire('cssParser').parse(source));\n\t \t\t\n\t \t\tvar selectorRange = findSelectorRange(it);\n\t \t\tthis._positions.name = selectorRange.start;\n\t \t\tthis._name = selectorRange.substring(source);\n\t \t\t\n\t \t\tif (!it.current() || it.current().type != '{')\n\t \t\t\tthrow 'Invalid CSS rule';\n\t \t\t\n\t \t\tthis._positions.contentStart = it.position() + 1;\n\t \t\t\n\t \t\t// consume properties\n\t \t\tvar propertyRange, valueRange, token;\n\t\t\twhile (token = it.next()) {\n\t\t\t\tif (token.type == 'identifier' && isValidIdentifier(it)) {\n\t\t\t\t\tpropertyRange = range(token);\n\t\t\t\t\tvalueRange = findValueRange(it);\n\t\t\t\t\tvar end = (it.current() && it.current().type == ';') \n\t\t\t\t\t\t? range(it.current())\n\t\t\t\t\t\t: range(valueRange.end, 0);\n\t\t\t\t\tthis._children.push(new CSSEditElement(this,\n\t\t\t\t\t\t\teditTree.createToken(propertyRange.start, propertyRange.substring(source)),\n\t\t\t\t\t\t\teditTree.createToken(valueRange.start, valueRange.substring(source)),\n\t\t\t\t\t\t\teditTree.createToken(end.start, end.substring(source))\n\t\t\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis._saveStyle();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remembers all styles of properties\n\t\t * @private\n\t\t */\n\t\t_saveStyle: function() {\n\t\t\tvar start = this._positions.contentStart;\n\t\t\tvar source = this.source;\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\t_.each(this.list(), /** @param {CSSEditProperty} p */ function(p) {\n\t\t\t\tp.styleBefore = source.substring(start, p.namePosition());\n\t\t\t\t// a small hack here:\n\t\t\t\t// Sometimes users add empty lines before properties to logically\n\t\t\t\t// separate groups of properties. In this case, a blind copy of\n\t\t\t\t// characters between rules may lead to undesired behavior,\n\t\t\t\t// especially when current rule is duplicated or used as a donor\n\t\t\t\t// to create new rule.\n\t\t\t\t// To solve this issue, we‘ll take only last newline indentation\n\t\t\t\tvar lines = utils.splitByLines(p.styleBefore);\n\t\t\t\tif (lines.length > 1) {\n\t\t\t\t\tp.styleBefore = '\\n' + _.last(lines);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp.styleSeparator = source.substring(p.nameRange().end, p.valuePosition());\n\t\t\t\t\n\t\t\t\t// graceful and naive comments removal \n\t\t\t\tp.styleBefore = _.last(p.styleBefore.split('*/'));\n\t\t\t\tp.styleSeparator = p.styleSeparator.replace(/\\/\\*.*?\\*\\//g, '');\n\t\t\t\t\n\t\t\t\tstart = p.range().end;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new CSS property \n\t\t * @param {String} name Property name\n\t\t * @param {String} value Property value\n\t\t * @param {Number} pos Position at which to insert new property. By \n\t\t * default the property is inserted at the end of rule \n\t\t * @returns {CSSEditProperty}\n\t\t */\n\t\tadd: function(name, value, pos) {\n\t\t\tvar list = this.list();\n\t\t\tvar start = this._positions.contentStart;\n\t\t\tvar styles = _.pick(this.options, 'styleBefore', 'styleSeparator');\n\t\t\tvar editTree = require('editTree');\n\t\t\t\n\t\t\tif (_.isUndefined(pos))\n\t\t\t\tpos = list.length;\n\t\t\t\n\t\t\t/** @type CSSEditProperty */\n\t\t\tvar donor = list[pos];\n\t\t\tif (donor) {\n\t\t\t\tstart = donor.fullRange().start;\n\t\t\t} else if (donor = list[pos - 1]) {\n\t\t\t\t// make sure that donor has terminating semicolon\n\t\t\t\tdonor.end(';');\n\t\t\t\tstart = donor.range().end;\n\t\t\t}\n\t\t\t\n\t\t\tif (donor) {\n\t\t\t\tstyles = _.pick(donor, 'styleBefore', 'styleSeparator');\n\t\t\t}\n\t\t\t\n\t\t\tvar nameToken = editTree.createToken(start + styles.styleBefore.length, name);\n\t\t\tvar valueToken = editTree.createToken(nameToken.end + styles.styleSeparator.length, value);\n\t\t\t\n\t\t\tvar property = new CSSEditElement(this, nameToken, valueToken,\n\t\t\t\t\teditTree.createToken(valueToken.end, ';'));\n\t\t\t\n\t\t\t_.extend(property, styles);\n\t\t\t\n\t\t\t// write new property into the source\n\t\t\tthis._updateSource(property.styleBefore + property.toString(), start);\n\t\t\t\n\t\t\t// insert new property\n\t\t\tthis._children.splice(pos, 0, property);\n\t\t\treturn property;\n\t\t}\n\t});\n\t\n\t/**\n\t * @class\n\t * @type CSSEditElement\n\t * @constructor\n\t */\n\tvar CSSEditElement = require('editTree').EditElement.extend({\n\t\tinitialize: function(rule, name, value, end) {\n\t\t\tthis.styleBefore = rule.options.styleBefore;\n\t\t\tthis.styleSeparator = rule.options.styleSeparator;\n\t\t\t\n\t\t\tthis._end = end.value;\n\t\t\tthis._positions.end = end.start;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns ranges of complex value parts\n\t\t * @returns {Array} Returns <code>null</code> if value is not complex\n\t\t */\n\t\tvalueParts: function(isAbsolute) {\n\t\t\tvar parts = findParts(this.value());\n\t\t\tif (isAbsolute) {\n\t\t\t\tvar offset = this.valuePosition(true);\n\t\t\t\t_.each(parts, function(p) {\n\t\t\t\t\tp.shift(offset);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn parts;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Sets of gets property end value (basically, it's a semicolon)\n\t\t * @param {String} val New end value. If not passed, current \n\t\t * value is returned\n\t\t */\n\t\tend: function(val) {\n\t\t\tif (!_.isUndefined(val) && this._end !== val) {\n\t\t\t\tthis.parent._updateSource(val, this._positions.end, this._positions.end + this._end.length);\n\t\t\t\tthis._end = val;\n\t\t\t}\n\t\t\t\n\t\t\treturn this._end;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns full rule range, with indentation\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of\n\t\t * rule offset)\n\t\t * @returns {Range}\n\t\t */\n\t\tfullRange: function(isAbsolute) {\n\t\t\tvar r = this.range(isAbsolute);\n\t\t\tr.start -= this.styleBefore.length;\n\t\t\treturn r;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns item string representation\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function() {\n\t\t\treturn this.name() + this.styleSeparator + this.value() + this.end();\n\t\t}\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Parses CSS rule into editable tree\n\t\t * @param {String} source\n\t\t * @param {Object} options\n\t\t * @memberOf emmet.cssEditTree\n\t\t * @returns {EditContainer}\n\t\t */\n\t\tparse: function(source, options) {\n\t\t\treturn new CSSEditContainer(source, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extract and parse CSS rule from specified position in <code>content</code> \n\t\t * @param {String} content CSS source code\n\t\t * @param {Number} pos Character position where to start source code extraction\n\t\t * @returns {EditContainer}\n\t\t */\n\t\tparseFromPosition: function(content, pos, isBackward) {\n\t\t\tvar bounds = this.extractRule(content, pos, isBackward);\n\t\t\tif (!bounds || !bounds.inside(pos))\n\t\t\t\t// no matching CSS rule or caret outside rule bounds\n\t\t\t\treturn null;\n\t\t\t\n\t\t\treturn this.parse(bounds.substring(content), {\n\t\t\t\toffset: bounds.start\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts single CSS selector definition from source code\n\t\t * @param {String} content CSS source code\n\t\t * @param {Number} pos Character position where to start source code extraction\n\t\t * @returns {Range}\n\t\t */\n\t\textractRule: function(content, pos, isBackward) {\n\t\t\tvar result = '';\n\t\t\tvar len = content.length;\n\t\t\tvar offset = pos;\n\t\t\tvar stopChars = '{}/\\\\<>\\n\\r';\n\t\t\tvar bracePos = -1, ch;\n\t\t\t\n\t\t\t// search left until we find rule edge\n\t\t\twhile (offset >= 0) {\n\t\t\t\tch = content.charAt(offset);\n\t\t\t\tif (ch == '{') {\n\t\t\t\t\tbracePos = offset;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (ch == '}' && !isBackward) {\n\t\t\t\t\toffset++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toffset--;\n\t\t\t}\n\t\t\t\n\t\t\t// search right for full rule set\n\t\t\twhile (offset < len) {\n\t\t\t\tch = content.charAt(offset);\n\t\t\t\tif (ch == '{') {\n\t\t\t\t\tbracePos = offset;\n\t\t\t\t} else if (ch == '}') {\n\t\t\t\t\tif (bracePos != -1)\n\t\t\t\t\t\tresult = content.substring(bracePos, offset + 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toffset++;\n\t\t\t}\n\t\t\t\n\t\t\tif (result) {\n\t\t\t\t// find CSS selector\n\t\t\t\toffset = bracePos - 1;\n\t\t\t\tvar selector = '';\n\t\t\t\twhile (offset >= 0) {\n\t\t\t\t\tch = content.charAt(offset);\n\t\t\t\t\tif (stopChars.indexOf(ch) != -1) break;\n\t\t\t\t\toffset--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// also trim whitespace\n\t\t\t\tselector = content.substring(offset + 1, bracePos).replace(/^[\\s\\n\\r]+/m, '');\n\t\t\t\treturn require('range').create(bracePos - selector.length, result.length + selector.length);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t/**\n\t \t * Removes vendor prefix from CSS property\n\t \t * @param {String} name CSS property\n\t \t * @return {String}\n\t \t */\n\t \tbaseName: function(name) {\n\t \t\treturn name.replace(/^\\s*\\-\\w+\\-/, '');\n\t \t},\n\t \t\n\t \t/**\n\t \t * Finds parts of complex CSS value\n\t \t * @param {String} str\n\t \t * @returns {Array}\n\t \t */\n\t \tfindParts: findParts\n\t};\n});/**\n * XML EditTree is a module that can parse an XML/HTML element into a tree with \n * convenient methods for adding, modifying and removing attributes. These \n * changes can be written back to string with respect of code formatting.\n * \n * @memberOf __xmlEditTreeDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.define('xmlEditTree', function(require, _) {\n\tvar defaultOptions = {\n\t\tstyleBefore: ' ',\n\t\tstyleSeparator: '=',\n\t\tstyleQuote: '\"',\n\t\toffset: 0\n\t};\n\t\n\tvar startTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/m;\n\t\n\tvar XMLEditContainer = require('editTree').EditContainer.extend({\n\t\tinitialize: function(source, options) {\n\t\t\t_.defaults(this.options, defaultOptions);\n\t\t\tthis._positions.name = 1;\n\t\t\t\n\t\t\tvar attrToken = null;\n\t\t\tvar tokens = require('xmlParser').parse(source);\n\t\t\tvar range = require('range');\n\t\t\t\n\t\t\t_.each(tokens, function(token) {\n\t\t\t\ttoken.value = range.create(token).substring(source);\n\t\t\t\tswitch (token.type) {\n\t\t\t\t\tcase 'tag':\n\t\t\t\t\t\tif (/^<[^\\/]+/.test(token.value)) {\n\t\t\t\t\t\t\tthis._name = token.value.substring(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 'attribute':\n\t\t\t\t\t\t// add empty attribute\n\t\t\t\t\t\tif (attrToken) {\n\t\t\t\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tattrToken = token;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken, token));\n\t\t\t\t\t\tattrToken = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\t\t\tif (attrToken) {\n\t\t\t\tthis._children.push(new XMLEditElement(this, attrToken));\n\t\t\t}\n\t\t\t\n\t\t\tthis._saveStyle();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Remembers all styles of properties\n\t\t * @private\n\t\t */\n\t\t_saveStyle: function() {\n\t\t\tvar start = this.nameRange().end;\n\t\t\tvar source = this.source;\n\t\t\t\n\t\t\t_.each(this.list(), /** @param {EditElement} p */ function(p) {\n\t\t\t\tp.styleBefore = source.substring(start, p.namePosition());\n\t\t\t\t\n\t\t\t\tif (p.valuePosition() !== -1) {\n\t\t\t\t\tp.styleSeparator = source.substring(p.namePosition() + p.name().length, p.valuePosition() - p.styleQuote.length);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstart = p.range().end;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new attribute \n\t\t * @param {String} name Property name\n\t\t * @param {String} value Property value\n\t\t * @param {Number} pos Position at which to insert new property. By \n\t\t * default the property is inserted at the end of rule \n\t\t */\n\t\tadd: function(name, value, pos) {\n\t\t\tvar list = this.list();\n\t\t\tvar start = this.nameRange().end;\n\t\t\tvar editTree = require('editTree');\n\t\t\tvar styles = _.pick(this.options, 'styleBefore', 'styleSeparator', 'styleQuote');\n\t\t\t\n\t\t\tif (_.isUndefined(pos))\n\t\t\t\tpos = list.length;\n\t\t\t\n\t\t\t\n\t\t\t/** @type XMLEditAttribute */\n\t\t\tvar donor = list[pos];\n\t\t\tif (donor) {\n\t\t\t\tstart = donor.fullRange().start;\n\t\t\t} else if (donor = list[pos - 1]) {\n\t\t\t\tstart = donor.range().end;\n\t\t\t}\n\t\t\t\n\t\t\tif (donor) {\n\t\t\t\tstyles = _.pick(donor, 'styleBefore', 'styleSeparator', 'styleQuote');\n\t\t\t}\n\t\t\t\n\t\t\tvalue = styles.styleQuote + value + styles.styleQuote;\n\t\t\t\n\t\t\tvar attribute = new XMLEditElement(this, \n\t\t\t\t\teditTree.createToken(start + styles.styleBefore.length, name),\n\t\t\t\t\teditTree.createToken(start + styles.styleBefore.length + name.length \n\t\t\t\t\t\t\t+ styles.styleSeparator.length, value)\n\t\t\t\t\t);\n\t\t\t\n\t\t\t_.extend(attribute, styles);\n\t\t\t\n\t\t\t// write new attribute into the source\n\t\t\tthis._updateSource(attribute.styleBefore + attribute.toString(), start);\n\t\t\t\n\t\t\t// insert new attribute\n\t\t\tthis._children.splice(pos, 0, attribute);\n\t\t\treturn attribute;\n\t\t}\n\t});\n\t\n\tvar XMLEditElement = require('editTree').EditElement.extend({\n\t\tinitialize: function(parent, nameToken, valueToken) {\n\t\t\tthis.styleBefore = parent.options.styleBefore;\n\t\t\tthis.styleSeparator = parent.options.styleSeparator;\n\t\t\t\n\t\t\tvar value = '', quote = parent.options.styleQuote;\n\t\t\tif (valueToken) {\n\t\t\t\tvalue = valueToken.value;\n\t\t\t\tquote = value.charAt(0);\n\t\t\t\tif (quote == '\"' || quote == \"'\") {\n\t\t\t\t\tvalue = value.substring(1);\n\t\t\t\t} else {\n\t\t\t\t\tquote = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (quote && value.charAt(value.length - 1) == quote) {\n\t\t\t\t\tvalue = value.substring(0, value.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.styleQuote = quote;\n\t\t\t\n\t\t\tthis._value = value;\n\t\t\tthis._positions.value = valueToken ? valueToken.start + quote.length : -1;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns full rule range, with indentation\n\t\t * @param {Boolean} isAbsolute Return absolute range (with respect of\n\t\t * rule offset)\n\t\t * @returns {Range}\n\t\t */\n\t\tfullRange: function(isAbsolute) {\n\t\t\tvar r = this.range(isAbsolute);\n\t\t\tr.start -= this.styleBefore.length;\n\t\t\treturn r;\n\t\t},\n\t\t\n\t\ttoString: function() {\n\t\t\treturn this.name() + this.styleSeparator\n\t\t\t\t+ this.styleQuote + this.value() + this.styleQuote;\n\t\t}\n\t});\n\t\n\treturn {\n\t\t/**\n\t\t * Parses HTML element into editable tree\n\t\t * @param {String} source\n\t\t * @param {Object} options\n\t\t * @memberOf emmet.htmlEditTree\n\t\t * @returns {EditContainer}\n\t\t */\n\t\tparse: function(source, options) {\n\t\t\treturn new XMLEditContainer(source, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extract and parse HTML from specified position in <code>content</code> \n\t\t * @param {String} content CSS source code\n\t\t * @param {Number} pos Character position where to start source code extraction\n\t\t * @returns {XMLEditElement}\n\t\t */\n\t\tparseFromPosition: function(content, pos, isBackward) {\n\t\t\tvar bounds = this.extractTag(content, pos, isBackward);\n\t\t\tif (!bounds || !bounds.inside(pos))\n\t\t\t\t// no matching HTML tag or caret outside tag bounds\n\t\t\t\treturn null;\n\t\t\t\n\t\t\treturn this.parse(bounds.substring(content), {\n\t\t\t\toffset: bounds.start\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts nearest HTML tag range from <code>content</code>, starting at \n\t\t * <code>pos</code> position\n\t\t * @param {String} content\n\t\t * @param {Number} pos\n\t\t * @param {Boolean} isBackward\n\t\t * @returns {Range}\n\t\t */\n\t\textractTag: function(content, pos, isBackward) {\n\t\t\tvar len = content.length, i;\n\t\t\tvar range = require('range');\n\t\t\t\n\t\t\t// max extraction length. I don't think there may be tags larger \n\t\t\t// than 2000 characters length\n\t\t\tvar maxLen = Math.min(2000, len);\n\t\t\t\n\t\t\t/** @type Range */\n\t\t\tvar r = null;\n\t\t\t\n\t\t\tvar match = function(pos) {\n\t\t\t\tvar m;\n\t\t\t\tif (content.charAt(pos) == '<' && (m = content.substr(pos, maxLen).match(startTag)))\n\t\t\t\t\treturn range.create(pos, m[0]);\n\t\t\t};\n\t\t\t\n\t\t\t// lookup backward, in case we are inside tag already\n\t\t\tfor (i = pos; i >= 0; i--) {\n\t\t\t\tif (r = match(i)) break;\n\t\t\t}\n\t\t\t\n\t\t\tif (r && (r.inside(pos) || isBackward))\n\t\t\t\treturn r;\n\t\t\t\n\t\t\tif (!r && isBackward)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\t// search forward\n\t\t\tfor (i = pos; i < len; i++) {\n\t\t\t\tif (r = match(i))\n\t\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t};\n});/**\n * 'Expand abbreviation' editor action: extracts abbreviation from current caret \n * position and replaces it with formatted output. \n * <br><br>\n * This behavior can be overridden with custom handlers which can perform \n * different actions when 'Expand Abbreviation' action is called.\n * For example, a CSS gradient handler that produces vendor-prefixed gradient\n * definitions registers its own expand abbreviation handler.  \n *  \n * @constructor\n * @memberOf __expandAbbreviationActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('expandAbbreviation', function(require, _) {\n\t/**\n\t * @type HandlerList List of registered handlers\n\t */\n\tvar handlers = require('handlerList').create();\n\t\n\t/** Back-reference to module */\n\tvar module = null;\n\t\n\tvar actions = require('actions');\n\t/**\n\t * 'Expand abbreviation' editor action \n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t * @return {Boolean} Returns <code>true</code> if abbreviation was expanded \n\t * successfully\n\t */\n\tactions.add('expand_abbreviation', function(editor, syntax, profile) {\n\t\tvar args = _.toArray(arguments);\n\t\t\n\t\t// normalize incoming arguments\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\n\t\targs[1] = info.syntax;\n\t\targs[2] = info.profile;\n\t\t\n\t\treturn handlers.exec(false, args);\n\t});\n\t\n\t/**\n\t * A special version of <code>expandAbbreviation</code> function: if it can't\n\t * find abbreviation, it will place Tab character at caret position\n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t */\n\tactions.add('expand_abbreviation_with_tab', function(editor, syntax, profile) {\n\t\tvar sel = editor.getSelection();\n\t\tvar indent = require('resources').getVariable('indentation');\n\t\tif (sel) {\n\t\t\t// indent selection\n\t\t\tvar utils = require('utils');\n\t\t\tvar selRange = require('range').create(editor.getSelectionRange());\n\t\t\tvar content = utils.padString(sel, indent);\n\t\t\t\n\t\t\teditor.replaceContent(indent + '${0}', editor.getCaretPos());\n\t\t\tvar replaceRange = require('range').create(editor.getCaretPos(), selRange.length());\n\t\t\teditor.replaceContent(content, replaceRange.start, replaceRange.end, true);\n\t\t\teditor.createSelection(replaceRange.start, replaceRange.start + content.length);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (!actions.run('expand_abbreviation', editor, syntax, profile)) {\n\t\t\teditor.replaceContent(indent, editor.getCaretPos());\n\t\t}\n\t\t\n\t\treturn true;\n\t}, {hidden: true});\n\t\n\t// XXX setup default handler\n\t/**\n\t * Extracts abbreviation from current caret \n\t * position and replaces it with formatted output \n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t * @return {Boolean} Returns <code>true</code> if abbreviation was expanded \n\t * successfully\n\t */\n\thandlers.add(function(editor, syntax, profile) {\n\t\tvar caretPos = editor.getSelectionRange().end;\n\t\tvar abbr = module.findAbbreviation(editor);\n\t\t\t\n\t\tif (abbr) {\n\t\t\tvar content = emmet.expandAbbreviation(abbr, syntax, profile, \n\t\t\t\t\trequire('actionUtils').captureContext(editor));\n\t\t\tif (content) {\n\t\t\t\teditor.replaceContent(content, caretPos - abbr.length, caretPos);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {order: -1});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Adds custom expand abbreviation handler. The passed function should \n\t\t * return <code>true</code> if it was performed successfully, \n\t\t * <code>false</code> otherwise.\n\t\t * \n\t\t * Added handlers will be called when 'Expand Abbreviation' is called\n\t\t * in order they were added\n\t\t * @memberOf expandAbbreviation\n\t\t * @param {Function} fn\n\t\t * @param {Object} options\n\t\t */\n\t\taddHandler: function(fn, options) {\n\t\t\thandlers.add(fn, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered handler\n\t\t * @returns\n\t\t */\n\t\tremoveHandler: function(fn) {\n\t\t\thandlers.remove(fn, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Search for abbreviation in editor from current caret position\n\t\t * @param {IEmmetEditor} editor Editor instance\n\t\t * @return {String}\n\t\t */\n\t\tfindAbbreviation: function(editor) {\n\t\t\t/** @type Range */\n\t\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\t\tvar content = String(editor.getContent());\n\t\t\tif (range.length()) {\n\t\t\t\t// abbreviation is selected by user\n\t\t\t\treturn range.substring(content);\n\t\t\t}\n\t\t\t\n\t\t\t// search for new abbreviation from current caret position\n\t\t\tvar curLine = editor.getCurrentLineRange();\n\t\t\treturn require('actionUtils').extractAbbreviation(content.substring(curLine.start, range.start));\n\t\t}\n\t};\n});/**\n * Action that wraps content with abbreviation. For convenience, action is \n * defined as reusable module\n * @constructor\n * @memberOf __wrapWithAbbreviationDefine\n */\nemmet.define('wrapWithAbbreviation', function(require, _) {\n\t/** Back-references to current module */\n\tvar module = null;\n\t\n\t/**\n\t * Wraps content with abbreviation\n\t * @param {IEmmetEditor} Editor instance\n\t * @param {String} abbr Abbreviation to wrap with\n\t * @param {String} syntax Syntax type (html, css, etc.)\n\t * @param {String} profile Output profile name (html, xml, xhtml)\n\t */\n\trequire('actions').add('wrap_with_abbreviation', function (editor, abbr, syntax, profile) {\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\n\t\tvar utils = require('utils');\n\t\t/** @type emmet.editorUtils */\n\t\tvar editorUtils = require('editorUtils');\n\t\tabbr = abbr || editor.prompt(\"Enter abbreviation\");\n\t\t\n\t\tif (!abbr) \n\t\t\treturn null;\n\t\t\n\t\tabbr = String(abbr);\n\t\t\n\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\t\n\t\tif (!range.length()) {\n\t\t\t// no selection, find tag pair\n\t\t\tvar match = require('htmlMatcher').tag(info.content, range.start);\n\t\t\tif (!match) {  // nothing to wrap\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\trange = utils.narrowToNonSpace(info.content, match.range);\n\t\t}\n\t\t\n\t\tvar newContent = utils.escapeText(range.substring(info.content));\n\t\tvar result = module\n\t\t\t.wrap(abbr, editorUtils.unindent(editor, newContent), info.syntax, \n\t\t\t\t\tinfo.profile, require('actionUtils').captureContext(editor));\n\t\t\n\t\tif (result) {\n\t\t\teditor.replaceContent(result, range.start, range.end);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Wraps passed text with abbreviation. Text will be placed inside last\n\t\t * expanded element\n\t\t * @memberOf wrapWithAbbreviation\n\t\t * @param {String} abbr Abbreviation\n\t\t * @param {String} text Text to wrap\n\t\t * @param {String} syntax Document type (html, xml, etc.). Default is 'html'\n\t\t * @param {String} profile Output profile's name. Default is 'plain'\n\t\t * @param {Object} contextNode Context node inside which abbreviation\n\t\t * is wrapped. It will be used as a reference for node name resolvers\n\t\t * @return {String}\n\t\t */\n\t\twrap: function(abbr, text, syntax, profile, contextNode) {\n\t\t\t/** @type emmet.filters */\n\t\t\tvar filters = require('filters');\n\t\t\t/** @type emmet.utils */\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\tsyntax = syntax || emmet.defaultSyntax();\n\t\t\tprofile = require('profile').get(profile, syntax);\n\t\t\t\n\t\t\trequire('tabStops').resetTabstopIndex();\n\t\t\t\n\t\t\tvar data = filters.extractFromAbbreviation(abbr);\n\t\t\tvar parsedTree = require('abbreviationParser').parse(data[0], {\n\t\t\t\tsyntax: syntax,\n\t\t\t\tpastedContent: text,\n\t\t\t\tcontextNode: contextNode\n\t\t\t});\n\t\t\tif (parsedTree) {\n\t\t\t\tvar filtersList = filters.composeList(syntax, profile, data[1]);\n\t\t\t\tfilters.apply(parsedTree, filtersList, profile);\n\t\t\t\treturn utils.replaceVariables(parsedTree.toString());\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t};\n});/**\n * Toggles HTML and CSS comments depending on current caret context. Unlike\n * the same action in most editors, this action toggles comment on currently\n * matched item—HTML tag or CSS selector—when nothing is selected.\n * \n * @param {Function} require\n * @param {Underscore} _\n * @memberOf __toggleCommentAction\n * @constructor\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Toggle HTML comment on current selection or tag\n\t * @param {IEmmetEditor} editor\n\t * @return {Boolean} Returns <code>true</code> if comment was toggled\n\t */\n\tfunction toggleHTMLComment(editor) {\n\t\t/** @type Range */\n\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\t\n\t\tif (!range.length()) {\n\t\t\t// no selection, find matching tag\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, editor.getCaretPos());\n\t\t\tif (tag) { // found pair\n\t\t\t\trange = tag.outerRange;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn genericCommentToggle(editor, '<!--', '-->', range);\n\t}\n\n\t/**\n\t * Simple CSS commenting\n\t * @param {IEmmetEditor} editor\n\t * @return {Boolean} Returns <code>true</code> if comment was toggled\n\t */\n\tfunction toggleCSSComment(editor) {\n\t\t/** @type Range */\n\t\tvar range = require('range').create(editor.getSelectionRange());\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\t\n\t\tif (!range.length()) {\n\t\t\t// no selection, try to get current rule\n\t\t\t/** @type CSSRule */\n\t\t\tvar rule = require('cssEditTree').parseFromPosition(info.content, editor.getCaretPos());\n\t\t\tif (rule) {\n\t\t\t\tvar property = cssItemFromPosition(rule, editor.getCaretPos());\n\t\t\t\trange = property \n\t\t\t\t\t? property.range(true) \n\t\t\t\t\t: require('range').create(rule.nameRange(true).start, rule.source);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!range.length()) {\n\t\t\t// still no selection, get current line\n\t\t\trange = require('range').create(editor.getCurrentLineRange());\n\t\t\trequire('utils').narrowToNonSpace(info.content, range);\n\t\t}\n\t\t\n\t\treturn genericCommentToggle(editor, '/*', '*/', range);\n\t}\n\t\n\t/**\n\t * Returns CSS property from <code>rule</code> that matches passed position\n\t * @param {EditContainer} rule\n\t * @param {Number} absPos\n\t * @returns {EditElement}\n\t */\n\tfunction cssItemFromPosition(rule, absPos) {\n\t\t// do not use default EditContainer.itemFromPosition() here, because\n\t\t// we need to make a few assumptions to make CSS commenting more reliable\n\t\tvar relPos = absPos - (rule.options.offset || 0);\n\t\tvar reSafeChar = /^[\\s\\n\\r]/;\n\t\treturn _.find(rule.list(), function(item) {\n\t\t\tif (item.range().end === relPos) {\n\t\t\t\t// at the end of property, but outside of it\n\t\t\t\t// if there’s a space character at current position,\n\t\t\t\t// use current property\n\t\t\t\treturn reSafeChar.test(rule.source.charAt(relPos));\n\t\t\t}\n\t\t\t\n\t\t\treturn item.range().inside(relPos);\n\t\t});\n\t}\n\n\t/**\n\t * Search for nearest comment in <code>str</code>, starting from index <code>from</code>\n\t * @param {String} text Where to search\n\t * @param {Number} from Search start index\n\t * @param {String} start_token Comment start string\n\t * @param {String} end_token Comment end string\n\t * @return {Range} Returns null if comment wasn't found\n\t */\n\tfunction searchComment(text, from, startToken, endToken) {\n\t\tvar commentStart = -1;\n\t\tvar commentEnd = -1;\n\t\t\n\t\tvar hasMatch = function(str, start) {\n\t\t\treturn text.substr(start, str.length) == str;\n\t\t};\n\t\t\t\n\t\t// search for comment start\n\t\twhile (from--) {\n\t\t\tif (hasMatch(startToken, from)) {\n\t\t\t\tcommentStart = from;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (commentStart != -1) {\n\t\t\t// search for comment end\n\t\t\tfrom = commentStart;\n\t\t\tvar contentLen = text.length;\n\t\t\twhile (contentLen >= from++) {\n\t\t\t\tif (hasMatch(endToken, from)) {\n\t\t\t\t\tcommentEnd = from + endToken.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (commentStart != -1 && commentEnd != -1) \n\t\t\t? require('range').create(commentStart, commentEnd - commentStart) \n\t\t\t: null;\n\t}\n\n\t/**\n\t * Generic comment toggling routine\n\t * @param {IEmmetEditor} editor\n\t * @param {String} commentStart Comment start token\n\t * @param {String} commentEnd Comment end token\n\t * @param {Range} range Selection range\n\t * @return {Boolean}\n\t */\n\tfunction genericCommentToggle(editor, commentStart, commentEnd, range) {\n\t\tvar editorUtils = require('editorUtils');\n\t\tvar content = editorUtils.outputInfo(editor).content;\n\t\tvar caretPos = editor.getCaretPos();\n\t\tvar newContent = null;\n\t\t\n\t\tvar utils = require('utils');\n\t\t\t\n\t\t/**\n\t\t * Remove comment markers from string\n\t\t * @param {Sting} str\n\t\t * @return {String}\n\t\t */\n\t\tfunction removeComment(str) {\n\t\t\treturn str\n\t\t\t\t.replace(new RegExp('^' + utils.escapeForRegexp(commentStart) + '\\\\s*'), function(str){\n\t\t\t\t\tcaretPos -= str.length;\n\t\t\t\t\treturn '';\n\t\t\t\t}).replace(new RegExp('\\\\s*' + utils.escapeForRegexp(commentEnd) + '$'), '');\n\t\t}\n\t\t\n\t\t// first, we need to make sure that this substring is not inside \n\t\t// comment\n\t\tvar commentRange = searchComment(content, caretPos, commentStart, commentEnd);\n\t\tif (commentRange && commentRange.overlap(range)) {\n\t\t\t// we're inside comment, remove it\n\t\t\trange = commentRange;\n\t\t\tnewContent = removeComment(range.substring(content));\n\t\t} else {\n\t\t\t// should add comment\n\t\t\t// make sure that there's no comment inside selection\n\t\t\tnewContent = commentStart + ' ' +\n\t\t\t\trange.substring(content)\n\t\t\t\t\t.replace(new RegExp(utils.escapeForRegexp(commentStart) + '\\\\s*|\\\\s*' + utils.escapeForRegexp(commentEnd), 'g'), '') +\n\t\t\t\t' ' + commentEnd;\n\t\t\t\t\n\t\t\t// adjust caret position\n\t\t\tcaretPos += commentStart.length + 1;\n\t\t}\n\n\t\t// replace editor content\n\t\tif (newContent !== null) {\n\t\t\tnewContent = utils.escapeText(newContent);\n\t\t\teditor.setCaretPos(range.start);\n\t\t\teditor.replaceContent(editorUtils.unindent(editor, newContent), range.start, range.end);\n\t\t\teditor.setCaretPos(caretPos);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Toggle comment on current editor's selection or HTML tag/CSS rule\n\t * @param {IEmmetEditor} editor\n\t */\n\trequire('actions').add('toggle_comment', function(editor) {\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tif (info.syntax == 'css') {\n\t\t\t// in case our editor is good enough and can recognize syntax from \n\t\t\t// current token, we have to make sure that cursor is not inside\n\t\t\t// 'style' attribute of html element\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, caretPos);\n\t\t\tif (tag && tag.open.range.inside(caretPos)) {\n\t\t\t\tinfo.syntax = 'html';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (info.syntax == 'css')\n\t\t\treturn toggleCSSComment(editor);\n\t\t\n\t\treturn toggleHTMLComment(editor);\n\t});\n});/**\n * Move between next/prev edit points. 'Edit points' are places between tags \n * and quotes of empty attributes in html\n * @constructor\n * \n * @memberOf __editPointActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Search for new caret insertion point\n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {Number} inc Search increment: -1 — search left, 1 — search right\n\t * @param {Number} offset Initial offset relative to current caret position\n\t * @return {Number} Returns -1 if insertion point wasn't found\n\t */\n\tfunction findNewEditPoint(editor, inc, offset) {\n\t\tinc = inc || 1;\n\t\toffset = offset || 0;\n\t\t\n\t\tvar curPoint = editor.getCaretPos() + offset;\n\t\tvar content = String(editor.getContent());\n\t\tvar maxLen = content.length;\n\t\tvar nextPoint = -1;\n\t\tvar reEmptyLine = /^\\s+$/;\n\t\t\n\t\tfunction getLine(ix) {\n\t\t\tvar start = ix;\n\t\t\twhile (start >= 0) {\n\t\t\t\tvar c = content.charAt(start);\n\t\t\t\tif (c == '\\n' || c == '\\r')\n\t\t\t\t\tbreak;\n\t\t\t\tstart--;\n\t\t\t}\n\t\t\t\n\t\t\treturn content.substring(start, ix);\n\t\t}\n\t\t\t\n\t\twhile (curPoint <= maxLen && curPoint >= 0) {\n\t\t\tcurPoint += inc;\n\t\t\tvar curChar = content.charAt(curPoint);\n\t\t\tvar nextChar = content.charAt(curPoint + 1);\n\t\t\tvar prevChar = content.charAt(curPoint - 1);\n\t\t\t\t\n\t\t\tswitch (curChar) {\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\tif (nextChar == curChar && prevChar == '=') {\n\t\t\t\t\t\t// empty attribute\n\t\t\t\t\t\tnextPoint = curPoint + 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '>':\n\t\t\t\t\tif (nextChar == '<') {\n\t\t\t\t\t\t// between tags\n\t\t\t\t\t\tnextPoint = curPoint + 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\n':\n\t\t\t\tcase '\\r':\n\t\t\t\t\t// empty line\n\t\t\t\t\tif (reEmptyLine.test(getLine(curPoint - 1))) {\n\t\t\t\t\t\tnextPoint = curPoint;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (nextPoint != -1)\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn nextPoint;\n\t}\n\t\n\t/** @type emmet.actions */\n\tvar actions = require('actions');\n\t\n\t/**\n\t * Move caret to previous edit point\n\t * @param {IEmmetEditor} editor Editor instance\n\t */\n\tactions.add('prev_edit_point', function(editor) {\n\t\tvar curPos = editor.getCaretPos();\n\t\tvar newPoint = findNewEditPoint(editor, -1);\n\t\t\t\n\t\tif (newPoint == curPos)\n\t\t\t// we're still in the same point, try searching from the other place\n\t\t\tnewPoint = findNewEditPoint(editor, -1, -2);\n\t\t\n\t\tif (newPoint != -1) {\n\t\t\teditor.setCaretPos(newPoint);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'Previous Edit Point'});\n\t\n\t/**\n\t * Move caret to next edit point\n\t * @param {IEmmetEditor} editor Editor instance\n\t */\n\tactions.add('next_edit_point', function(editor) {\n\t\tvar newPoint = findNewEditPoint(editor, 1);\n\t\tif (newPoint != -1) {\n\t\t\teditor.setCaretPos(newPoint);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n});/**\n * Actions that use stream parsers and tokenizers for traversing:\n * -- Search for next/previous items in HTML\n * -- Search for next/previous items in CSS\n * @constructor\n * @memberOf __selectItemActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar startTag = /^<([\\w\\:\\-]+)((?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\n\t\n\t/**\n\t * Generic function for searching for items to select\n\t * @param {IEmmetEditor} editor\n\t * @param {Boolean} isBackward Search backward (search forward otherwise)\n\t * @param {Function} extractFn Function that extracts item content\n\t * @param {Function} rangeFn Function that search for next token range\n\t */\n\tfunction findItem(editor, isBackward, extractFn, rangeFn) {\n\t\tvar range = require('range');\n\t\tvar content = require('editorUtils').outputInfo(editor).content;\n\t\t\n\t\tvar contentLength = content.length;\n\t\tvar itemRange, rng;\n\t\t/** @type Range */\n\t\tvar prevRange = range.create(-1, 0);\n\t\t/** @type Range */\n\t\tvar sel = range.create(editor.getSelectionRange());\n\t\t\n\t\tvar searchPos = sel.start, loop = 100000; // endless loop protection\n\t\twhile (searchPos >= 0 && searchPos < contentLength && --loop > 0) {\n\t\t\tif ( (itemRange = extractFn(content, searchPos, isBackward)) ) {\n\t\t\t\tif (prevRange.equal(itemRange)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tprevRange = itemRange.clone();\n\t\t\t\trng = rangeFn(itemRange.substring(content), itemRange.start, sel.clone());\n\t\t\t\t\n\t\t\t\tif (rng) {\n\t\t\t\t\teditor.createSelection(rng.start, rng.end);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tsearchPos = isBackward ? itemRange.start : itemRange.end - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsearchPos += isBackward ? -1 : 1;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t// XXX HTML section\n\t\n\t/**\n\t * Find next HTML item\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction findNextHTMLItem(editor) {\n\t\tvar isFirst = true;\n\t\treturn findItem(editor, false, function(content, searchPos){\n\t\t\tif (isFirst) {\n\t\t\t\tisFirst = false;\n\t\t\t\treturn findOpeningTagFromPosition(content, searchPos);\n\t\t\t} else {\n\t\t\t\treturn getOpeningTagFromPosition(content, searchPos);\n\t\t\t}\n\t\t}, function(tag, offset, selRange) {\n\t\t\treturn getRangeForHTMLItem(tag, offset, selRange, false);\n\t\t});\n\t}\n\t\n\t/**\n\t * Find previous HTML item\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction findPrevHTMLItem(editor) {\n\t\treturn findItem(editor, true, getOpeningTagFromPosition, function (tag, offset, selRange) {\n\t\t\treturn getRangeForHTMLItem(tag, offset, selRange, true);\n\t\t});\n\t}\n\t\n\t/**\n\t * Creates possible selection ranges for HTML tag\n\t * @param {String} source Original HTML source for tokens\n\t * @param {Array} tokens List of HTML tokens\n\t * @returns {Array}\n\t */\n\tfunction makePossibleRangesHTML(source, tokens, offset) {\n\t\toffset = offset || 0;\n\t\tvar range = require('range');\n\t\tvar result = [];\n\t\tvar attrStart = -1, attrName = '', attrValue = '', attrValueRange, tagName;\n\t\t_.each(tokens, function(tok) {\n\t\t\tswitch (tok.type) {\n\t\t\t\tcase 'tag':\n\t\t\t\t\ttagName = source.substring(tok.start, tok.end);\n\t\t\t\t\tif (/^<[\\w\\:\\-]/.test(tagName)) {\n\t\t\t\t\t\t// add tag name\n\t\t\t\t\t\tresult.push(range.create({\n\t\t\t\t\t\t\tstart: tok.start + 1, \n\t\t\t\t\t\t\tend: tok.end\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'attribute':\n\t\t\t\t\tattrStart = tok.start;\n\t\t\t\t\tattrName = source.substring(tok.start, tok.end);\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 'string':\n\t\t\t\t\t// attribute value\n\t\t\t\t\t// push full attribute first\n\t\t\t\t\t result.push(range.create(attrStart, tok.end - attrStart));\n\t\t\t\t\t \n\t\t\t\t\t attrValueRange = range.create(tok);\n\t\t\t\t\t attrValue = attrValueRange.substring(source);\n\t\t\t\t\t \n\t\t\t\t\t // is this a quoted attribute?\n\t\t\t\t\t if (isQuote(attrValue.charAt(0)))\n\t\t\t\t\t\t attrValueRange.start++;\n\t\t\t\t\t \n\t\t\t\t\t if (isQuote(attrValue.charAt(attrValue.length - 1)))\n\t\t\t\t\t\t attrValueRange.end--;\n\t\t\t\t\t \n\t\t\t\t\t result.push(attrValueRange);\n\t\t\t\t\t \n\t\t\t\t\t if (attrName == 'class') {\n\t\t\t\t\t\t result = result.concat(classNameRanges(attrValueRange.substring(source), attrValueRange.start));\n\t\t\t\t\t }\n\t\t\t\t\t \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// offset ranges\n\t\t_.each(result, function(r) {\n\t\t\tr.shift(offset);\n\t\t});\n\t\t\n\t\treturn _.chain(result)\n\t\t\t.filter(function(item) {        // remove empty\n\t\t\t\treturn !!item.length();\n\t\t\t})\n\t\t\t.uniq(false, function(item) {   // remove duplicates\n\t\t\t\treturn item.toString();\n\t\t\t})\n\t\t\t.value();\n\t}\n\t\n\t/**\n\t * Returns ranges of class names in \"class\" attribute value\n\t * @param {String} className\n\t * @returns {Array}\n\t */\n\tfunction classNameRanges(className, offset) {\n\t\toffset = offset || 0;\n\t\tvar result = [];\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(className);\n\t\tvar range = require('range');\n\t\t\n\t\t// skip whitespace\n\t\tstream.eatSpace();\n\t\tstream.start = stream.pos;\n\t\t\n\t\tvar ch;\n\t\twhile (ch = stream.next()) {\n\t\t\tif (/[\\s\\u00a0]/.test(ch)) {\n\t\t\t\tresult.push(range.create(stream.start + offset, stream.pos - stream.start - 1));\n\t\t\t\tstream.eatSpace();\n\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult.push(range.create(stream.start + offset, stream.pos - stream.start));\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Returns best HTML tag range match for current selection\n\t * @param {String} tag Tag declaration\n\t * @param {Number} offset Tag's position index inside content\n\t * @param {Range} selRange Selection range\n\t * @return {Range} Returns range if next item was found, <code>null</code> otherwise\n\t */\n\tfunction getRangeForHTMLItem(tag, offset, selRange, isBackward) {\n\t\tvar ranges = makePossibleRangesHTML(tag, require('xmlParser').parse(tag), offset);\n\t\t\n\t\tif (isBackward)\n\t\t\tranges.reverse();\n\t\t\n\t\t// try to find selected range\n\t\tvar curRange = _.find(ranges, function(r) {\n\t\t\treturn r.equal(selRange);\n\t\t});\n\t\t\n\t\tif (curRange) {\n\t\t\tvar ix = _.indexOf(ranges, curRange);\n\t\t\tif (ix < ranges.length - 1)\n\t\t\t\treturn ranges[ix + 1];\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// no selected range, find nearest one\n\t\tif (isBackward)\n\t\t\t// search backward\n\t\t\treturn _.find(ranges, function(r) {\n\t\t\t\treturn r.start < selRange.start;\n\t\t\t});\n\t\t\n\t\t// search forward\n\t\t// to deal with overlapping ranges (like full attribute definition\n\t\t// and attribute value) let's find range under caret first\n\t\tif (!curRange) {\n\t\t\tvar matchedRanges = _.filter(ranges, function(r) {\n\t\t\t\treturn r.inside(selRange.end);\n\t\t\t});\n\t\t\t\n\t\t\tif (matchedRanges.length > 1)\n\t\t\t\treturn matchedRanges[1];\n\t\t}\n\t\t\n\t\t\n\t\treturn _.find(ranges, function(r) {\n\t\t\treturn r.end > selRange.end;\n\t\t});\n\t}\n\t\n\t/**\n\t * Search for opening tag in content, starting at specified position\n\t * @param {String} html Where to search tag\n\t * @param {Number} pos Character index where to start searching\n\t * @return {Range} Returns range if valid opening tag was found,\n\t * <code>null</code> otherwise\n\t */\n\tfunction findOpeningTagFromPosition(html, pos) {\n\t\tvar tag;\n\t\twhile (pos >= 0) {\n\t\t\tif (tag = getOpeningTagFromPosition(html, pos))\n\t\t\t\treturn tag;\n\t\t\tpos--;\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * @param {String} html Where to search tag\n\t * @param {Number} pos Character index where to start searching\n\t * @return {Range} Returns range if valid opening tag was found,\n\t * <code>null</code> otherwise\n\t */\n\tfunction getOpeningTagFromPosition(html, pos) {\n\t\tvar m;\n\t\tif (html.charAt(pos) == '<' && (m = html.substring(pos, html.length).match(startTag))) {\n\t\t\treturn require('range').create(pos, m[0]);\n\t\t}\n\t}\n\t\n\tfunction isQuote(ch) {\n\t\treturn ch == '\"' || ch == \"'\";\n\t}\n\t\n\t/**\n\t * Makes all possible selection ranges for specified CSS property\n\t * @param {CSSProperty} property\n\t * @returns {Array}\n\t */\n\tfunction makePossibleRangesCSS(property) {\n\t\t// find all possible ranges, sorted by position and size\n\t\tvar valueRange = property.valueRange(true);\n\t\tvar result = [property.range(true), valueRange];\n\t\tvar stringStream = require('stringStream');\n\t\tvar cssEditTree = require('cssEditTree');\n\t\tvar range = require('range');\n\t\t\n\t\t// locate parts of complex values.\n\t\t// some examples:\n\t\t// – 1px solid red: 3 parts\n\t\t// – arial, sans-serif: enumeration, 2 parts\n\t\t// – url(image.png): function value part\n\t\tvar value = property.value();\n\t\t_.each(property.valueParts(), function(r) {\n\t\t\t// add absolute range\n\t\t\tvar clone = r.clone();\n\t\t\tresult.push(clone.shift(valueRange.start));\n\t\t\t\n\t\t\t/** @type StringStream */\n\t\t\tvar stream = stringStream.create(r.substring(value));\n\t\t\tif (stream.match(/^[\\w\\-]+\\(/, true)) {\n\t\t\t\t// we have a function, find values in it.\n\t\t\t\t// but first add function contents\n\t\t\t\tstream.start = stream.pos;\n\t\t\t\tstream.skipToPair('(', ')');\n\t\t\t\tvar fnBody = stream.current();\n\t\t\t\tresult.push(range.create(clone.start + stream.start, fnBody));\n\t\t\t\t\n\t\t\t\t// find parts\n\t\t\t\t_.each(cssEditTree.findParts(fnBody), function(part) {\n\t\t\t\t\tresult.push(range.create(clone.start + stream.start + part.start, part.substring(fnBody)));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t\n\t\t// optimize result: remove empty ranges and duplicates\n\t\treturn _.chain(result)\n\t\t\t.filter(function(item) {\n\t\t\t\treturn !!item.length();\n\t\t\t})\n\t\t\t.uniq(false, function(item) {\n\t\t\t\treturn item.toString();\n\t\t\t})\n\t\t\t.value();\n\t}\n\t\n\t/**\n\t * Tries to find matched CSS property and nearest range for selection\n\t * @param {CSSRule} rule\n\t * @param {Range} selRange\n\t * @param {Boolean} isBackward\n\t * @returns {Range}\n\t */\n\tfunction matchedRangeForCSSProperty(rule, selRange, isBackward) {\n\t\t/** @type CSSProperty */\n\t\tvar property = null;\n\t\tvar possibleRanges, curRange = null, ix;\n\t\tvar list = rule.list();\n\t\tvar searchFn, nearestItemFn;\n\t\t\n\t\tif (isBackward) {\n\t\t\tlist.reverse();\n\t\t\tsearchFn = function(p) {\n\t\t\t\treturn p.range(true).start <= selRange.start;\n\t\t\t};\n\t\t\tnearestItemFn = function(r) {\n\t\t\t\treturn r.start < selRange.start;\n\t\t\t};\n\t\t} else {\n\t\t\tsearchFn = function(p) {\n\t\t\t\treturn p.range(true).end >= selRange.end;\n\t\t\t};\n\t\t\tnearestItemFn = function(r) {\n\t\t\t\treturn r.end > selRange.start;\n\t\t\t};\n\t\t}\n\t\t\n\t\t// search for nearest to selection CSS property\n\t\twhile (property = _.find(list, searchFn)) {\n\t\t\tpossibleRanges = makePossibleRangesCSS(property);\n\t\t\tif (isBackward)\n\t\t\t\tpossibleRanges.reverse();\n\t\t\t\n\t\t\t// check if any possible range is already selected\n\t\t\tcurRange = _.find(possibleRanges, function(r) {\n\t\t\t\treturn r.equal(selRange);\n\t\t\t});\n\t\t\t\n\t\t\tif (!curRange) {\n\t\t\t\t// no selection, select nearest item\n\t\t\t\tvar matchedRanges = _.filter(possibleRanges, function(r) {\n\t\t\t\t\treturn r.inside(selRange.end);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (matchedRanges.length > 1) {\n\t\t\t\t\tcurRange = matchedRanges[1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (curRange = _.find(possibleRanges, nearestItemFn))\n\t\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tix = _.indexOf(possibleRanges, curRange);\n\t\t\t\tif (ix != possibleRanges.length - 1) {\n\t\t\t\t\tcurRange = possibleRanges[ix + 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tcurRange = null;\n\t\t\tselRange.start = selRange.end = isBackward \n\t\t\t\t? property.range(true).start - 1\n\t\t\t\t: property.range(true).end + 1;\n\t\t}\n\t\t\n\t\treturn curRange;\n\t}\n\t\n\tfunction findNextCSSItem(editor) {\n\t\treturn findItem(editor, false, require('cssEditTree').extractRule, getRangeForNextItemInCSS);\n\t}\n\t\n\tfunction findPrevCSSItem(editor) {\n\t\treturn findItem(editor, true, require('cssEditTree').extractRule, getRangeForPrevItemInCSS);\n\t}\n\t\n\t/**\n\t * Returns range for item to be selected in CSS after current caret \n\t * (selection) position\n\t * @param {String} rule CSS rule declaration\n\t * @param {Number} offset Rule's position index inside content\n\t * @param {Range} selRange Selection range\n\t * @return {Range} Returns range if next item was found, <code>null</code> otherwise\n\t */\n\tfunction getRangeForNextItemInCSS(rule, offset, selRange) {\n\t\tvar tree = require('cssEditTree').parse(rule, {\n\t\t\toffset: offset\n\t\t});\n\t\t\n\t\t// check if selector is matched\n\t\tvar range = tree.nameRange(true);\n\t\tif (selRange.end < range.end) {\n\t\t\treturn range;\n\t\t}\n\t\t\n\t\treturn matchedRangeForCSSProperty(tree, selRange, false);\n\t}\n\t\n\t/**\n\t * Returns range for item to be selected in CSS before current caret \n\t * (selection) position\n\t * @param {String} rule CSS rule declaration\n\t * @param {Number} offset Rule's position index inside content\n\t * @param {Range} selRange Selection range\n\t * @return {Range} Returns range if previous item was found, <code>null</code> otherwise\n\t */\n\tfunction getRangeForPrevItemInCSS(rule, offset, selRange) {\n\t\tvar tree = require('cssEditTree').parse(rule, {\n\t\t\toffset: offset\n\t\t});\n\t\t\n\t\tvar curRange = matchedRangeForCSSProperty(tree, selRange, true);\n\t\t\n\t\tif (!curRange) {\n\t\t\t// no matched property, try to match selector\n\t\t\tvar range = tree.nameRange(true);\n\t\t\tif (selRange.start > range.start) {\n\t\t\t\treturn range;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn curRange;\n\t}\n\t\n\t// XXX register actions\n\tvar actions = require('actions');\n\tactions.add('select_next_item', function(editor){\n\t\tif (editor.getSyntax() == 'css')\n\t\t\treturn findNextCSSItem(editor);\n\t\telse\n\t\t\treturn findNextHTMLItem(editor);\n\t});\n\t\n\tactions.add('select_previous_item', function(editor){\n\t\tif (editor.getSyntax() == 'css')\n\t\t\treturn findPrevCSSItem(editor);\n\t\telse\n\t\t\treturn findPrevHTMLItem(editor);\n\t});\n});/**\n * HTML pair matching (balancing) actions\n * @constructor\n * @memberOf __matchPairActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/** @type emmet.actions */\n\tvar actions = require('actions');\n\tvar matcher = require('htmlMatcher');\n\tvar lastMatch = null;\n\t\n\t/**\n\t * Find and select HTML tag pair\n\t * @param {IEmmetEditor} editor Editor instance\n\t * @param {String} direction Direction of pair matching: 'in' or 'out'. \n\t * Default is 'out'\n\t */\n\tfunction matchPair(editor, direction) {\n\t\tdirection = String((direction || 'out').toLowerCase());\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\n\t\tvar range = require('range');\n\t\t/** @type Range */\n\t\tvar sel = range.create(editor.getSelectionRange());\n\t\tvar content = info.content;\n\t\t\n\t\t// validate previous match\n\t\tif (lastMatch && !lastMatch.range.equal(sel)) {\n\t\t\tlastMatch = null;\n\t\t}\n\t\t\n\t\tif (lastMatch && sel.length()) {\n\t\t\tif (direction == 'in') {\n\t\t\t\t// user has previously selected tag and wants to move inward\n\t\t\t\tif (lastMatch.type == 'tag' && !lastMatch.close) {\n\t\t\t\t\t// unary tag was selected, can't move inward\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tif (lastMatch.range.equal(lastMatch.outerRange)) {\n\t\t\t\t\t\tlastMatch.range = lastMatch.innerRange;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar narrowed = require('utils').narrowToNonSpace(content, lastMatch.innerRange);\n\t\t\t\t\t\tlastMatch = matcher.find(content, narrowed.start + 1);\n\t\t\t\t\t\tif (lastMatch && lastMatch.range.equal(sel) && lastMatch.outerRange.equal(sel)) {\n\t\t\t\t\t\t\tlastMatch.range = lastMatch.innerRange;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\t\t!lastMatch.innerRange.equal(lastMatch.outerRange) \n\t\t\t\t\t\t&& lastMatch.range.equal(lastMatch.innerRange) \n\t\t\t\t\t\t&& sel.equal(lastMatch.range)) {\n\t\t\t\t\tlastMatch.range = lastMatch.outerRange;\n\t\t\t\t} else {\n\t\t\t\t\tlastMatch = matcher.find(content, sel.start);\n\t\t\t\t\tif (lastMatch && lastMatch.range.equal(sel) && lastMatch.innerRange.equal(sel)) {\n\t\t\t\t\t\tlastMatch.range = lastMatch.outerRange;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlastMatch = matcher.find(content, sel.start);\n\t\t}\n\t\t\n\t\tif (lastMatch && !lastMatch.range.equal(sel)) {\n\t\t\teditor.createSelection(lastMatch.range.start, lastMatch.range.end);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tlastMatch = null;\n\t\treturn false;\n\t}\n\t\n\tactions.add('match_pair', matchPair, {hidden: true});\n\tactions.add('match_pair_inward', function(editor){\n\t\treturn matchPair(editor, 'in');\n\t}, {label: 'HTML/Match Pair Tag (inward)'});\n\n\tactions.add('match_pair_outward', function(editor){\n\t\treturn matchPair(editor, 'out');\n\t}, {label: 'HTML/Match Pair Tag (outward)'});\n\t\n\t/**\n\t * Moves caret to matching opening or closing tag\n\t * @param {IEmmetEditor} editor\n\t */\n\tactions.add('matching_pair', function(editor) {\n\t\tvar content = String(editor.getContent());\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\tif (content.charAt(caretPos) == '<') \n\t\t\t// looks like caret is outside of tag pair  \n\t\t\tcaretPos++;\n\t\t\t\n\t\tvar tag = matcher.tag(content, caretPos);\n\t\tif (tag && tag.close) { // exclude unary tags\n\t\t\tif (tag.open.range.inside(caretPos)) {\n\t\t\t\teditor.setCaretPos(tag.close.range.start);\n\t\t\t} else {\n\t\t\t\teditor.setCaretPos(tag.open.range.start);\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'HTML/Go To Matching Tag Pair'});\n});/**\n * Gracefully removes tag under cursor\n * \n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('remove_tag', function(editor) {\n\t\tvar utils = require('utils');\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\t\n\t\t// search for tag\n\t\tvar tag = require('htmlMatcher').tag(info.content, editor.getCaretPos());\n\t\tif (tag) {\n\t\t\tif (!tag.close) {\n\t\t\t\t// simply remove unary tag\n\t\t\t\teditor.replaceContent(utils.getCaretPlaceholder(), tag.range.start, tag.range.end);\n\t\t\t} else {\n\t\t\t\t// remove tag and its newlines\n\t\t\t\t/** @type Range */\n\t\t\t\tvar tagContentRange = utils.narrowToNonSpace(info.content, tag.innerRange);\n\t\t\t\t/** @type Range */\n\t\t\t\tvar startLineBounds = utils.findNewlineBounds(info.content, tagContentRange.start);\n\t\t\t\tvar startLinePad = utils.getLinePadding(startLineBounds.substring(info.content));\n\t\t\t\tvar tagContent = tagContentRange.substring(info.content);\n\t\t\t\t\n\t\t\t\ttagContent = utils.unindentString(tagContent, startLinePad);\n\t\t\t\teditor.replaceContent(utils.getCaretPlaceholder() + utils.escapeText(tagContent), tag.outerRange.start, tag.outerRange.end);\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'HTML/Remove Tag'});\n});\n/**\n * Splits or joins tag, e.g. transforms it into a short notation and vice versa:<br>\n * &lt;div&gt;&lt;/div&gt; → &lt;div /&gt; : join<br>\n * &lt;div /&gt; → &lt;div&gt;&lt;/div&gt; : split\n * @param {Function} require\n * @param {Underscore} _\n * @memberOf __splitJoinTagAction\n * @constructor\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * @param {IEmmetEditor} editor\n\t * @param {Object} profile\n\t * @param {Object} tag\n\t */\n\tfunction joinTag(editor, profile, tag) {\n\t\t/** @type emmet.utils */\n\t\tvar utils = require('utils');\n\t\t\n\t\t// empty closing slash is a nonsense for this action\n\t\tvar slash = profile.selfClosing() || ' /';\n\t\tvar content = tag.open.range.substring(tag.source).replace(/\\s*>$/, slash + '>');\n\t\t\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\t// update caret position\n\t\tif (content.length + tag.outerRange.start < caretPos) {\n\t\t\tcaretPos = content.length + tag.outerRange.start;\n\t\t}\n\t\t\n\t\tcontent = utils.escapeText(content);\n\t\teditor.replaceContent(content, tag.outerRange.start, tag.outerRange.end);\n\t\teditor.setCaretPos(caretPos);\n\t\treturn true;\n\t}\n\t\n\tfunction splitTag(editor, profile, tag) {\n\t\t/** @type emmet.utils */\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar nl = utils.getNewline();\n\t\tvar pad = require('resources').getVariable('indentation');\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\t// define tag content depending on profile\n\t\tvar tagContent = (profile.tag_nl === true) ? nl + pad + nl : '';\n\t\tvar content = tag.outerContent().replace(/\\s*\\/>$/, '>');\n\t\tcaretPos = tag.outerRange.start + content.length;\n\t\tcontent += tagContent + '</' + tag.open.name + '>';\n\t\t\n\t\tcontent = utils.escapeText(content);\n\t\teditor.replaceContent(content, tag.outerRange.start, tag.outerRange.end);\n\t\teditor.setCaretPos(caretPos);\n\t\treturn true;\n\t}\n\t\n\trequire('actions').add('split_join_tag', function(editor, profileName) {\n\t\tvar matcher = require('htmlMatcher');\n\t\t\n\t\tvar info = require('editorUtils').outputInfo(editor, null, profileName);\n\t\tvar profile = require('profile').get(info.profile);\n\t\t\n\t\t// find tag at current position\n\t\tvar tag = matcher.tag(info.content, editor.getCaretPos());\n\t\tif (tag) {\n\t\t\treturn tag.close \n\t\t\t\t? joinTag(editor, profile, tag) \n\t\t\t\t: splitTag(editor, profile, tag);\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'HTML/Split\\\\Join Tag Declaration'});\n});/**\n * Reflect CSS value: takes rule's value under caret and pastes it for the same \n * rules with vendor prefixes\n * @constructor\n * @memberOf __reflectCSSActionDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('reflectCSSValue', function(require, _) {\n\t/**\n\t * @type HandlerList List of registered handlers\n\t */\n\tvar handlers = require('handlerList').create();\n\t\n\trequire('actions').add('reflect_css_value', function(editor) {\n\t\tif (editor.getSyntax() != 'css') return false;\n\t\t\n\t\treturn require('actionUtils').compoundUpdate(editor, doCSSReflection(editor));\n\t}, {label: 'CSS/Reflect Value'});\n\t\n\tfunction doCSSReflection(editor) {\n\t\t/** @type emmet.cssEditTree */\n\t\tvar cssEditTree = require('cssEditTree');\n\t\tvar outputInfo = require('editorUtils').outputInfo(editor);\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\n\t\tvar cssRule = cssEditTree.parseFromPosition(outputInfo.content, caretPos);\n\t\tif (!cssRule) return;\n\t\t\n\t\tvar property = cssRule.itemFromPosition(caretPos, true);\n\t\t// no property under cursor, nothing to reflect\n\t\tif (!property) return;\n\t\t\n\t\tvar oldRule = cssRule.source;\n\t\tvar offset = cssRule.options.offset;\n\t\tvar caretDelta = caretPos - offset - property.range().start;\n\t\t\n\t\thandlers.exec(false, [property]);\n\t\t\n\t\tif (oldRule !== cssRule.source) {\n\t\t\treturn {\n\t\t\t\tdata:  cssRule.source,\n\t\t\t\tstart: offset,\n\t\t\t\tend:   offset + oldRule.length,\n\t\t\t\tcaret: offset + property.range().start + caretDelta\n\t\t\t};\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns regexp that should match reflected CSS property names\n\t * @param {String} name Current CSS property name\n\t * @return {RegExp}\n\t */\n\tfunction getReflectedCSSName(name) {\n\t\tname = require('cssEditTree').baseName(name);\n\t\tvar vendorPrefix = '^(?:\\\\-\\\\w+\\\\-)?', m;\n\t\t\n\t\tif (name == 'opacity' || name == 'filter') {\n\t\t\treturn new RegExp(vendorPrefix + '(?:opacity|filter)$');\n\t\t} else if (m = name.match(/^border-radius-(top|bottom)(left|right)/)) {\n\t\t\t// Mozilla-style border radius\n\t\t\treturn new RegExp(vendorPrefix + '(?:' + name + '|border-' + m[1] + '-' + m[2] + '-radius)$');\n\t\t} else if (m = name.match(/^border-(top|bottom)-(left|right)-radius/)) { \n\t\t\treturn new RegExp(vendorPrefix + '(?:' + name + '|border-radius-' + m[1] + m[2] + ')$');\n\t\t}\n\t\t\n\t\treturn new RegExp(vendorPrefix + name + '$');\n\t}\n\t\n\t/**\n\t * Reflects value from <code>donor</code> into <code>receiver</code>\n\t * @param {CSSProperty} donor Donor CSS property from which value should\n\t * be reflected\n\t * @param {CSSProperty} receiver Property that should receive reflected \n\t * value from donor\n\t */\n\tfunction reflectValue(donor, receiver) {\n\t\tvar value = getReflectedValue(donor.name(), donor.value(), \n\t\t\t\treceiver.name(), receiver.value());\n\t\t\n\t\treceiver.value(value);\n\t}\n\t\n\t/**\n\t * Returns value that should be reflected for <code>refName</code> CSS property\n\t * from <code>curName</code> property. This function is used for special cases,\n\t * when the same result must be achieved with different properties for different\n\t * browsers. For example: opаcity:0.5; → filter:alpha(opacity=50);<br><br>\n\t * \n\t * This function does value conversion between different CSS properties\n\t * \n\t * @param {String} curName Current CSS property name\n\t * @param {String} curValue Current CSS property value\n\t * @param {String} refName Receiver CSS property's name \n\t * @param {String} refValue Receiver CSS property's value\n\t * @return {String} New value for receiver property\n\t */\n\tfunction getReflectedValue(curName, curValue, refName, refValue) {\n\t\tvar cssEditTree = require('cssEditTree');\n\t\tvar utils = require('utils');\n\t\tcurName = cssEditTree.baseName(curName);\n\t\trefName = cssEditTree.baseName(refName);\n\t\t\n\t\tif (curName == 'opacity' && refName == 'filter') {\n\t\t\treturn refValue.replace(/opacity=[^)]*/i, 'opacity=' + Math.floor(parseFloat(curValue) * 100));\n\t\t} else if (curName == 'filter' && refName == 'opacity') {\n\t\t\tvar m = curValue.match(/opacity=([^)]*)/i);\n\t\t\treturn m ? utils.prettifyNumber(parseInt(m[1]) / 100) : refValue;\n\t\t}\n\t\t\n\t\treturn curValue;\n\t}\n\t\n\t// XXX add default handler\n\thandlers.add(function(property) {\n\t\tvar reName = getReflectedCSSName(property.name());\n\t\t_.each(property.parent.list(), function(p) {\n\t\t\tif (reName.test(p.name())) {\n\t\t\t\treflectValue(property, p);\n\t\t\t}\n\t\t});\n\t}, {order: -1});\n\t\n\treturn {\n\t\t/**\n\t\t * Adds custom reflect handler. The passed function will receive matched\n\t\t * CSS property (as <code>CSSEditElement</code> object) and should\n\t\t * return <code>true</code> if it was performed successfully (handled \n\t\t * reflection), <code>false</code> otherwise.\n\t\t * @param {Function} fn\n\t\t * @param {Object} options\n\t\t */\n\t\taddHandler: function(fn, options) {\n\t\t\thandlers.add(fn, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes registered handler\n\t\t * @returns\n\t\t */\n\t\tremoveHandler: function(fn) {\n\t\t\thandlers.remove(fn, options);\n\t\t}\n\t};\n});/**\n * Evaluates simple math expression under caret\n * @param {Function} require\n * @param {Underscore} _ \n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('evaluate_math_expression', function(editor) {\n\t\tvar actionUtils = require('actionUtils');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar content = String(editor.getContent());\n\t\tvar chars = '.+-*/\\\\';\n\t\t\n\t\t/** @type Range */\n\t\tvar sel = require('range').create(editor.getSelectionRange());\n\t\tif (!sel.length()) {\n\t\t\tsel = actionUtils.findExpressionBounds(editor, function(ch) {\n\t\t\t\treturn utils.isNumeric(ch) || chars.indexOf(ch) != -1;\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (sel && sel.length()) {\n\t\t\tvar expr = sel.substring(content);\n\t\t\t\n\t\t\t// replace integral division: 11\\2 => Math.round(11/2) \n\t\t\texpr = expr.replace(/([\\d\\.\\-]+)\\\\([\\d\\.\\-]+)/g, 'Math.round($1/$2)');\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvar result = utils.prettifyNumber(new Function('return ' + expr)());\n\t\t\t\teditor.replaceContent(result, sel.start, sel.end);\n\t\t\t\teditor.setCaretPos(sel.start + result.length);\n\t\t\t\treturn true;\n\t\t\t} catch (e) {}\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'Numbers/Evaluate Math Expression'});\n});\n/**\n * Increment/decrement number under cursor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Extract number from current caret position of the <code>editor</code> and\n\t * increment it by <code>step</code>\n\t * @param {IEmmetEditor} editor\n\t * @param {Number} step Increment step (may be negative)\n\t */\n\tfunction incrementNumber(editor, step) {\n\t\tvar utils = require('utils');\n\t\tvar actionUtils = require('actionUtils');\n\t\t\n\t\tvar hasSign = false;\n\t\tvar hasDecimal = false;\n\t\t\t\n\t\tvar r = actionUtils.findExpressionBounds(editor, function(ch, pos, content) {\n\t\t\tif (utils.isNumeric(ch))\n\t\t\t\treturn true;\n\t\t\tif (ch == '.') {\n\t\t\t\t// make sure that next character is numeric too\n\t\t\t\tif (!utils.isNumeric(content.charAt(pos + 1)))\n\t\t\t\t\treturn false;\n\t\t\t\t\n\t\t\t\treturn hasDecimal ? false : hasDecimal = true;\n\t\t\t}\n\t\t\tif (ch == '-')\n\t\t\t\treturn hasSign ? false : hasSign = true;\n\t\t\t\t\n\t\t\treturn false;\n\t\t});\n\t\t\t\n\t\tif (r && r.length()) {\n\t\t\tvar strNum = r.substring(String(editor.getContent()));\n\t\t\tvar num = parseFloat(strNum);\n\t\t\tif (!_.isNaN(num)) {\n\t\t\t\tnum = utils.prettifyNumber(num + step);\n\t\t\t\t\n\t\t\t\t// do we have zero-padded number?\n\t\t\t\tif (/^(\\-?)0+[1-9]/.test(strNum)) {\n\t\t\t\t\tvar minus = '';\n\t\t\t\t\tif (RegExp.$1) {\n\t\t\t\t\t\tminus = '-';\n\t\t\t\t\t\tnum = num.substring(1);\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tvar parts = num.split('.');\n\t\t\t\t\tparts[0] = utils.zeroPadString(parts[0], intLength(strNum));\n\t\t\t\t\tnum = minus + parts.join('.');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teditor.replaceContent(num, r.start, r.end);\n\t\t\t\teditor.createSelection(r.start, r.start + num.length);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Returns length of integer part of number\n\t * @param {String} num\n\t */\n\tfunction intLength(num) {\n\t\tnum = num.replace(/^\\-/, '');\n\t\tif (~num.indexOf('.')) {\n\t\t\treturn num.split('.')[0].length;\n\t\t}\n\t\t\n\t\treturn num.length;\n\t}\n\t\n\tvar actions = require('actions');\n\t_.each([1, -1, 10, -10, 0.1, -0.1], function(num) {\n\t\tvar prefix = num > 0 ? 'increment' : 'decrement';\n\t\t\n\t\tactions.add(prefix + '_number_by_' + String(Math.abs(num)).replace('.', '').substring(0, 2), function(editor) {\n\t\t\treturn incrementNumber(editor, num);\n\t\t}, {label: 'Numbers/' + prefix.charAt(0).toUpperCase() + prefix.substring(1) + ' number by ' + Math.abs(num)});\n\t});\n});/**\n * Actions to insert line breaks. Some simple editors (like browser's \n * &lt;textarea&gt;, for example) do not provide such simple things\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar actions = require('actions');\n\t/** @type emmet.preferences */\n\tvar prefs = require('preferences');\n\t\n\t// setup default preferences\n\tprefs.define('css.closeBraceIndentation', '\\n',\n\t\t\t'Indentation before closing brace of CSS rule. Some users prefere ' \n\t\t\t+ 'indented closing brace of CSS rule for better readability. '\n\t\t\t+ 'This preference’s value will be automatically inserted before '\n\t\t\t+ 'closing brace when user adds newline in newly created CSS rule '\n\t\t\t+ '(e.g. when “Insert formatted linebreak” action will be performed ' \n\t\t\t+ 'in CSS file). If you’re such user, you may want to write put a value ' \n\t\t\t+ 'like <code>\\\\n\\\\t</code> in this preference.');\n\t\n\t/**\n\t * Inserts newline character with proper indentation in specific positions only.\n\t * @param {IEmmetEditor} editor\n\t * @return {Boolean} Returns <code>true</code> if line break was inserted \n\t */\n\tactions.add('insert_formatted_line_break_only', function(editor) {\n\t\tvar utils = require('utils');\n\t\t/** @type emmet.resources */\n\t\tvar res = require('resources');\n\t\t\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tvar caretPos = editor.getCaretPos();\n\t\tvar nl = utils.getNewline();\n\t\t\n\t\tif (_.include(['html', 'xml', 'xsl'], info.syntax)) {\n\t\t\tvar pad = res.getVariable('indentation');\n\t\t\t// let's see if we're breaking newly created tag\n\t\t\tvar tag = require('htmlMatcher').tag(info.content, caretPos);\n\t\t\tif (tag && !tag.innerRange.length()) {\n\t\t\t\teditor.replaceContent(nl + pad + utils.getCaretPlaceholder() + nl, caretPos);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (info.syntax == 'css') {\n\t\t\t/** @type String */\n\t\t\tvar content = info.content;\n\t\t\tif (caretPos && content.charAt(caretPos - 1) == '{') {\n\t\t\t\tvar append = prefs.get('css.closeBraceIndentation');\n\t\t\t\tvar pad = res.getVariable('indentation');\n\t\t\t\t\n\t\t\t\tvar hasCloseBrace = content.charAt(caretPos) == '}';\n\t\t\t\tif (!hasCloseBrace) {\n\t\t\t\t\t// do we really need special formatting here?\n\t\t\t\t\t// check if this is really a newly created rule,\n\t\t\t\t\t// look ahead for a closing brace\n\t\t\t\t\tfor (var i = caretPos, il = content.length, ch; i < il; i++) {\n\t\t\t\t\t\tch = content.charAt(i);\n\t\t\t\t\t\tif (ch == '{') {\n\t\t\t\t\t\t\t// ok, this is a new rule without closing brace\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ch == '}') {\n\t\t\t\t\t\t\t// not a new rule, just add indentation\n\t\t\t\t\t\t\tappend = '';\n\t\t\t\t\t\t\thasCloseBrace = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!hasCloseBrace) {\n\t\t\t\t\tappend += '}';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// defining rule set\n\t\t\t\tvar insValue = nl + pad + utils.getCaretPlaceholder() + append;\n\t\t\t\teditor.replaceContent(insValue, caretPos);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn false;\n\t}, {hidden: true});\n\t\n\t/**\n\t * Inserts newline character with proper indentation. This action is used in\n\t * editors that doesn't have indentation control (like textarea element) to \n\t * provide proper indentation\n\t * @param {IEmmetEditor} editor Editor instance\n\t */\n\tactions.add('insert_formatted_line_break', function(editor) {\n\t\tif (!actions.run('insert_formatted_line_break_only', editor)) {\n\t\t\tvar utils = require('utils');\n\t\t\t\n\t\t\tvar curPadding = require('editorUtils').getCurrentLinePadding(editor);\n\t\t\tvar content = String(editor.getContent());\n\t\t\tvar caretPos = editor.getCaretPos();\n\t\t\tvar len = content.length;\n\t\t\tvar nl = utils.getNewline();\n\t\t\t\t\n\t\t\t// check out next line padding\n\t\t\tvar lineRange = editor.getCurrentLineRange();\n\t\t\tvar nextPadding = '';\n\t\t\t\t\n\t\t\tfor (var i = lineRange.end + 1, ch; i < len; i++) {\n\t\t\t\tch = content.charAt(i);\n\t\t\t\tif (ch == ' ' || ch == '\\t')\n\t\t\t\t\tnextPadding += ch;\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (nextPadding.length > curPadding.length)\n\t\t\t\teditor.replaceContent(nl + nextPadding, caretPos, caretPos, true);\n\t\t\telse\n\t\t\t\teditor.replaceContent(nl, caretPos);\n\t\t}\n\t\t\n\t\treturn true;\n\t}, {hidden: true});\n});/**\n * Merges selected lines or lines between XHTML tag pairs\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('merge_lines', function(editor) {\n\t\tvar matcher = require('htmlMatcher');\n\t\tvar utils = require('utils');\n\t\tvar editorUtils = require('editorUtils');\n\t\tvar info = editorUtils.outputInfo(editor);\n\t\t\n\t\t/** @type Range */\n\t\tvar selection = require('range').create(editor.getSelectionRange());\n\t\tif (!selection.length()) {\n\t\t\t// find matching tag\n\t\t\tvar pair = matcher.find(info.content, editor.getCaretPos());\n\t\t\tif (pair) {\n\t\t\t\tselection = pair.outerRange;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (selection.length()) {\n\t\t\t// got range, merge lines\n\t\t\tvar text =  selection.substring(info.content);\n\t\t\tvar lines = utils.splitByLines(text);\n\t\t\t\n\t\t\tfor (var i = 1; i < lines.length; i++) {\n\t\t\t\tlines[i] = lines[i].replace(/^\\s+/, '');\n\t\t\t}\n\t\t\t\n\t\t\ttext = lines.join('').replace(/\\s{2,}/, ' ');\n\t\t\tvar textLen = text.length;\n\t\t\ttext = utils.escapeText(text);\n\t\t\teditor.replaceContent(text, selection.start, selection.end);\n\t\t\teditor.createSelection(selection.start, selection.start + textLen);\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n});/**\n * Encodes/decodes image under cursor to/from base64\n * @param {IEmmetEditor} editor\n * @since 0.65\n * \n * @memberOf __base64ActionDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\trequire('actions').add('encode_decode_data_url', function(editor) {\n\t\tvar data = String(editor.getSelection());\n\t\tvar caretPos = editor.getCaretPos();\n\t\t\t\n\t\tif (!data) {\n\t\t\t// no selection, try to find image bounds from current caret position\n\t\t\tvar text = String(editor.getContent()),  m;\n\t\t\twhile (caretPos-- >= 0) {\n\t\t\t\tif (startsWith('src=', text, caretPos)) { // found <img src=\"\">\n\t\t\t\t\tif (m = text.substr(caretPos).match(/^(src=([\"'])?)([^'\"<>\\s]+)\\1?/)) {\n\t\t\t\t\t\tdata = m[3];\n\t\t\t\t\t\tcaretPos += m[1].length;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (startsWith('url(', text, caretPos)) { // found CSS url() pattern\n\t\t\t\t\tif (m = text.substr(caretPos).match(/^(url\\((['\"])?)([^'\"\\)\\s]+)\\1?/)) {\n\t\t\t\t\t\tdata = m[3];\n\t\t\t\t\t\tcaretPos += m[1].length;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (data) {\n\t\t\tif (startsWith('data:', data))\n\t\t\t\treturn decodeFromBase64(editor, data, caretPos);\n\t\t\telse\n\t\t\t\treturn encodeToBase64(editor, data, caretPos);\n\t\t}\n\t\t\n\t\treturn false;\n\t}, {label: 'Encode\\\\Decode data:URL image'});\n\t\n\t/**\n\t * Test if <code>text</code> starts with <code>token</code> at <code>pos</code>\n\t * position. If <code>pos</code> is omitted, search from beginning of text \n\t * @param {String} token Token to test\n\t * @param {String} text Where to search\n\t * @param {Number} pos Position where to start search\n\t * @return {Boolean}\n\t * @since 0.65\n\t */\n\tfunction startsWith(token, text, pos) {\n\t\tpos = pos || 0;\n\t\treturn text.charAt(pos) == token.charAt(0) && text.substr(pos, token.length) == token;\n\t}\n\t\n\t/**\n\t * Encodes image to base64\n\t * \n\t * @param {IEmmetEditor} editor\n\t * @param {String} imgPath Path to image\n\t * @param {Number} pos Caret position where image is located in the editor\n\t * @return {Boolean}\n\t */\n\tfunction encodeToBase64(editor, imgPath, pos) {\n\t\tvar file = require('file');\n\t\tvar actionUtils = require('actionUtils');\n\t\t\n\t\tvar editorFile = editor.getFilePath();\n\t\tvar defaultMimeType = 'application/octet-stream';\n\t\t\t\n\t\tif (editorFile === null) {\n\t\t\tthrow \"You should save your file before using this action\";\n\t\t}\n\t\t\n\t\t// locate real image path\n\t\tvar realImgPath = file.locateFile(editorFile, imgPath);\n\t\tif (realImgPath === null) {\n\t\t\tthrow \"Can't find \" + imgPath + ' file';\n\t\t}\n\t\t\n\t\tfile.read(realImgPath, function(err, content) {\n\t\t\tif (err) {\n\t\t\t\tthrow 'Unable to read ' + realImgPath + ': ' + err;\n\t\t\t}\n\t\t\t\n\t\t\tvar b64 = require('base64').encode(String(content));\n\t\t\tif (!b64) {\n\t\t\t\tthrow \"Can't encode file content to base64\";\n\t\t\t}\n\t\t\t\n\t\t\tb64 = 'data:' + (actionUtils.mimeTypes[String(file.getExt(realImgPath))] || defaultMimeType) +\n\t\t\t\t';base64,' + b64;\n\t\t\t\t\n\t\t\teditor.replaceContent('$0' + b64, pos, pos + imgPath.length);\n\t\t});\n\t\t\n\t\t\n\t\treturn true;\n\t}\n\n\t/**\n\t * Decodes base64 string back to file.\n\t * @param {IEmmetEditor} editor\n\t * @param {String} data Base64-encoded file content\n\t * @param {Number} pos Caret position where image is located in the editor\n\t */\n\tfunction decodeFromBase64(editor, data, pos) {\n\t\t// ask user to enter path to file\n\t\tvar filePath = String(editor.prompt('Enter path to file (absolute or relative)'));\n\t\tif (!filePath)\n\t\t\treturn false;\n\t\t\t\n\t\tvar file = require('file');\n\t\tvar absPath = file.createPath(editor.getFilePath(), filePath);\n\t\tif (!absPath) {\n\t\t\tthrow \"Can't save file\";\n\t\t}\n\t\t\n\t\tfile.save(absPath, require('base64').decode( data.replace(/^data\\:.+?;.+?,/, '') ));\n\t\teditor.replaceContent('$0' + filePath, pos, pos + data.length);\n\t\treturn true;\n\t}\n});\n/**\n * Automatically updates image size attributes in HTML's &lt;img&gt; element or\n * CSS rule\n * @param {Function} require\n * @param {Underscore} _\n * @constructor\n * @memberOf __updateImageSizeAction\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Updates image size of &lt;img src=\"\"&gt; tag\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction updateImageSizeHTML(editor) {\n\t\tvar offset = editor.getCaretPos();\n\t\t\n\t\t// find tag from current caret position\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tvar xmlElem = require('xmlEditTree').parseFromPosition(info.content, offset, true);\n\t\tif (xmlElem && (xmlElem.name() || '').toLowerCase() == 'img') {\n\t\t\tgetImageSizeForSource(editor, xmlElem.value('src'), function(size) {\n\t\t\t\tif (size) {\n\t\t\t\t\tvar compoundData = xmlElem.range(true);\n\t\t\t\t\txmlElem.value('width', size.width);\n\t\t\t\t\txmlElem.value('height', size.height, xmlElem.indexOf('width') + 1);\n\t\t\t\t\t\n\t\t\t\t\trequire('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n\t\t\t\t\t\tdata: xmlElem.toString(),\n\t\t\t\t\t\tcaret: offset\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\t\n\t/**\n\t * Updates image size of CSS property\n\t * @param {IEmmetEditor} editor\n\t */\n\tfunction updateImageSizeCSS(editor) {\n\t\tvar offset = editor.getCaretPos();\n\t\t\n\t\t// find tag from current caret position\n\t\tvar info = require('editorUtils').outputInfo(editor);\n\t\tvar cssRule = require('cssEditTree').parseFromPosition(info.content, offset, true);\n\t\tif (cssRule) {\n\t\t\t// check if there is property with image under caret\n\t\t\tvar prop = cssRule.itemFromPosition(offset, true), m;\n\t\t\tif (prop && (m = /url\\(([\"']?)(.+?)\\1\\)/i.exec(prop.value() || ''))) {\n\t\t\t\tgetImageSizeForSource(editor, m[2], function(size) {\n\t\t\t\t\tif (size) {\n\t\t\t\t\t\tvar compoundData = cssRule.range(true);\n\t\t\t\t\t\tcssRule.value('width', size.width + 'px');\n\t\t\t\t\t\tcssRule.value('height', size.height + 'px', cssRule.indexOf('width') + 1);\n\t\t\t\t\t\t\n\t\t\t\t\t\trequire('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n\t\t\t\t\t\t\tdata: cssRule.toString(),\n\t\t\t\t\t\t\tcaret: offset\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns image dimensions for source\n\t * @param {IEmmetEditor} editor\n\t * @param {String} src Image source (path or data:url)\n\t */\n\tfunction getImageSizeForSource(editor, src, callback) {\n\t\tvar fileContent;\n\t\tvar au = require('actionUtils');\n\t\tif (src) {\n\t\t\t// check if it is data:url\n\t\t\tif (/^data:/.test(src)) {\n\t\t\t\tfileContent = require('base64').decode( src.replace(/^data\\:.+?;.+?,/, '') );\n\t\t\t\treturn callback(au.getImageSize(fileContent));\n\t\t\t}\n\t\t\t\n\t\t\tvar file = require('file');\n\t\t\tvar absPath = file.locateFile(editor.getFilePath(), src);\n\t\t\tif (absPath === null) {\n\t\t\t\tthrow \"Can't find \" + src + ' file';\n\t\t\t}\n\t\t\t\n\t\t\tfile.read(absPath, function(err, content) {\n\t\t\t\tif (err) {\n\t\t\t\t\tthrow 'Unable to read ' + absPath + ': ' + err;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcontent = String(content);\n\t\t\t\tcallback(au.getImageSize(content));\n\t\t\t});\n\t\t}\n\t}\n\t\n\trequire('actions').add('update_image_size', function(editor) {\n\t\t// this action will definitely won’t work in SASS dialect,\n\t\t// but may work in SCSS or LESS\n\t\tif (_.include(['css', 'less', 'scss'], String(editor.getSyntax()))) {\n\t\t\tupdateImageSizeCSS(editor);\n\t\t} else {\n\t\t\tupdateImageSizeHTML(editor);\n\t\t}\n\t\t\n\t\treturn true;\n\t});\n});/**\n * Resolver for fast CSS typing. Handles abbreviations with the following \n * notation:<br>\n * \n * <code>(-vendor prefix)?property(value)*(!)?</code>\n * \n * <br><br>\n * <b>Abbreviation handling</b><br>\n * \n * By default, Emmet searches for matching snippet definition for provided abbreviation.\n * If snippet wasn't found, Emmet automatically generates element with \n * abbreviation's name. For example, <code>foo</code> abbreviation will generate\n * <code>&lt;foo&gt;&lt;/foo&gt;</code> output.\n * <br><br>\n * This module will capture all expanded properties and upgrade them with values, \n * vendor prefixes and !important declarations. All unmatched abbreviations will \n * be automatically transformed into <code>property-name: ${1}</code> snippets. \n * \n * <b>Vendor prefixes<b><br>\n * \n * If CSS-property is preceded with dash, resolver should output property with\n * all <i>known</i> vendor prefixes. For example, if <code>brad</code> \n * abbreviation generates <code>border-radius: ${value};</code> snippet,\n * the <code>-brad</code> abbreviation should generate:\n * <pre><code>\n * -webkit-border-radius: ${value};\n * -moz-border-radius: ${value};\n * border-radius: ${value};\n * </code></pre>\n * Note that <i>o</i> and <i>ms</i> prefixes are omitted since Opera and IE \n * supports unprefixed property.<br><br>\n * \n * Users can also provide an explicit list of one-character prefixes for any\n * CSS property. For example, <code>-wm-float</code> will produce\n * \n * <pre><code>\n * -webkit-float: ${1};\n * -moz-float: ${1};\n * float: ${1};\n * </code></pre>\n * \n * Although this example looks pointless, users can use this feature to write\n * cutting-edge properties implemented by browser vendors recently.  \n * \n * @constructor\n * @memberOf __cssResolverDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('cssResolver', function(require, _) {\n\t/** Back-reference to module */\n\tvar module = null;\n\t\n\tvar prefixObj = {\n\t\t/** Real vendor prefix name */\n\t\tprefix: 'emmet',\n\t\t\n\t\t/** \n\t\t * Indicates this prefix is obsolete and should't be used when user \n\t\t * wants to generate all-prefixed properties\n\t\t */\n\t\tobsolete: false,\n\t\t\n\t\t/**\n\t\t * Returns prefixed CSS property name\n\t\t * @param {String} name Unprefixed CSS property\n\t\t */\n\t\ttransformName: function(name) {\n\t\t\treturn '-' + this.prefix + '-' + name;\n\t\t},\n\t\t\n\t\t/**\n\t\t * List of unprefixed CSS properties that supported by \n\t\t * current prefix. This list is used to generate all-prefixed property\n\t\t * @returns {Array} \n\t\t */\n\t\tproperties: function() {\n\t\t\treturn getProperties('css.' + this.prefix + 'Properties') || [];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if given property is supported by current prefix\n\t\t * @param name\n\t\t */\n\t\tsupports: function(name) {\n\t\t\treturn _.include(this.properties(), name);\n\t\t}\n\t};\n\t\n\t\n\t/** \n\t * List of registered one-character prefixes. Key is a one-character prefix, \n\t * value is an <code>prefixObj</code> object\n\t */\n\tvar vendorPrefixes = {};\n\t\n\tvar defaultValue = '${1};';\n\t\n\t// XXX module preferences\n\tvar prefs = require('preferences');\n\tprefs.define('css.valueSeparator', ': ',\n\t\t\t'Defines a symbol that should be placed between CSS property and ' \n\t\t\t+ 'value when expanding CSS abbreviations.');\n\tprefs.define('css.propertyEnd', ';',\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \n\t\t\t+ 'when expanding CSS abbreviations.');\n\t\n\tprefs.define('stylus.valueSeparator', ' ',\n\t\t\t'Defines a symbol that should be placed between CSS property and ' \n\t\t\t+ 'value when expanding CSS abbreviations in Stylus dialect.');\n\tprefs.define('stylus.propertyEnd', '',\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \n\t\t\t+ 'when expanding CSS abbreviations in Stylus dialect.');\n\t\n\tprefs.define('sass.propertyEnd', '',\n\t\t\t'Defines a symbol that should be placed at the end of CSS property  ' \n\t\t\t+ 'when expanding CSS abbreviations in SASS dialect.');\n\t\n\tprefs.define('css.autoInsertVendorPrefixes', true,\n\t\t\t'Automatically generate vendor-prefixed copies of expanded CSS ' \n\t\t\t+ 'property. By default, Emmet will generate vendor-prefixed '\n\t\t\t+ 'properties only when you put dash before abbreviation ' \n\t\t\t+ '(e.g. <code>-bxsh</code>). With this option enabled, you don’t ' \n\t\t\t+ 'need dashes before abbreviations: Emmet will produce ' \n\t\t\t+ 'vendor-prefixed properties for you.');\n\t\n\tvar descTemplate = _.template('A comma-separated list of CSS properties that may have ' \n\t\t+ '<code><%= vendor %></code> vendor prefix. This list is used to generate '\n\t\t+ 'a list of prefixed properties when expanding <code>-property</code> '\n\t\t+ 'abbreviations. Empty list means that all possible CSS values may ' \n\t\t+ 'have <code><%= vendor %></code> prefix.');\n\t\n\tvar descAddonTemplate = _.template('A comma-separated list of <em>additional</em> CSS properties ' \n\t\t\t+ 'for <code>css.<%= vendor %>Preperties</code> preference. ' \n\t\t\t+ 'You should use this list if you want to add or remove a few CSS ' \n\t\t\t+ 'properties to original set. To add a new property, simply write its name, '\n\t\t\t+ 'to remove it, precede property with hyphen.<br>'\n\t\t\t+ 'For example, to add <em>foo</em> property and remove <em>border-radius</em> one, '\n\t\t\t+ 'the preference value will look like this: <code>foo, -border-radius</code>.');\n\t\n\t// properties list is created from cssFeatures.html file\n\tvar props = {\n\t\t'webkit': 'animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-clip, background-composite, background-origin, background-size, border-fit, border-horizontal-spacing, border-image, border-vertical-spacing, box-align, box-direction, box-flex, box-flex-group, box-lines, box-ordinal-group, box-orient, box-pack, box-reflect, box-shadow, color-correction, column-break-after, column-break-before, column-break-inside, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-span, column-width, dashboard-region, font-smoothing, highlight, hyphenate-character, hyphenate-limit-after, hyphenate-limit-before, hyphens, line-box-contain, line-break, line-clamp, locale, margin-before-collapse, margin-after-collapse, marquee-direction, marquee-increment, marquee-repetition, marquee-style, mask-attachment, mask-box-image, mask-box-image-outset, mask-box-image-repeat, mask-box-image-slice, mask-box-image-source, mask-box-image-width, mask-clip, mask-composite, mask-image, mask-origin, mask-position, mask-repeat, mask-size, nbsp-mode, perspective, perspective-origin, rtl-ordering, text-combine, text-decorations-in-effect, text-emphasis-color, text-emphasis-position, text-emphasis-style, text-fill-color, text-orientation, text-security, text-stroke-color, text-stroke-width, transform, transition, transform-origin, transform-style, transition-delay, transition-duration, transition-property, transition-timing-function, user-drag, user-modify, user-select, writing-mode, svg-shadow, box-sizing, border-radius',\n\t\t'moz': 'animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, appearance, backface-visibility, background-inline-policy, binding, border-bottom-colors, border-image, border-left-colors, border-right-colors, border-top-colors, box-align, box-direction, box-flex, box-ordinal-group, box-orient, box-pack, box-shadow, box-sizing, column-count, column-gap, column-rule-color, column-rule-style, column-rule-width, column-width, float-edge, font-feature-settings, font-language-override, force-broken-image-icon, hyphens, image-region, orient, outline-radius-bottomleft, outline-radius-bottomright, outline-radius-topleft, outline-radius-topright, perspective, perspective-origin, stack-sizing, tab-size, text-blink, text-decoration-color, text-decoration-line, text-decoration-style, text-size-adjust, transform, transform-origin, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-focus, user-input, user-modify, user-select, window-shadow, background-clip, border-radius',\n\t\t'ms': 'accelerator, backface-visibility, background-position-x, background-position-y, behavior, block-progression, box-align, box-direction, box-flex, box-line-progression, box-lines, box-ordinal-group, box-orient, box-pack, content-zoom-boundary, content-zoom-boundary-max, content-zoom-boundary-min, content-zoom-chaining, content-zoom-snap, content-zoom-snap-points, content-zoom-snap-type, content-zooming, filter, flow-from, flow-into, font-feature-settings, grid-column, grid-column-align, grid-column-span, grid-columns, grid-layer, grid-row, grid-row-align, grid-row-span, grid-rows, high-contrast-adjust, hyphenate-limit-chars, hyphenate-limit-lines, hyphenate-limit-zone, hyphens, ime-mode, interpolation-mode, layout-flow, layout-grid, layout-grid-char, layout-grid-line, layout-grid-mode, layout-grid-type, line-break, overflow-style, perspective, perspective-origin, perspective-origin-x, perspective-origin-y, scroll-boundary, scroll-boundary-bottom, scroll-boundary-left, scroll-boundary-right, scroll-boundary-top, scroll-chaining, scroll-rails, scroll-snap-points-x, scroll-snap-points-y, scroll-snap-type, scroll-snap-x, scroll-snap-y, scrollbar-arrow-color, scrollbar-base-color, scrollbar-darkshadow-color, scrollbar-face-color, scrollbar-highlight-color, scrollbar-shadow-color, scrollbar-track-color, text-align-last, text-autospace, text-justify, text-kashida-space, text-overflow, text-size-adjust, text-underline-position, touch-action, transform, transform-origin, transform-origin-x, transform-origin-y, transform-origin-z, transform-style, transition, transition-delay, transition-duration, transition-property, transition-timing-function, user-select, word-break, word-wrap, wrap-flow, wrap-margin, wrap-through, writing-mode',\n\t\t'o': 'dashboard-region, animation, animation-delay, animation-direction, animation-duration, animation-fill-mode, animation-iteration-count, animation-name, animation-play-state, animation-timing-function, border-image, link, link-source, object-fit, object-position, tab-size, table-baseline, transform, transform-origin, transition, transition-delay, transition-duration, transition-property, transition-timing-function, accesskey, input-format, input-required, marquee-dir, marquee-loop, marquee-speed, marquee-style'\n\t};\n\t\n\t_.each(props, function(v, k) {\n\t\tprefs.define('css.' + k + 'Properties', v, descTemplate({vendor: k}));\n\t\tprefs.define('css.' + k + 'PropertiesAddon', '', descAddonTemplate({vendor: k}));\n\t});\n\t\n\tprefs.define('css.unitlessProperties', 'z-index, line-height, opacity, font-weight, zoom', \n\t\t\t'The list of properties whose values ​​must not contain units.');\n\t\n\tprefs.define('css.intUnit', 'px', 'Default unit for integer values');\n\tprefs.define('css.floatUnit', 'em', 'Default unit for float values');\n\t\n\tprefs.define('css.keywords', 'auto, inherit', \n\t\t\t'A comma-separated list of valid keywords that can be used in CSS abbreviations.');\n\t\n\tprefs.define('css.keywordAliases', 'a:auto, i:inherit, s:solid, da:dashed, do:dotted, t:transparent', \n\t\t\t'A comma-separated list of keyword aliases, used in CSS abbreviation. '\n\t\t\t+ 'Each alias should be defined as <code>alias:keyword_name</code>.');\n\t\n\tprefs.define('css.unitAliases', 'e:em, p:%, x:ex, r:rem', \n\t\t\t'A comma-separated list of unit aliases, used in CSS abbreviation. '\n\t\t\t+ 'Each alias should be defined as <code>alias:unit_value</code>.');\n\t\n\tprefs.define('css.color.short', true, \n\t\t\t'Should color values like <code>#ffffff</code> be shortened to '\n\t\t\t+ '<code>#fff</code> after abbreviation with color was expanded.');\n\t\n\tprefs.define('css.color.case', 'keep', \n\t\t\t'Letter case of color values generated by abbreviations with color '\n\t\t\t+ '(like <code>c#0</code>). Possible values are <code>upper</code>, '\n\t\t\t+ '<code>lower</code> and <code>keep</code>.');\n\t\n\tprefs.define('css.fuzzySearch', true, \n\t\t\t'Enable fuzzy search among CSS snippet names. When enabled, every ' \n\t\t\t+ '<em>unknown</em> snippet will be scored against available snippet '\n\t\t\t+ 'names (not values or CSS properties!). The match with best score '\n\t\t\t+ 'will be used to resolve snippet value. For example, with this ' \n\t\t\t+ 'preference enabled, the following abbreviations are equal: '\n\t\t\t+ '<code>ov:h</code> == <code>ov-h</code> == <code>o-h</code> == '\n\t\t\t+ '<code>oh</code>');\n\t\n\tprefs.define('css.fuzzySearchMinScore', 0.3, \n\t\t\t'The minium score (from 0 to 1) that fuzzy-matched abbreviation should ' \n\t\t\t+ 'achive. Lower values may produce many false-positive matches, '\n\t\t\t+ 'higher values may reduce possible matches.');\n\t\n\tprefs.define('css.alignVendor', false, \n\t\t\t'If set to <code>true</code>, all generated vendor-prefixed properties ' \n\t\t\t+ 'will be aligned by real property name.');\n\t\n\t\n\tfunction isNumeric(ch) {\n\t\tvar code = ch && ch.charCodeAt(0);\n\t\treturn (ch && ch == '.' || (code > 47 && code < 58));\n\t}\n\t\n\t/**\n\t * Check if provided snippet contains only one CSS property and value.\n\t * @param {String} snippet\n\t * @returns {Boolean}\n\t */\n\tfunction isSingleProperty(snippet) {\n\t\tvar utils = require('utils');\n\t\tsnippet = utils.trim(snippet);\n\t\t\n\t\t// check if it doesn't contain a comment and a newline\n\t\tif (~snippet.indexOf('/*') || /[\\n\\r]/.test(snippet)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// check if it's a valid snippet definition\n\t\tif (!/^[a-z0-9\\-]+\\s*\\:/i.test(snippet)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tsnippet = require('tabStops').processText(snippet, {\n\t\t\treplaceCarets: true,\n\t\t\ttabstop: function() {\n\t\t\t\treturn 'value';\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn snippet.split(':').length == 2;\n\t}\n\t\n\t/**\n\t * Normalizes abbreviated value to final CSS one\n\t * @param {String} value\n\t * @returns {String}\n\t */\n\tfunction normalizeValue(value) {\n\t\tif (value.charAt(0) == '-' && !/^\\-[\\.\\d]/.test(value)) {\n\t\t\tvalue = value.replace(/^\\-+/, '');\n\t\t}\n\t\t\n\t\tif (value.charAt(0) == '#') {\n\t\t\treturn normalizeHexColor(value);\n\t\t}\n\t\t\n\t\treturn getKeyword(value);\n\t}\n\t\n\tfunction normalizeHexColor(value) {\n\t\tvar hex = value.replace(/^#+/, '') || '0';\n\t\tif (hex.toLowerCase() == 't') {\n\t\t\treturn 'transparent';\n\t\t}\n\t\t\n\t\tvar repeat = require('utils').repeatString;\n\t\tvar color = null;\n\t\tswitch (hex.length) {\n\t\t\tcase 1:\n\t\t\t\tcolor = repeat(hex, 6);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcolor = repeat(hex, 3);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcolor = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tcolor = hex + hex.substr(0, 2);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tcolor = hex + hex.charAt(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcolor = hex.substr(0, 6);\n\t\t}\n\t\t\n\t\t// color must be shortened?\n\t\tif (prefs.get('css.color.short')) {\n\t\t\tvar p = color.split('');\n\t\t\tif (p[0] == p[1] && p[2] == p[3] && p[4] == p[5]) {\n\t\t\t\tcolor = p[0] + p[2] + p[4];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// should transform case?\n\t\tswitch (prefs.get('css.color.case')) {\n\t\t\tcase 'upper':\n\t\t\t\tcolor = color.toUpperCase();\n\t\t\t\tbreak;\n\t\t\tcase 'lower':\n\t\t\t\tcolor = color.toLowerCase();\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn '#' + color;\n\t}\n\t\n\tfunction getKeyword(name) {\n\t\tvar aliases = prefs.getDict('css.keywordAliases');\n\t\treturn name in aliases ? aliases[name] : name;\n\t}\n\t\n\tfunction getUnit(name) {\n\t\tvar aliases = prefs.getDict('css.unitAliases');\n\t\treturn name in aliases ? aliases[name] : name;\n\t}\n\t\n\tfunction isValidKeyword(keyword) {\n\t\treturn _.include(prefs.getArray('css.keywords'), getKeyword(keyword));\n\t}\n\t\n\t/**\n\t * Check if passed CSS property support specified vendor prefix \n\t * @param {String} property\n\t * @param {String} prefix\n\t */\n\tfunction hasPrefix(property, prefix) {\n\t\tvar info = vendorPrefixes[prefix];\n\t\t\n\t\tif (!info)\n\t\t\tinfo = _.find(vendorPrefixes, function(data) {\n\t\t\t\treturn data.prefix == prefix;\n\t\t\t});\n\t\t\n\t\treturn info && info.supports(property);\n\t}\n\t\n\t/**\n\t * Search for a list of supported prefixes for CSS property. This list\n\t * is used to generate all-prefixed snippet\n\t * @param {String} property CSS property name\n\t * @returns {Array}\n\t */\n\tfunction findPrefixes(property, noAutofill) {\n\t\tvar result = [];\n\t\t_.each(vendorPrefixes, function(obj, prefix) {\n\t\t\tif (hasPrefix(property, prefix)) {\n\t\t\t\tresult.push(prefix);\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (!result.length && !noAutofill) {\n\t\t\t// add all non-obsolete prefixes\n\t\t\t_.each(vendorPrefixes, function(obj, prefix) {\n\t\t\t\tif (!obj.obsolete)\n\t\t\t\t\tresult.push(prefix);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\tfunction addPrefix(name, obj) {\n\t\tif (_.isString(obj))\n\t\t\tobj = {prefix: obj};\n\t\t\n\t\tvendorPrefixes[name] = _.extend({}, prefixObj, obj);\n\t}\n\t\n\tfunction getSyntaxPreference(name, syntax) {\n\t\tif (syntax) {\n\t\t\tvar val = prefs.get(syntax + '.' + name);\n\t\t\tif (!_.isUndefined(val))\n\t\t\t\treturn val;\n\t\t}\n\t\t\n\t\treturn prefs.get('css.' + name);\n\t}\n\t\n\t/**\n\t * Format CSS property according to current syntax dialect\n\t * @param {String} property\n\t * @param {String} syntax\n\t * @returns {String}\n\t */\n\tfunction formatProperty(property, syntax) {\n\t\tvar ix = property.indexOf(':');\n\t\tproperty = property.substring(0, ix).replace(/\\s+$/, '') \n\t\t\t+ getSyntaxPreference('valueSeparator', syntax)\n\t\t\t+ require('utils').trim(property.substring(ix + 1));\n\t\t\n\t\treturn property.replace(/\\s*;\\s*$/, getSyntaxPreference('propertyEnd', syntax));\n\t}\n\t\n\t/**\n\t * Transforms snippet value if required. For example, this transformation\n\t * may add <i>!important</i> declaration to CSS property\n\t * @param {String} snippet\n\t * @param {Boolean} isImportant\n\t * @returns {String}\n\t */\n\tfunction transformSnippet(snippet, isImportant, syntax) {\n\t\tif (!_.isString(snippet))\n\t\t\tsnippet = snippet.data;\n\t\t\n\t\tif (!isSingleProperty(snippet))\n\t\t\treturn snippet;\n\t\t\n\t\tif (isImportant) {\n\t\t\tif (~snippet.indexOf(';')) {\n\t\t\t\tsnippet = snippet.split(';').join(' !important;');\n\t\t\t} else {\n\t\t\t\tsnippet += ' !important';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn formatProperty(snippet, syntax);\n\t}\n\t\n\t/**\n\t * Helper function that parses comma-separated list of elements into array\n\t * @param {String} list\n\t * @returns {Array}\n\t */\n\tfunction parseList(list) {\n\t\tvar result = _.map((list || '').split(','), require('utils').trim);\n\t\treturn result.length ? result : null;\n\t}\n\t\n\tfunction getProperties(key) {\n\t\tvar list = prefs.getArray(key);\n\t\t_.each(prefs.getArray(key + 'Addon'), function(prop) {\n\t\t\tif (prop.charAt(0) == '-') {\n\t\t\t\tlist = _.without(list, prop.substr(1));\n\t\t\t} else {\n\t\t\t\tif (prop.charAt(0) == '+')\n\t\t\t\t\tprop = prop.substr(1);\n\t\t\t\t\n\t\t\t\tlist.push(prop);\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn list;\n\t}\n\t\n\t\n\t// TODO refactor, this looks awkward now\n\taddPrefix('w', {\n\t\tprefix: 'webkit'\n\t});\n\taddPrefix('m', {\n\t\tprefix: 'moz'\n\t});\n\taddPrefix('s', {\n\t\tprefix: 'ms'\n\t});\n\taddPrefix('o', {\n\t\tprefix: 'o'\n\t});\n\t\n\t// I think nobody uses it\n//\taddPrefix('k', {\n//\t\tprefix: 'khtml',\n//\t\tobsolete: true\n//\t});\n\t\n\tvar cssSyntaxes = ['css', 'less', 'sass', 'scss', 'stylus'];\n\t\n\t/**\n\t * XXX register resolver\n\t * @param {TreeNode} node\n\t * @param {String} syntax\n\t */\n\trequire('resources').addResolver(function(node, syntax) {\n\t\tif (_.include(cssSyntaxes, syntax) && node.isElement()) {\n\t\t\treturn module.expandToSnippet(node.abbreviation, syntax);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\tvar ea = require('expandAbbreviation');\n\t/**\n\t * For CSS-like syntaxes, we need to handle a special use case. Some editors\n\t * (like Sublime Text 2) may insert semicolons automatically when user types\n\t * abbreviation. After expansion, user receives a double semicolon. This\n\t * handler automatically removes semicolon from generated content in such cases.\n\t * @param {IEmmetEditor} editor\n\t * @param {String} syntax\n\t * @param {String} profile\n\t */\n\tea.addHandler(function(editor, syntax, profile) {\n\t\tif (!_.include(cssSyntaxes, syntax)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tvar caretPos = editor.getSelectionRange().end;\n\t\tvar abbr = ea.findAbbreviation(editor);\n\t\t\t\n\t\tif (abbr) {\n\t\t\tvar content = emmet.expandAbbreviation(abbr, syntax, profile);\n\t\t\tif (content) {\n\t\t\t\tvar replaceFrom = caretPos - abbr.length;\n\t\t\t\tvar replaceTo = caretPos;\n\t\t\t\tif (editor.getContent().charAt(caretPos) == ';' && content.charAt(content.length - 1) == ';') {\n\t\t\t\t\treplaceTo++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teditor.replaceContent(content, replaceFrom, replaceTo);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Adds vendor prefix\n\t\t * @param {String} name One-character prefix name\n\t\t * @param {Object} obj Object describing vendor prefix\n\t\t * @memberOf cssResolver\n\t\t */\n\t\taddPrefix: addPrefix,\n\t\t\n\t\t/**\n\t\t * Check if passed CSS property supports specified vendor prefix\n\t\t * @param {String} property\n\t\t * @param {String} prefix\n\t\t */\n\t\tsupportsPrefix: hasPrefix,\n\t\t\n\t\t/**\n\t\t * Returns prefixed version of passed CSS property, only if this\n\t\t * property supports such prefix\n\t\t * @param {String} property\n\t\t * @param {String} prefix\n\t\t * @returns\n\t\t */\n\t\tprefixed: function(property, prefix) {\n\t\t\treturn hasPrefix(property, prefix) \n\t\t\t\t? '-' + prefix + '-' + property \n\t\t\t\t: property;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns list of all registered vendor prefixes\n\t\t * @returns {Array}\n\t\t */\n\t\tlistPrefixes: function() {\n\t\t\treturn _.map(vendorPrefixes, function(obj) {\n\t\t\t\treturn obj.prefix;\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns object describing vendor prefix\n\t\t * @param {String} name\n\t\t * @returns {Object}\n\t\t */\n\t\tgetPrefix: function(name) {\n\t\t\treturn vendorPrefixes[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes prefix object\n\t\t * @param {String} name\n\t\t */\n\t\tremovePrefix: function(name) {\n\t\t\tif (name in vendorPrefixes)\n\t\t\t\tdelete vendorPrefixes[name];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extract vendor prefixes from abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {Object} Object containing array of prefixes and clean \n\t\t * abbreviation name\n\t\t */\n\t\textractPrefixes: function(abbr) {\n\t\t\tif (abbr.charAt(0) != '-') {\n\t\t\t\treturn {\n\t\t\t\t\tproperty: abbr,\n\t\t\t\t\tprefixes: null\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\t// abbreviation may either contain sequence of one-character prefixes\n\t\t\t// or just dash, meaning that user wants to produce all possible\n\t\t\t// prefixed properties\n\t\t\tvar i = 1, il = abbr.length, ch;\n\t\t\tvar prefixes = [];\n\t\t\t\n\t\t\twhile (i < il) {\n\t\t\t\tch = abbr.charAt(i);\n\t\t\t\tif (ch == '-') {\n\t\t\t\t\t// end-sequence character found, stop searching\n\t\t\t\t\ti++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (ch in vendorPrefixes) {\n\t\t\t\t\tprefixes.push(ch);\n\t\t\t\t} else {\n\t\t\t\t\t// no prefix found, meaning user want to produce all\n\t\t\t\t\t// vendor-prefixed properties\n\t\t\t\t\tprefixes.length = 0;\n\t\t\t\t\ti = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\n\t\t\t// reached end of abbreviation and no property name left\n\t\t\tif (i == il -1) {\n\t\t\t\ti = 1;\n\t\t\t\tprefixes.length = 1;\n\t\t\t}\n\t\t\t\n\t\t\treturn {\n\t\t\t\tproperty: abbr.substring(i),\n\t\t\t\tprefixes: prefixes.length ? prefixes : 'all'\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Search for value substring in abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {String} Value substring\n\t\t */\n\t\tfindValuesInAbbreviation: function(abbr, syntax) {\n\t\t\tsyntax = syntax || 'css';\n\t\t\t\n\t\t\tvar i = 0, il = abbr.length, value = '', ch;\n\t\t\twhile (i < il) {\n\t\t\t\tch = abbr.charAt(i);\n\t\t\t\tif (isNumeric(ch) || ch == '#' || (ch == '-' && isNumeric(abbr.charAt(i + 1)))) {\n\t\t\t\t\tvalue = abbr.substring(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\n\t\t\t// try to find keywords in abbreviation\n\t\t\tvar property = abbr.substring(0, abbr.length - value.length);\n\t\t\tvar res = require('resources');\n\t\t\tvar keywords = [];\n\t\t\t// try to extract some commonly-used properties\n\t\t\twhile (~property.indexOf('-') && !res.findSnippet(syntax, property)) {\n\t\t\t\tvar parts = property.split('-');\n\t\t\t\tvar lastPart = parts.pop();\n\t\t\t\tif (!isValidKeyword(lastPart)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tkeywords.unshift(lastPart);\n\t\t\t\tproperty = parts.join('-');\n\t\t\t}\n\t\t\t\n\t\t\treturn keywords.join('-') + value;\n\t\t},\n\t\t\n\t\tparseValues: function(str) {\n\t\t\t/** @type StringStream */\n\t\t\tvar stream = require('stringStream').create(str);\n\t\t\tvar values = [];\n\t\t\tvar ch = null;\n\t\t\t\n\t\t\twhile (ch = stream.next()) {\n\t\t\t\tif (ch == '#') {\n\t\t\t\t\tstream.match(/^t|[0-9a-f]+/i, true);\n\t\t\t\t\tvalues.push(stream.current());\n\t\t\t\t} else if (ch == '-') {\n\t\t\t\t\tif (isValidKeyword(_.last(values)) || \n\t\t\t\t\t\t\t( stream.start && isNumeric(str.charAt(stream.start - 1)) )\n\t\t\t\t\t\t) {\n\t\t\t\t\t\tstream.start = stream.pos;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstream.match(/^\\-?[0-9]*(\\.[0-9]+)?[a-z%\\.]*/, true);\n\t\t\t\t\tvalues.push(stream.current());\n\t\t\t\t} else {\n\t\t\t\t\tstream.match(/^[0-9]*(\\.[0-9]*)?[a-z%]*/, true);\n\t\t\t\t\tvalues.push(stream.current());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstream.start = stream.pos;\n\t\t\t}\n\t\t\t\n\t\t\treturn _.map(_.compact(values), normalizeValue);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Extracts values from abbreviation\n\t\t * @param {String} abbr\n\t\t * @returns {Object} Object containing array of values and clean \n\t\t * abbreviation name\n\t\t */\n\t\textractValues: function(abbr) {\n\t\t\t// search for value start\n\t\t\tvar abbrValues = this.findValuesInAbbreviation(abbr);\n\t\t\tif (!abbrValues) {\n\t\t\t\treturn {\n\t\t\t\t\tproperty: abbr,\n\t\t\t\t\tvalues: null\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\treturn {\n\t\t\t\tproperty: abbr.substring(0, abbr.length - abbrValues.length).replace(/-$/, ''),\n\t\t\t\tvalues: this.parseValues(abbrValues)\n\t\t\t};\n\t\t},\n\t\t\n\t\t/**\n\t\t * Normalizes value, defined in abbreviation.\n\t\t * @param {String} value\n\t\t * @param {String} property\n\t\t * @returns {String}\n\t\t */\n\t\tnormalizeValue: function(value, property) {\n\t\t\tproperty = (property || '').toLowerCase();\n\t\t\tvar unitlessProps = prefs.getArray('css.unitlessProperties');\n\t\t\treturn value.replace(/^(\\-?[0-9\\.]+)([a-z]*)$/, function(str, val, unit) {\n\t\t\t\tif (!unit && (val == '0' || _.include(unitlessProps, property)))\n\t\t\t\t\treturn val;\n\t\t\t\t\n\t\t\t\tif (!unit)\n\t\t\t\t\treturn val.replace(/\\.$/, '') + prefs.get(~val.indexOf('.') ? 'css.floatUnit' : 'css.intUnit');\n\t\t\t\t\n\t\t\t\treturn val + getUnit(unit);\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Expands abbreviation into a snippet\n\t\t * @param {String} abbr Abbreviation name to expand\n\t\t * @param {String} value Abbreviation value\n\t\t * @param {String} syntax Currect syntax or dialect. Default is 'css'\n\t\t * @returns {Object} Array of CSS properties and values or predefined\n\t\t * snippet (string or element)\n\t\t */\n\t\texpand: function(abbr, value, syntax) {\n\t\t\tsyntax = syntax || 'css';\n\t\t\tvar resources = require('resources');\n\t\t\tvar autoInsertPrefixes = prefs.get('css.autoInsertVendorPrefixes');\n\t\t\t\n\t\t\t// check if snippet should be transformed to !important\n\t\t\tvar isImportant;\n\t\t\tif (isImportant = /^(.+)\\!$/.test(abbr)) {\n\t\t\t\tabbr = RegExp.$1;\n\t\t\t}\n\t\t\t\n\t\t\t// check if we have abbreviated resource\n\t\t\tvar snippet = resources.findSnippet(syntax, abbr);\n\t\t\tif (snippet && !autoInsertPrefixes) {\n\t\t\t\treturn transformSnippet(snippet, isImportant, syntax);\n\t\t\t}\n\t\t\t\n\t\t\t// no abbreviated resource, parse abbreviation\n\t\t\tvar prefixData = this.extractPrefixes(abbr);\n\t\t\tvar valuesData = this.extractValues(prefixData.property);\n\t\t\tvar abbrData = _.extend(prefixData, valuesData);\n\t\t\t\n\t\t\tif (!snippet) {\n\t\t\t\tsnippet = resources.findSnippet(syntax, abbrData.property);\n\t\t\t} else {\n\t\t\t\tabbrData.values = null;\n\t\t\t}\n\t\t\t\n\t\t\tif (!snippet && prefs.get('css.fuzzySearch')) {\n\t\t\t\t// let’s try fuzzy search\n\t\t\t\tsnippet = resources.fuzzyFindSnippet(syntax, abbrData.property, parseFloat(prefs.get('css.fuzzySearchMinScore')));\n\t\t\t}\n\t\t\t\n\t\t\tif (!snippet) {\n\t\t\t\tsnippet = abbrData.property + ':' + defaultValue;\n\t\t\t} else if (!_.isString(snippet)) {\n\t\t\t\tsnippet = snippet.data;\n\t\t\t}\n\t\t\t\n\t\t\tif (!isSingleProperty(snippet)) {\n\t\t\t\treturn snippet;\n\t\t\t}\n\t\t\t\n\t\t\tvar snippetObj = this.splitSnippet(snippet);\n\t\t\tvar result = [];\n\t\t\tif (!value && abbrData.values) {\n\t\t\t\tvalue = _.map(abbrData.values, function(val) {\n\t\t\t\t\treturn this.normalizeValue(val, snippetObj.name);\n\t\t\t\t}, this).join(' ') + ';';\n\t\t\t}\n\t\t\t\n\t\t\tsnippetObj.value = value || snippetObj.value;\n\t\t\t\n\t\t\tvar prefixes = abbrData.prefixes == 'all' || (!abbrData.prefixes && autoInsertPrefixes) \n\t\t\t\t? findPrefixes(snippetObj.name, autoInsertPrefixes && abbrData.prefixes != 'all')\n\t\t\t\t: abbrData.prefixes;\n\t\t\t\t\n\t\t\t\t\n\t\t\tvar names = [], propName;\n\t\t\t_.each(prefixes, function(p) {\n\t\t\t\tif (p in vendorPrefixes) {\n\t\t\t\t\tpropName = vendorPrefixes[p].transformName(snippetObj.name);\n\t\t\t\t\tnames.push(propName);\n\t\t\t\t\tresult.push(transformSnippet(propName + ':' + snippetObj.value,\n\t\t\t\t\t\t\tisImportant, syntax));\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// put the original property\n\t\t\tresult.push(transformSnippet(snippetObj.name + ':' + snippetObj.value, isImportant, syntax));\n\t\t\tnames.push(snippetObj.name);\n\t\t\t\n\t\t\tif (prefs.get('css.alignVendor')) {\n\t\t\t\tvar pads = require('utils').getStringsPads(names);\n\t\t\t\tresult = _.map(result, function(prop, i) {\n\t\t\t\t\treturn pads[i] + prop;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Same as <code>expand</code> method but transforms output into \n\t\t * Emmet snippet\n\t\t * @param {String} abbr\n\t\t * @param {String} syntax\n\t\t * @returns {String}\n\t\t */\n\t\texpandToSnippet: function(abbr, syntax) {\n\t\t\tvar snippet = this.expand(abbr, null, syntax);\n\t\t\tif (_.isArray(snippet)) {\n\t\t\t\treturn snippet.join('\\n');\n\t\t\t}\n\t\t\t\n\t\t\tif (!_.isString(snippet))\n\t\t\t\treturn snippet.data;\n\t\t\t\n\t\t\treturn String(snippet);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Split snippet into a CSS property-value pair\n\t\t * @param {String} snippet\n\t\t */\n\t\tsplitSnippet: function(snippet) {\n\t\t\tvar utils = require('utils');\n\t\t\tsnippet = utils.trim(snippet);\n\t\t\tif (snippet.indexOf(':') == -1) {\n\t\t\t\treturn {\n\t\t\t\t\tname: snippet,\n\t\t\t\t\tvalue: defaultValue\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tvar pair = snippet.split(':');\n\t\t\t\n\t\t\treturn {\n\t\t\t\tname: utils.trim(pair.shift()),\n\t\t\t\t// replace ${0} tabstop to produce valid vendor-prefixed values\n\t\t\t\t// where possible\n\t\t\t\tvalue: utils.trim(pair.join(':')).replace(/^(\\$\\{0\\}|\\$0)(\\s*;?)$/, '${1}$2')\n\t\t\t};\n\t\t},\n\t\t\n\t\tgetSyntaxPreference: getSyntaxPreference,\n\t\ttransformSnippet: transformSnippet\n\t};\n});\n/**\n * 'Expand Abbreviation' handler that parses gradient definition from under \n * cursor and updates CSS rule with vendor-prefixed values.\n * \n * @memberOf __cssGradientHandlerDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('cssGradient', function(require, _) {\n\tvar defaultLinearDirections = ['top', 'to bottom', '0deg'];\n\t/** Back-reference to current module */\n\tvar module = null;\n\t\n\tvar cssSyntaxes = ['css', 'less', 'sass', 'scss', 'stylus', 'styl'];\n\t\n\tvar reDeg = /\\d+deg/i;\n\tvar reKeyword = /top|bottom|left|right/i;\n\t\n\t// XXX define preferences\n\t/** @type preferences */\n\tvar prefs = require('preferences');\n\tprefs.define('css.gradient.prefixes', 'webkit, moz, o',\n\t\t\t'A comma-separated list of vendor-prefixes for which values should ' \n\t\t\t+ 'be generated.');\n\t\n\tprefs.define('css.gradient.oldWebkit', true,\n\t\t\t'Generate gradient definition for old Webkit implementations');\n\t\n\tprefs.define('css.gradient.omitDefaultDirection', true,\n\t\t'Do not output default direction definition in generated gradients.');\n\t\n\tprefs.define('css.gradient.defaultProperty', 'background-image',\n\t\t'When gradient expanded outside CSS value context, it will produce '\n\t\t\t+ 'properties with this name.');\n\t\n\tprefs.define('css.gradient.fallback', false,\n\t\t\t'With this option enabled, CSS gradient generator will produce '\n\t\t\t+ '<code>background-color</code> property with gradient first color '\n\t\t\t+ 'as fallback for old browsers.');\n\t\n\tfunction normalizeSpace(str) {\n\t\treturn require('utils').trim(str).replace(/\\s+/g, ' ');\n\t}\n\t\n\t/**\n\t * Parses linear gradient definition\n\t * @param {String}\n\t */\n\tfunction parseLinearGradient(gradient) {\n\t\tvar direction = defaultLinearDirections[0];\n\t\t\n\t\t// extract tokens\n\t\t/** @type StringStream */\n\t\tvar stream = require('stringStream').create(require('utils').trim(gradient));\n\t\tvar colorStops = [], ch;\n\t\twhile (ch = stream.next()) {\n\t\t\tif (stream.peek() == ',') {\n\t\t\t\tcolorStops.push(stream.current());\n\t\t\t\tstream.next();\n\t\t\t\tstream.eatSpace();\n\t\t\t\tstream.start = stream.pos;\n\t\t\t} else if (ch == '(') { // color definition, like 'rgb(0,0,0)'\n\t\t\t\tstream.skipTo(')');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// add last token\n\t\tcolorStops.push(stream.current());\n\t\tcolorStops = _.compact(_.map(colorStops, normalizeSpace));\n\t\t\n\t\tif (!colorStops.length)\n\t\t\treturn null;\n\t\t\n\t\t// let's see if the first color stop is actually a direction\n\t\tif (reDeg.test(colorStops[0]) || reKeyword.test(colorStops[0])) {\n\t\t\tdirection = colorStops.shift();\n\t\t}\n\t\t\n\t\treturn {\n\t\t\ttype: 'linear',\n\t\t\tdirection: direction,\n\t\t\tcolorStops: _.map(colorStops, parseColorStop)\n\t\t};\n\t}\n\t\n\t/**\n\t * Parses color stop definition\n\t * @param {String} colorStop\n\t * @returns {Object}\n\t */\n\tfunction parseColorStop(colorStop) {\n\t\tcolorStop = normalizeSpace(colorStop);\n\t\t\n\t\t// find color declaration\n\t\t// first, try complex color declaration, like rgb(0,0,0)\n\t\tvar color = null;\n\t\tcolorStop = colorStop.replace(/^(\\w+\\(.+?\\))\\s*/, function(str, c) {\n\t\t\tcolor = c;\n\t\t\treturn '';\n\t\t});\n\t\t\n\t\tif (!color) {\n\t\t\t// try simple declaration, like yellow, #fco, #ffffff, etc.\n\t\t\tvar parts = colorStop.split(' ');\n\t\t\tcolor = parts[0];\n\t\t\tcolorStop = parts[1] || '';\n\t\t}\n\t\t\n\t\tvar result = {\n\t\t\tcolor: color\n\t\t};\n\t\t\n\t\tif (colorStop) {\n\t\t\t// there's position in color stop definition\n\t\t\tcolorStop.replace(/^(\\-?[\\d\\.]+)([a-z%]+)?$/, function(str, pos, unit) {\n\t\t\t\tresult.position = pos;\n\t\t\t\tif (~pos.indexOf('.')) {\n\t\t\t\t\tunit = '';\n\t\t\t\t} else if (!unit) {\n\t\t\t\t\tunit = '%';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (unit)\n\t\t\t\t\tresult.unit = unit;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * Resolves property name (abbreviation): searches for snippet definition in \n\t * 'resources' and returns new name of matched property\n\t */\n\tfunction resolvePropertyName(name, syntax) {\n\t\tvar res = require('resources');\n\t\tvar prefs = require('preferences');\n\t\tvar snippet = res.findSnippet(syntax, name);\n\t\t\n\t\tif (!snippet && prefs.get('css.fuzzySearch')) {\n\t\t\tsnippet = res.fuzzyFindSnippet(syntax, name, \n\t\t\t\t\tparseFloat(prefs.get('css.fuzzySearchMinScore')));\n\t\t}\n\t\t\n\t\tif (snippet) {\n\t\t\tif (!_.isString(snippet)) {\n\t\t\t\tsnippet = snippet.data;\n\t\t\t}\n\t\t\t\n\t\t\treturn require('cssResolver').splitSnippet(snippet).name;\n\t\t}\n\t}\n\t\n\t/**\n\t * Fills-out implied positions in color-stops. This function is useful for\n\t * old Webkit gradient definitions\n\t */\n\tfunction fillImpliedPositions(colorStops) {\n\t\tvar from = 0;\n\t\t\n\t\t_.each(colorStops, function(cs, i) {\n\t\t\t// make sure that first and last positions are defined\n\t\t\tif (!i)\n\t\t\t\treturn cs.position = cs.position || 0;\n\t\t\t\n\t\t\tif (i == colorStops.length - 1 && !('position' in cs))\n\t\t\t\tcs.position = 1;\n\t\t\t\n\t\t\tif ('position' in cs) {\n\t\t\t\tvar start = colorStops[from].position || 0;\n\t\t\t\tvar step = (cs.position - start) / (i - from);\n\t\t\t\t_.each(colorStops.slice(from, i), function(cs2, j) {\n\t\t\t\t\tcs2.position = start + step * j;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfrom = i;\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/**\n\t * Returns textual version of direction expressed in degrees\n\t * @param {String} direction\n\t * @returns {String}\n\t */\n\tfunction textualDirection(direction) {\n\t\tvar angle = parseFloat(direction);\n\t\t\n\t\tif(!_.isNaN(angle)) {\n\t\t\tswitch(angle % 360) {\n\t\t\t\tcase 0:   return 'left';\n\t\t\t\tcase 90:  return 'bottom';\n\t\t\t\tcase 180: return 'right';\n\t\t\t\tcase 240: return 'top';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn direction;\n\t}\n\t\n\t/**\n\t * Creates direction definition for old Webkit gradients\n\t * @param {String} direction\n\t * @returns {String}\n\t */\n\tfunction oldWebkitDirection(direction) {\n\t\tdirection = textualDirection(direction);\n\t\t\n\t\tif(reDeg.test(direction))\n\t\t\tthrow \"The direction is an angle that can’t be converted.\";\n\t\t\n\t\tvar v = function(pos) {\n\t\t\treturn ~direction.indexOf(pos) ? '100%' : '0';\n\t\t};\n\t\t\n\t\treturn v('right') + ' ' + v('bottom') + ', ' + v('left') + ' ' + v('top');\n\t}\n\t\n\tfunction getPrefixedNames(name) {\n\t\tvar prefixes = prefs.getArray('css.gradient.prefixes');\n\t\tvar names = prefixes \n\t\t\t? _.map(prefixes, function(p) {\n\t\t\t\treturn '-' + p + '-' + name;\n\t\t\t}) \n\t\t\t: [];\n\t\t\n\t\tnames.push(name);\n\t\t\n\t\treturn names;\n\t}\n\t\n\t/**\n\t * Returns list of CSS properties with gradient\n\t * @param {Object} gradient\n\t * @param {String} propertyName Original CSS property name\n\t * @returns {Array}\n\t */\n\tfunction getPropertiesForGradient(gradient, propertyName) {\n\t\tvar props = [];\n\t\tvar css = require('cssResolver');\n\t\t\n\t\tif (prefs.get('css.gradient.fallback') && ~propertyName.toLowerCase().indexOf('background')) {\n\t\t\tprops.push({\n\t\t\t\tname: 'background-color',\n\t\t\t\tvalue: '${1:' + gradient.colorStops[0].color + '}'\n\t\t\t});\n\t\t}\n\t\t\n\t\t_.each(prefs.getArray('css.gradient.prefixes'), function(prefix) {\n\t\t\tvar name = css.prefixed(propertyName, prefix);\n\t\t\tif (prefix == 'webkit' && prefs.get('css.gradient.oldWebkit')) {\n\t\t\t\ttry {\n\t\t\t\t\tprops.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: module.oldWebkitLinearGradient(gradient)\n\t\t\t\t\t});\n\t\t\t\t} catch(e) {}\n\t\t\t}\n\t\t\t\n\t\t\tprops.push({\n\t\t\t\tname: name,\n\t\t\t\tvalue: module.toString(gradient, prefix)\n\t\t\t});\n\t\t});\n\t\t\n\t\treturn props.sort(function(a, b) {\n\t\t\treturn b.name.length - a.name.length;\n\t\t});\n\t}\n\t\n\t/**\n\t * Pastes gradient definition into CSS rule with correct vendor-prefixes\n\t * @param {EditElement} property Matched CSS property\n\t * @param {Object} gradient Parsed gradient\n\t * @param {Range} valueRange If passed, only this range within property \n\t * value will be replaced with gradient. Otherwise, full value will be \n\t * replaced\n\t */\n\tfunction pasteGradient(property, gradient, valueRange) {\n\t\tvar rule = property.parent;\n\t\tvar utils = require('utils');\n\t\tvar alignVendor = require('preferences').get('css.alignVendor');\n\t\t\n\t\t// we may have aligned gradient definitions: find the smallest value\n\t\t// separator\n\t\tvar sep = property.styleSeparator;\n\t\tvar before = property.styleBefore;\n\t\t\n\t\t// first, remove all properties within CSS rule with the same name and\n\t\t// gradient definition\n\t\t_.each(rule.getAll(getPrefixedNames(property.name())), function(item) {\n\t\t\tif (item != property && /gradient/i.test(item.value())) {\n\t\t\t\tif (item.styleSeparator.length < sep.length) {\n\t\t\t\t\tsep = item.styleSeparator;\n\t\t\t\t}\n\t\t\t\tif (item.styleBefore.length < before.length) {\n\t\t\t\t\tbefore = item.styleBefore;\n\t\t\t\t}\n\t\t\t\trule.remove(item);\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (alignVendor) {\n\t\t\t// update prefix\n\t\t\tif (before != property.styleBefore) {\n\t\t\t\tvar fullRange = property.fullRange();\n\t\t\t\trule._updateSource(before, fullRange.start, fullRange.start + property.styleBefore.length);\n\t\t\t\tproperty.styleBefore = before;\n\t\t\t}\n\t\t\t\n\t\t\t// update separator value\n\t\t\tif (sep != property.styleSeparator) {\n\t\t\t\trule._updateSource(sep, property.nameRange().end, property.valueRange().start);\n\t\t\t\tproperty.styleSeparator = sep;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar value = property.value();\n\t\tif (!valueRange)\n\t\t\tvalueRange = require('range').create(0, property.value());\n\t\t\n\t\tvar val = function(v) {\n\t\t\treturn utils.replaceSubstring(value, v, valueRange);\n\t\t};\n\t\t\n\t\t// put vanilla-clean gradient definition into current rule\n\t\tproperty.value(val(module.toString(gradient)) + '${2}');\n\t\t\n\t\t// create list of properties to insert\n\t\tvar propsToInsert = getPropertiesForGradient(gradient, property.name());\n\t\t\n\t\t// align prefixed values\n\t\tif (alignVendor) {\n\t\t\tvar values = _.pluck(propsToInsert, 'value');\n\t\t\tvar names = _.pluck(propsToInsert, 'name');\n\t\t\tvalues.push(property.value());\n\t\t\tnames.push(property.name());\n\t\t\t\n\t\t\tvar valuePads = utils.getStringsPads(_.map(values, function(v) {\n\t\t\t\treturn v.substring(0, v.indexOf('('));\n\t\t\t}));\n\t\t\t\n\t\t\tvar namePads = utils.getStringsPads(names);\n\t\t\tproperty.name(_.last(namePads) + property.name());\n\t\t\t\n\t\t\t_.each(propsToInsert, function(prop, i) {\n\t\t\t\tprop.name = namePads[i] + prop.name;\n\t\t\t\tprop.value = valuePads[i] + prop.value;\n\t\t\t});\n\t\t\t\n\t\t\tproperty.value(_.last(valuePads) + property.value());\n\t\t}\n\t\t\n\t\t// put vendor-prefixed definitions before current rule\n\t\t_.each(propsToInsert, function(prop) {\n\t\t\trule.add(prop.name, prop.value, rule.indexOf(property));\n\t\t});\n\t}\n\t\n\t/**\n\t * Search for gradient definition inside CSS property value\n\t */\n\tfunction findGradient(cssProp) {\n\t\tvar value = cssProp.value();\n\t\tvar gradient = null;\n\t\tvar matchedPart = _.find(cssProp.valueParts(), function(part) {\n\t\t\treturn gradient = module.parse(part.substring(value));\n\t\t});\n\t\t\n\t\tif (matchedPart && gradient) {\n\t\t\treturn {\n\t\t\t\tgradient: gradient,\n\t\t\t\tvalueRange: matchedPart\n\t\t\t};\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Tries to expand gradient outside CSS value \n\t * @param {IEmmetEditor} editor\n\t * @param {String} syntax\n\t */\n\tfunction expandGradientOutsideValue(editor, syntax) {\n\t\tvar propertyName = prefs.get('css.gradient.defaultProperty');\n\t\t\n\t\tif (!propertyName)\n\t\t\treturn false;\n\t\t\n\t\t// assuming that gradient definition is written on new line,\n\t\t// do a simplified parsing\n\t\tvar content = String(editor.getContent());\n\t\t/** @type Range */\n\t\tvar lineRange = require('range').create(editor.getCurrentLineRange());\n\t\t\n\t\t// get line content and adjust range with padding\n\t\tvar line = lineRange.substring(content)\n\t\t\t.replace(/^\\s+/, function(pad) {\n\t\t\t\tlineRange.start += pad.length;\n\t\t\t\treturn '';\n\t\t\t})\n\t\t\t.replace(/\\s+$/, function(pad) {\n\t\t\t\tlineRange.end -= pad.length;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\n\t\tvar css = require('cssResolver');\n\t\tvar gradient = module.parse(line);\n\t\tif (gradient) {\n\t\t\tvar props = getPropertiesForGradient(gradient, propertyName);\n\t\t\tprops.push({\n\t\t\t\tname: propertyName,\n\t\t\t\tvalue: module.toString(gradient) + '${2}'\n\t\t\t});\n\t\t\t\n\t\t\tvar sep = css.getSyntaxPreference('valueSeparator', syntax);\n\t\t\tvar end = css.getSyntaxPreference('propertyEnd', syntax);\n\t\t\t\n\t\t\tif (require('preferences').get('css.alignVendor')) {\n\t\t\t\tvar pads = require('utils').getStringsPads(_.map(props, function(prop) {\n\t\t\t\t\treturn prop.value.substring(0, prop.value.indexOf('('));\n\t\t\t\t}));\n\t\t\t\t_.each(props, function(prop, i) {\n\t\t\t\t\tprop.value = pads[i] + prop.value;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\tprops = _.map(props, function(item) {\n\t\t\t\treturn item.name + sep + item.value + end;\n\t\t\t});\n\t\t\t\n\t\t\teditor.replaceContent(props.join('\\n'), lineRange.start, lineRange.end);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Search for gradient definition inside CSS value under cursor\n\t * @param {String} content\n\t * @param {Number} pos\n\t * @returns {Object}\n\t */\n\tfunction findGradientFromPosition(content, pos) {\n\t\tvar cssProp = null;\n\t\t/** @type EditContainer */\n\t\tvar cssRule = require('cssEditTree').parseFromPosition(content, pos, true);\n\t\t\n\t\tif (cssRule) {\n\t\t\tcssProp = cssRule.itemFromPosition(pos, true);\n\t\t\tif (!cssProp) {\n\t\t\t\t// in case user just started writing CSS property\n\t\t\t\t// and didn't include semicolon–try another approach\n\t\t\t\tcssProp = _.find(cssRule.list(), function(elem) {\n\t\t\t\t\treturn elem.range(true).end == pos;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn {\n\t\t\trule: cssRule,\n\t\t\tproperty: cssProp\n\t\t};\n\t}\n\t\n\t// XXX register expand abbreviation handler\n\t/**\n\t * @param {IEmmetEditor} editor\n\t * @param {String} syntax\n\t * @param {String} profile\n\t */\n\trequire('expandAbbreviation').addHandler(function(editor, syntax, profile) {\n\t\tvar info = require('editorUtils').outputInfo(editor, syntax, profile);\n\t\tif (!_.include(cssSyntaxes, info.syntax))\n\t\t\treturn false;\n\t\t\n\t\t// let's see if we are expanding gradient definition\n\t\tvar caret = editor.getCaretPos();\n\t\tvar content = info.content;\n\t\tvar css = findGradientFromPosition(content, caret);\n\t\t\n\t\tif (css.property) {\n\t\t\t// make sure that caret is inside property value with gradient \n\t\t\t// definition\n\t\t\tvar g = findGradient(css.property);\n\t\t\tif (g) {\n\t\t\t\tvar ruleStart = css.rule.options.offset || 0;\n\t\t\t\tvar ruleEnd = ruleStart + css.rule.toString().length;\n\t\t\t\t\n\t\t\t\t// Handle special case:\n\t\t\t\t// user wrote gradient definition between existing CSS \n\t\t\t\t// properties and did not finished it with semicolon.\n\t\t\t\t// In this case, we have semicolon right after gradient \n\t\t\t\t// definition and re-parse rule again\n\t\t\t\tif (/[\\n\\r]/.test(css.property.value())) {\n\t\t\t\t\t// insert semicolon at the end of gradient definition\n\t\t\t\t\tvar insertPos = css.property.valueRange(true).start + g.valueRange.end;\n\t\t\t\t\tcontent = require('utils').replaceSubstring(content, ';', insertPos);\n\t\t\t\t\tvar newCss = findGradientFromPosition(content, caret);\n\t\t\t\t\tif (newCss.property) {\n\t\t\t\t\t\tg = findGradient(newCss.property);\n\t\t\t\t\t\tcss = newCss;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// make sure current property has terminating semicolon\n\t\t\t\tcss.property.end(';');\n\t\t\t\t\n\t\t\t\t// resolve CSS property name\n\t\t\t\tvar resolvedName = resolvePropertyName(css.property.name(), syntax);\n\t\t\t\tif (resolvedName) {\n\t\t\t\t\tcss.property.name(resolvedName);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpasteGradient(css.property, g.gradient, g.valueRange);\n\t\t\t\teditor.replaceContent(css.rule.toString(), ruleStart, ruleEnd, true);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn expandGradientOutsideValue(editor, syntax);\n\t});\n\t\n\t// XXX register \"Reflect CSS Value\" action delegate\n\t/**\n\t * @param {EditElement} property\n\t */\n\trequire('reflectCSSValue').addHandler(function(property) {\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar g = findGradient(property);\n\t\tif (!g)\n\t\t\treturn false;\n\t\t\n\t\tvar value = property.value();\n\t\tvar val = function(v) {\n\t\t\treturn utils.replaceSubstring(value, v, g.valueRange);\n\t\t};\n\t\t\n\t\t// reflect value for properties with the same name\n\t\t_.each(property.parent.getAll(getPrefixedNames(property.name())), function(prop) {\n\t\t\tif (prop === property)\n\t\t\t\treturn;\n\t\t\t\n\t\t\t// check if property value starts with gradient definition\n\t\t\tvar m = prop.value().match(/^\\s*(\\-([a-z]+)\\-)?linear\\-gradient/);\n\t\t\tif (m) {\n\t\t\t\tprop.value(val(module.toString(g.gradient, m[2] || '')));\n\t\t\t} else if (m = prop.value().match(/\\s*\\-webkit\\-gradient/)) {\n\t\t\t\t// old webkit gradient definition\n\t\t\t\tprop.value(val(module.oldWebkitLinearGradient(g.gradient)));\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn true;\n\t});\n\t\n\treturn module = {\n\t\t/**\n\t\t * Parses gradient definition\n\t\t * @param {String} gradient\n\t\t * @returns {Object}\n\t\t */\n\t\tparse: function(gradient) {\n\t\t\tvar result = null;\n\t\t\trequire('utils').trim(gradient).replace(/^([\\w\\-]+)\\((.+?)\\)$/, function(str, type, definition) {\n\t\t\t\t// remove vendor prefix\n\t\t\t\ttype = type.toLowerCase().replace(/^\\-[a-z]+\\-/, '');\n\t\t\t\tif (type == 'linear-gradient' || type == 'lg') {\n\t\t\t\t\tresult = parseLinearGradient(definition);\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn str;\n\t\t\t});\n\t\t\t\n\t\t\treturn result;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Produces linear gradient definition used in early Webkit \n\t\t * implementations\n\t\t * @param {Object} gradient Parsed gradient\n\t\t * @returns {String}\n\t\t */\n\t\toldWebkitLinearGradient: function(gradient) {\n\t\t\tif (_.isString(gradient))\n\t\t\t\tgradient = this.parse(gradient);\n\t\t\t\n\t\t\tif (!gradient)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tvar colorStops = _.map(gradient.colorStops, _.clone);\n\t\t\t\n\t\t\t// normalize color-stops position\n\t\t\t_.each(colorStops, function(cs) {\n\t\t\t\tif (!('position' in cs)) // implied position\n\t\t\t\t\treturn;\n\t\t\t\t\n\t\t\t\tif (~cs.position.indexOf('.') || cs.unit == '%') {\n\t\t\t\t\tcs.position = parseFloat(cs.position) / (cs.unit == '%' ? 100 : 1);\n\t\t\t\t} else {\n\t\t\t\t\tthrow \"Can't convert color stop '\" + (cs.position + (cs.unit || '')) + \"'\";\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tfillImpliedPositions(colorStops);\n\t\t\t\n\t\t\t// transform color-stops into string representation\n\t\t\tcolorStops = _.map(colorStops, function(cs, i) {\n\t\t\t\tif (!cs.position && !i)\n\t\t\t\t\treturn 'from(' + cs.color + ')';\n\t\t\t\t\n\t\t\t\tif (cs.position == 1 && i == colorStops.length - 1)\n\t\t\t\t\treturn 'to(' + cs.color + ')';\n\t\t\t\t\n\t\t\t\treturn 'color-stop(' + (cs.position.toFixed(2).replace(/\\.?0+$/, '')) + ', ' + cs.color + ')';\n\t\t\t});\n\t\t\t\n\t\t\treturn '-webkit-gradient(linear, ' \n\t\t\t\t+ oldWebkitDirection(gradient.direction)\n\t\t\t\t+ ', '\n\t\t\t\t+ colorStops.join(', ')\n\t\t\t\t+ ')';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns string representation of parsed gradient\n\t\t * @param {Object} gradient Parsed gradient\n\t\t * @param {String} prefix Vendor prefix\n\t\t * @returns {String}\n\t\t */\n\t\ttoString: function(gradient, prefix) {\n\t\t\tif (gradient.type == 'linear') {\n\t\t\t\tvar fn = (prefix ? '-' + prefix + '-' : '') + 'linear-gradient';\n\t\t\t\t\n\t\t\t\t// transform color-stops\n\t\t\t\tvar colorStops = _.map(gradient.colorStops, function(cs) {\n\t\t\t\t\treturn cs.color + ('position' in cs \n\t\t\t\t\t\t\t? ' ' + cs.position + (cs.unit || '')\n\t\t\t\t\t\t\t: '');\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (gradient.direction \n\t\t\t\t\t\t&& (!prefs.get('css.gradient.omitDefaultDirection') \n\t\t\t\t\t\t|| !_.include(defaultLinearDirections, gradient.direction))) {\n\t\t\t\t\tcolorStops.unshift(gradient.direction);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn fn + '(' + colorStops.join(', ') + ')';\n\t\t\t}\n\t\t}\n\t};\n});/**\n * Module adds support for generators: a regexp-based abbreviation resolver \n * that can produce custom output.\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/** @type HandlerList */\n\tvar generators = require('handlerList').create();\n\tvar resources = require('resources');\n\t\n\t_.extend(resources, {\n\t\t/**\n\t\t * Add generator. A generator function <code>fn</code> will be called \n\t\t * only if current abbreviation matches <code>regexp</code> regular \n\t\t * expression and this function should return <code>null</code> if\n\t\t * abbreviation cannot be resolved\n\t\t * @param {RegExp} regexp Regular expression for abbreviation element name\n\t\t * @param {Function} fn Resolver function\n\t\t * @param {Object} options Options list as described in \n\t\t * {@link HandlerList#add()} method\n\t\t */\n\t\taddGenerator: function(regexp, fn, options) {\n\t\t\tif (_.isString(regexp))\n\t\t\t\tregexp = new RegExp(regexp);\n\t\t\t\n\t\t\tgenerators.add(function(node, syntax) {\n\t\t\t\tvar m;\n\t\t\t\tif ((m = regexp.exec(node.name()))) {\n\t\t\t\t\treturn fn(m, node, syntax);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn null;\n\t\t\t}, options);\n\t\t}\n\t});\n\t\n\tresources.addResolver(function(node, syntax) {\n\t\treturn generators.exec(null, _.toArray(arguments));\n\t});\n});/**\n * Module for resolving tag names: returns best matched tag name for child\n * element based on passed parent's tag name. Also provides utility function\n * for element type detection (inline, block-level, empty)\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.define('tagName', function(require, _) {\n\tvar elementTypes = {\n//\t\tempty: 'area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed,keygen,command'.split(','),\n\t\tempty: [],\n\t\tblockLevel: 'address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,link,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul,h1,h2,h3,h4,h5,h6'.split(','),\n\t\tinlineLevel: 'a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'.split(',')\n\t};\n\t\n\tvar elementMap = {\n\t\t'p': 'span',\n\t\t'ul': 'li',\n\t\t'ol': 'li',\n\t\t'table': 'tr',\n\t\t'tr': 'td',\n\t\t'tbody': 'tr',\n\t\t'thead': 'tr',\n\t\t'tfoot': 'tr',\n\t\t'colgroup': 'col',\n\t\t'select': 'option',\n\t\t'optgroup': 'option',\n\t\t'audio': 'source',\n\t\t'video': 'source',\n\t\t'object': 'param',\n\t\t'map': 'area'\n\t};\n\t\n\treturn {\n\t\t/**\n\t\t * Returns best matched child element name for passed parent's\n\t\t * tag name\n\t\t * @param {String} name\n\t\t * @returns {String}\n\t\t * @memberOf tagName\n\t\t */\n\t\tresolve: function(name) {\n\t\t\tname = (name || '').toLowerCase();\n\t\t\t\n\t\t\tif (name in elementMap)\n\t\t\t\treturn this.getMapping(name);\n\t\t\t\n\t\t\tif (this.isInlineLevel(name))\n\t\t\t\treturn 'span';\n\t\t\t\n\t\t\treturn 'div';\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns mapped child element name for passed parent's name \n\t\t * @param {String} name\n\t\t * @returns {String}\n\t\t */\n\t\tgetMapping: function(name) {\n\t\t\treturn elementMap[name.toLowerCase()];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element name belongs to inline-level element\n\t\t * @param {String} name\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisInlineLevel: function(name) {\n\t\t\treturn this.isTypeOf(name, 'inlineLevel');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element belongs to block-level element.\n\t\t * For better matching of unknown elements (for XML, for example), \n\t\t * you should use <code>!this.isInlineLevel(name)</code>\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisBlockLevel: function(name) {\n\t\t\treturn this.isTypeOf(name, 'blockLevel');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Check if passed element is void (i.e. should not have closing tag).\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisEmptyElement: function(name) {\n\t\t\treturn this.isTypeOf(name, 'empty');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Generic function for testing if element name belongs to specified\n\t\t * elements collection\n\t\t * @param {String} name Element name\n\t\t * @param {String} type Collection name\n\t\t * @returns {Boolean}\n\t\t */\n\t\tisTypeOf: function(name, type) {\n\t\t\treturn _.include(elementTypes[type], name);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new parent–child mapping\n\t\t * @param {String} parent\n\t\t * @param {String} child\n\t\t */\n\t\taddMapping: function(parent, child) {\n\t\t\telementMap[parent] = child;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes parent-child mapping\n\t\t */\n\t\tremoveMapping: function(parent) {\n\t\t\tif (parent in elementMap)\n\t\t\t\tdelete elementMap[parent];\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds new element into collection\n\t\t * @param {String} name Element name\n\t\t * @param {String} collection Collection name\n\t\t */\n\t\taddElementToCollection: function(name, collection) {\n\t\t\tif (!elementTypes[collection])\n\t\t\t\telementTypes[collection] = [];\n\t\t\t\n\t\t\tvar col = this.getCollection(collection);\n\t\t\tif (!_.include(col, name))\n\t\t\t\tcol.push(name);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Removes element name from specified collection\n\t\t * @param {String} name Element name\n\t\t * @param {String} collection Collection name\n\t\t * @returns\n\t\t */\n\t\tremoveElementFromCollection: function(name, collection) {\n\t\t\tif (collection in elementTypes) {\n\t\t\t\telementTypes[collection] = _.without(this.getCollection(collection), name);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Returns elements name collection\n\t\t * @param {String} name Collection name\n\t\t * @returns {Array}\n\t\t */\n\t\tgetCollection: function(name) {\n\t\t\treturn elementTypes[name];\n\t\t}\n\t};\n});/**\n * Filter for aiding of writing elements with complex class names as described\n * in Yandex's BEM (Block, Element, Modifier) methodology. This filter will\n * automatically inherit block and element names from parent elements and insert\n * them into child element classes\n * @memberOf __bemFilterDefine\n * @constructor\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar prefs = require('preferences');\n\tprefs.define('bem.elementSeparator', '__', 'Class name’s element separator.');\n\tprefs.define('bem.modifierSeparator', '_', 'Class name’s modifier separator.');\n\tprefs.define('bem.shortElementPrefix', '-', \n\t\t\t'Symbol for describing short “block-element” notation. Class names '\n\t\t\t+ 'prefixed with this symbol will be treated as element name for parent‘s '\n\t\t\t+ 'block name. Each symbol instance traverses one level up in parsed ' \n\t\t\t+ 'tree for block name lookup. Empty value will disable short notation.');\n\t\n\tvar shouldRunHtmlFilter = false;\n\t\n\tfunction getSeparators() {\n\t\treturn {\n\t\t\telement: prefs.get('bem.elementSeparator'),\n\t\t\tmodifier: prefs.get('bem.modifierSeparator')\n\t\t};\n\t}\n\t\n\t/**\n\t * @param {AbbreviationNode} item\n\t */\n\tfunction bemParse(item) {\n\t\tif (require('abbreviationUtils').isSnippet(item))\n\t\t\treturn item;\n\t\t\n\t\t// save BEM stuff in cache for faster lookups\n\t\titem.__bem = {\n\t\t\tblock: '',\n\t\t\telement: '',\n\t\t\tmodifier: ''\n\t\t};\n\t\t\n\t\tvar classNames = normalizeClassName(item.attribute('class')).split(' ');\n\t\t\n\t\t// guess best match for block name\n\t\tvar reBlockName = /^[a-z]\\-/i;\n\t\titem.__bem.block = _.find(classNames, function(name) {\n\t\t\treturn reBlockName.test(name);\n\t\t});\n\t\t\n\t\t// guessing doesn't worked, pick first class name as block name\n\t\tif (!item.__bem.block) {\n\t\t\treBlockName = /^[a-z]/i;\n\t\t\titem.__bem.block = _.find(classNames, function(name) {\n\t\t\t\treturn reBlockName.test(name);\n\t\t\t}) || '';\n\t\t}\n\t\t\n\t\tclassNames = _.chain(classNames)\n\t\t\t.map(function(name) {return processClassName(name, item);})\n\t\t\t.flatten()\n\t\t\t.uniq()\n\t\t\t.value()\n\t\t\t.join(' ');\n\t\t\n\t\tif (classNames)\n\t\t\titem.attribute('class', classNames);\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * @param {String} className\n\t * @returns {String}\n\t */\n\tfunction normalizeClassName(className) {\n\t\tvar utils = require('utils');\n\t\tclassName = (' ' + (className || '') + ' ').replace(/\\s+/g, ' ');\n\t\t\n\t\tvar shortSymbol = prefs.get('bem.shortElementPrefix');\n\t\tif (shortSymbol) {\n\t\t\tvar re = new RegExp('\\\\s(' + utils.escapeForRegexp(shortSymbol) + '+)', 'g');\n\t\t\tclassName = className.replace(re, function(str, p1) {\n\t\t\t\treturn ' ' + utils.repeatString(getSeparators().element, p1.length);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn utils.trim(className);\n\t}\n\t\n\t/**\n\t * Processes class name\n\t * @param {String} name Class name item to process\n\t * @param {AbbreviationNode} item Host node for provided class name\n\t * @returns Processed class name. May return <code>Array</code> of\n\t * class names \n\t */\n\tfunction processClassName(name, item) {\n\t\tname = transformClassName(name, item, 'element');\n\t\tname = transformClassName(name, item, 'modifier');\n\t\t\n\t\t// expand class name\n\t\t// possible values:\n\t\t// * block__element\n\t\t// * block__element_modifier\n\t\t// * block__element_modifier1_modifier2\n\t\t// * block_modifier\n\t\tvar block = '', element = '', modifier = '';\n\t\tvar separators = getSeparators();\n\t\tif (~name.indexOf(separators.element)) {\n\t\t\tvar blockElem = name.split(separators.element);\n\t\t\tvar elemModifiers = blockElem[1].split(separators.modifier);\n\t\t\t\n\t\t\tblock = blockElem[0];\n\t\t\telement = elemModifiers.shift();\n\t\t\tmodifier = elemModifiers.join(separators.modifier);\n\t\t} else if (~name.indexOf(separators.modifier)) {\n\t\t\tvar blockModifiers = name.split(separators.modifier);\n\t\t\t\n\t\t\tblock = blockModifiers.shift();\n\t\t\tmodifier = blockModifiers.join(separators.modifier);\n\t\t}\n\t\t\n\t\tif (block || element || modifier) {\n\t\t\tif (!block) {\n\t\t\t\tblock = item.__bem.block;\n\t\t\t}\n\t\t\t\n\t\t\t// inherit parent bem element, if exists\n//\t\t\tif (item.parent && item.parent.__bem && item.parent.__bem.element)\n//\t\t\t\telement = item.parent.__bem.element + separators.element + element;\n\t\t\t\n\t\t\t// produce multiple classes\n\t\t\tvar prefix = block;\n\t\t\tvar result = [];\n\t\t\t\n\t\t\tif (element) {\n\t\t\t\tprefix += separators.element + element;\n\t\t\t\tresult.push(prefix);\n\t\t\t} else {\n\t\t\t\tresult.push(prefix);\n\t\t\t}\n\t\t\t\n\t\t\tif (modifier) {\n\t\t\t\tresult.push(prefix + separators.modifier + modifier);\n\t\t\t}\n\t\t\t\n\t\t\titem.__bem.block = block;\n\t\t\titem.__bem.element = element;\n\t\t\titem.__bem.modifier = modifier;\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\t// ...otherwise, return processed or original class name\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Low-level function to transform user-typed class name into full BEM class\n\t * @param {String} name Class name item to process\n\t * @param {AbbreviationNode} item Host node for provided class name\n\t * @param {String} entityType Type of entity to be tried to transform \n\t * ('element' or 'modifier')\n\t * @returns {String} Processed class name or original one if it can't be\n\t * transformed\n\t */\n\tfunction transformClassName(name, item, entityType) {\n\t\tvar separators = getSeparators();\n\t\tvar reSep = new RegExp('^(' + separators[entityType] + ')+', 'g');\n\t\tif (reSep.test(name)) {\n\t\t\tvar depth = 0; // parent lookup depth\n\t\t\tvar cleanName = name.replace(reSep, function(str, p1) {\n\t\t\t\tdepth = str.length / separators[entityType].length;\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\t// find donor element\n\t\t\tvar donor = item;\n\t\t\twhile (donor.parent && depth--) {\n\t\t\t\tdonor = donor.parent;\n\t\t\t}\n\t\t\t\n\t\t\tif (!donor || !donor.__bem)\n\t\t\t\tdonor = item;\n\t\t\t\n\t\t\tif (donor && donor.__bem) {\n\t\t\t\tvar prefix = donor.__bem.block;\n\t\t\t\t\n\t\t\t\t// decide if we should inherit element name\n//\t\t\t\tif (entityType == 'element') {\n//\t\t\t\t\tvar curElem = cleanName.split(separators.modifier, 1)[0];\n//\t\t\t\t\tif (donor.__bem.element && donor.__bem.element != curElem)\n//\t\t\t\t\t\tprefix += separators.element + donor.__bem.element;\n//\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (entityType == 'modifier' &&  donor.__bem.element)\n\t\t\t\t\tprefix += separators.element + donor.__bem.element;\n\t\t\t\t\n\t\t\t\treturn prefix + separators[entityType] + cleanName;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Recursive function for processing tags, which extends class names \n\t * according to BEM specs: http://bem.github.com/bem-method/pages/beginning/beginning.ru.html\n\t * <br><br>\n\t * It does several things:<br>\n\t * <ul>\n\t * <li>Expands complex class name (according to BEM symbol semantics):\n\t * .block__elem_modifier → .block.block__elem.block__elem_modifier\n\t * </li>\n\t * <li>Inherits block name on child elements: \n\t * .b-block > .__el > .__el → .b-block > .b-block__el > .b-block__el__el\n\t * </li>\n\t * <li>Treats first dash symbol as '__'</li>\n\t * <li>Double underscore (or typographic '–') is also treated as an element \n\t * level lookup, e.g. ____el will search for element definition in parent’s \n\t * parent element:\n\t * .b-block > .__el1 > .____el2 → .b-block > .b-block__el1 > .b-block__el2\n\t * </li>\n\t * </ul>\n\t * \n\t * @param {AbbreviationNode} tree\n\t * @param {Object} profile\n\t */\n\tfunction process(tree, profile) {\n\t\tif (tree.name)\n\t\t\tbemParse(tree, profile);\n\t\t\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t_.each(tree.children, function(item) {\n\t\t\tprocess(item, profile);\n\t\t\tif (!abbrUtils.isSnippet(item) && item.start)\n\t\t\t\tshouldRunHtmlFilter = true;\n\t\t});\n\t\t\n\t\treturn tree;\n\t};\n\t\n\trequire('filters').add('bem', function(tree, profile) {\n\t\tshouldRunHtmlFilter = false;\n\t\ttree = process(tree, profile);\n\t\t// in case 'bem' filter is applied after 'html' filter: run it again\n\t\t// to update output\n\t\tif (shouldRunHtmlFilter) {\n\t\t\ttree = require('filters').apply(tree, 'html', profile);\n\t\t}\n\t\t\n\t\treturn tree;\n\t});\n});\n\n/**\n * Comment important tags (with 'id' and 'class' attributes)\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __commentFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t// define some preferences\n\t/** @type emmet.preferences */\n\tvar prefs = require('preferences');\n\t\n\tprefs.define('filter.commentAfter', \n\t\t\t'\\n<!-- /<%= attr(\"id\", \"#\") %><%= attr(\"class\", \".\") %> -->',\n\t\t\t'A definition of comment that should be placed <i>after</i> matched '\n\t\t\t+ 'element when <code>comment</code> filter is applied. This definition '\n\t\t\t+ 'is an ERB-style template passed to <code>_.template()</code> '\n\t\t\t+ 'function (see Underscore.js docs for details). In template context, '\n\t\t\t+ 'the following properties and functions are availabe:\\n'\n\t\t\t+ '<ul>'\n\t\t\t\n\t\t\t+ '<li><code>attr(name, before, after)</code> – a function that outputs' \n\t\t\t+ 'specified attribute value concatenated with <code>before</code> ' \n\t\t\t+ 'and <code>after</code> strings. If attribute doesn\\'t exists, the ' \n\t\t\t+ 'empty string will be returned.</li>'\n\t\t\t\n\t\t\t+ '<li><code>node</code> – current node (instance of <code>AbbreviationNode</code>)</li>'\n\t\t\t\n\t\t\t+ '<li><code>name</code> – name of current tag</li>'\n\t\t\t\n\t\t\t+ '<li><code>padding</code> – current string padding, can be used ' \n\t\t\t+ 'for formatting</li>'\n\t\t\t\n\t\t\t+'</ul>');\n\t\n\tprefs.define('filter.commentBefore', \n\t\t\t'',\n\t\t\t'A definition of comment that should be placed <i>before</i> matched '\n\t\t\t+ 'element when <code>comment</code> filter is applied. '\n\t\t\t+ 'For more info, read description of <code>filter.commentAfter</code> '\n\t\t\t+ 'property');\n\t\n\tprefs.define('filter.commentTrigger', 'id, class',\n\t\t\t'A comma-separated list of attribute names that should exist in abbreviatoin '\n\t\t\t+ 'where comment should be added. If you wish to add comment for '\n\t\t\t+ 'every element, set this option to <code>*</code>');\n\t\n\t/**\n\t * Add comments to tag\n\t * @param {AbbreviationNode} node\n\t */\n\tfunction addComments(node, templateBefore, templateAfter) {\n\t\tvar utils = require('utils');\n\t\t\n\t\t// check if comments should be added\n\t\tvar trigger = prefs.get('filter.commentTrigger');\n\t\tif (trigger != '*') {\n\t\t\tvar shouldAdd = _.find(trigger.split(','), function(name) {\n\t\t\t\treturn !!node.attribute(utils.trim(name));\n\t\t\t});\n\t\t\tif (!shouldAdd) return;\n\t\t}\n\t\t\n\t\tvar ctx = {\n\t\t\tnode: node,\n\t\t\tname: node.name(),\n\t\t\tpadding: node.parent ? node.parent.padding : '',\n\t\t\tattr: function(name, before, after) {\n\t\t\t\tvar attr = node.attribute(name);\n\t\t\t\tif (attr) {\n\t\t\t\t\treturn (before || '') + attr + (after || '');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar nodeBefore = utils.normalizeNewline(templateBefore ? templateBefore(ctx) : '');\n\t\tvar nodeAfter = utils.normalizeNewline(templateAfter ? templateAfter(ctx) : '');\n\t\t\n\t\tnode.start = node.start.replace(/</, nodeBefore + '<');\n\t\tnode.end = node.end.replace(/>/, '>' + nodeAfter);\n\t}\n\t\n\tfunction process(tree, before, after) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (abbrUtils.isBlock(item))\n\t\t\t\taddComments(item, before, after);\n\t\t\t\n\t\t\tprocess(item, before, after);\n\t\t});\n\t\t\t\n\t\treturn tree;\n\t}\n\t\n\trequire('filters').add('c', function(tree) {\n\t\tvar templateBefore = _.template(prefs.get('filter.commentBefore'));\n\t\tvar templateAfter = _.template(prefs.get('filter.commentAfter'));\n\t\t\n\t\treturn process(tree, templateBefore, templateAfter);\n\t});\n});\n/**\n * Filter for escaping unsafe XML characters: <, >, &\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n */\nemmet.exec(function(require, _) {\n\tvar charMap = {\n\t\t'<': '&lt;',\n\t\t'>': '&gt;',\n\t\t'&': '&amp;'\n\t};\n\t\n\tfunction escapeChars(str) {\n\t\treturn str.replace(/([<>&])/g, function(str, p1){\n\t\t\treturn charMap[p1];\n\t\t});\n\t}\n\t\n\trequire('filters').add('e', function process(tree) {\n\t\t_.each(tree.children, function(item) {\n\t\t\titem.start = escapeChars(item.start);\n\t\t\titem.end = escapeChars(item.end);\n\t\t\titem.content = escapeChars(item.content);\n\t\t\tprocess(item);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Generic formatting filter: creates proper indentation for each tree node,\n * placing \"%s\" placeholder where the actual output should be. You can use\n * this filter to preformat tree and then replace %s placeholder to whatever you\n * need. This filter should't be called directly from editor as a part \n * of abbreviation.\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __formatFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _){\n\tvar placeholder = '%s';\n\t\n\t/** @type preferences */\n\tvar prefs = require('preferences');\n\tprefs.define('format.noIndentTags', 'html', \n\t\t\t'A comma-separated list of tag names that should not get inner indentation.');\n\t\n\tprefs.define('format.forceIndentationForTags', 'body', \n\t\t'A comma-separated list of tag names that should <em>always</em> get inner indentation.');\n\t\n\t/**\n\t * Get indentation for given node\n\t * @param {AbbreviationNode} node\n\t * @returns {String}\n\t */\n\tfunction getIndentation(node) {\n\t\tif (_.include(prefs.getArray('format.noIndentTags') || [], node.name())) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\treturn require('resources').getVariable('indentation');\n\t}\n\t\n\t/**\n\t * Test if passed node has block-level sibling element\n\t * @param {AbbreviationNode} item\n\t * @return {Boolean}\n\t */\n\tfunction hasBlockSibling(item) {\n\t\treturn item.parent && require('abbreviationUtils').hasBlockChildren(item.parent);\n\t}\n\t\n\t/**\n\t * Test if passed item is very first child in parsed tree\n\t * @param {AbbreviationNode} item\n\t */\n\tfunction isVeryFirstChild(item) {\n\t\treturn item.parent && !item.parent.parent && !item.index();\n\t}\n\t\n\t/**\n\t * Check if a newline should be added before element\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t * @return {Boolean}\n\t */\n\tfunction shouldAddLineBreak(node, profile) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tif (profile.tag_nl === true || abbrUtils.isBlock(node))\n\t\t\treturn true;\n\t\t\n\t\tif (!node.parent || !profile.inline_break)\n\t\t\treturn false;\n\t\t\n\t\t// check if there are required amount of adjacent inline element\n\t\treturn shouldFormatInline(node.parent, profile);\n}\n\t\n\t/**\n\t * Need to add newline because <code>item</code> has too many inline children\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t */\n\tfunction shouldBreakChild(node, profile) {\n\t\t// we need to test only one child element, because \n\t\t// hasBlockChildren() method will do the rest\n\t\treturn node.children.length && shouldAddLineBreak(node.children[0], profile);\n\t}\n\t\n\tfunction shouldFormatInline(node, profile) {\n\t\tvar nodeCount = 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\treturn !!_.find(node.children, function(child) {\n\t\t\tif (child.isTextNode() || !abbrUtils.isInline(child))\n\t\t\t\tnodeCount = 0;\n\t\t\telse if (abbrUtils.isInline(child))\n\t\t\t\tnodeCount++;\n\t\t\t\n\t\t\tif (nodeCount >= profile.inline_break)\n\t\t\t\treturn true;\n\t\t});\n\t}\n\t\n\tfunction isRoot(item) {\n\t\treturn !item.parent;\n\t}\n\t\n\t/**\n\t * Processes element with matched resource of type <code>snippet</code>\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processSnippet(item, profile, level) {\n\t\titem.start = item.end = '';\n\t\tif (!isVeryFirstChild(item) && profile.tag_nl !== false && shouldAddLineBreak(item, profile)) {\n\t\t\t// check if we’re not inside inline element\n\t\t\tif (isRoot(item.parent) || !require('abbreviationUtils').isInline(item.parent)) {\n\t\t\t\titem.start = require('utils').getNewline() + item.start;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Check if we should add line breaks inside inline element\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t * @return {Boolean}\n\t */\n\tfunction shouldBreakInsideInline(node, profile) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar hasBlockElems = _.any(node.children, function(child) {\n\t\t\tif (abbrUtils.isSnippet(child))\n\t\t\t\treturn false;\n\t\t\t\n\t\t\treturn !abbrUtils.isInline(child);\n\t\t});\n\t\t\n\t\tif (!hasBlockElems) {\n\t\t\treturn shouldFormatInline(node, profile);\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Processes element with <code>tag</code> type\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processTag(item, profile, level) {\n\t\titem.start = item.end = placeholder;\n\t\tvar utils = require('utils');\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar isUnary = abbrUtils.isUnary(item);\n\t\tvar nl = utils.getNewline();\n\t\tvar indent = getIndentation(item);\n\t\t\t\n\t\t// formatting output\n\t\tif (profile.tag_nl !== false) {\n\t\t\tvar forceNl = profile.tag_nl === true && (profile.tag_nl_leaf || item.children.length);\n\t\t\tif (!forceNl) {\n\t\t\t\tforceNl = _.include(prefs.getArray('format.forceIndentationForTags') || [], item.name());\n\t\t\t}\n\t\t\t\n\t\t\t// formatting block-level elements\n\t\t\tif (!item.isTextNode()) {\n\t\t\t\tif (shouldAddLineBreak(item, profile)) {\n\t\t\t\t\t// - do not indent the very first element\n\t\t\t\t\t// - do not indent first child of a snippet\n\t\t\t\t\tif (!isVeryFirstChild(item) && (!abbrUtils.isSnippet(item.parent) || item.index()))\n\t\t\t\t\t\titem.start = nl + item.start;\n\t\t\t\t\t\t\n\t\t\t\t\tif (abbrUtils.hasBlockChildren(item) || shouldBreakChild(item, profile) || (forceNl && !isUnary))\n\t\t\t\t\t\titem.end = nl + item.end;\n\t\t\t\t\t\t\n\t\t\t\t\tif (abbrUtils.hasTagsInContent(item) || (forceNl && !item.children.length && !isUnary))\n\t\t\t\t\t\titem.start += nl + indent;\n\t\t\t\t} else if (abbrUtils.isInline(item) && hasBlockSibling(item) && !isVeryFirstChild(item)) {\n\t\t\t\t\titem.start = nl + item.start;\n\t\t\t\t} else if (abbrUtils.isInline(item) && shouldBreakInsideInline(item, profile)) {\n\t\t\t\t\titem.end = nl + item.end;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\titem.padding = indent;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Processes simplified tree, making it suitable for output as HTML structure\n\t * @param {AbbreviationNode} tree\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\trequire('filters').add('_format', function process(tree, profile, level) {\n\t\tlevel = level || 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (abbrUtils.isSnippet(item))\n\t\t\t\tprocessSnippet(item, profile, level);\n\t\t\telse\n\t\t\t\tprocessTag(item, profile, level);\n\t\t\t\n\t\t\tprocess(item, profile, level + 1);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Filter for producing HAML code from abbreviation.\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __hamlFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar childToken = '${child}';\n\t\n\tfunction transformClassName(className) {\n\t\treturn require('utils').trim(className).replace(/\\s+/g, '.');\n\t}\n\t\n\t/**\n\t * Creates HAML attributes string from tag according to profile settings\n\t * @param {AbbreviationNode} tag\n\t * @param {Object} profile\n\t */\n\tfunction makeAttributesString(tag, profile) {\n\t\tvar attrs = '';\n\t\tvar otherAttrs = [];\n\t\tvar attrQuote = profile.attributeQuote();\n\t\tvar cursor = profile.cursor();\n\t\t\n\t\t_.each(tag.attributeList(), function(a) {\n\t\t\tvar attrName = profile.attributeName(a.name);\n\t\t\tswitch (attrName.toLowerCase()) {\n\t\t\t\t// use short notation for ID and CLASS attributes\n\t\t\t\tcase 'id':\n\t\t\t\t\tattrs += '#' + (a.value || cursor);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'class':\n\t\t\t\t\tattrs += '.' + transformClassName(a.value || cursor);\n\t\t\t\t\tbreak;\n\t\t\t\t// process other attributes\n\t\t\t\tdefault:\n\t\t\t\t\totherAttrs.push(':' +attrName + ' => ' + attrQuote + (a.value || cursor) + attrQuote);\n\t\t\t}\n\t\t});\n\t\t\n\t\tif (otherAttrs.length)\n\t\t\tattrs += '{' + otherAttrs.join(', ') + '}';\n\t\t\n\t\treturn attrs;\n\t}\n\t\n\t/**\n\t * Test if passed node has block-level sibling element\n\t * @param {AbbreviationNode} item\n\t * @return {Boolean}\n\t */\n\tfunction hasBlockSibling(item) {\n\t\treturn item.parent && item.parent.hasBlockChildren();\n\t}\n\t\n\t/**\n\t * Processes element with <code>tag</code> type\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processTag(item, profile, level) {\n\t\tif (!item.parent)\n\t\t\t// looks like it's root element\n\t\t\treturn item;\n\t\t\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar attrs = makeAttributesString(item, profile);\n\t\tvar cursor = profile.cursor();\n\t\tvar isUnary = abbrUtils.isUnary(item);\n\t\tvar selfClosing = profile.self_closing_tag && isUnary ? '/' : '';\n\t\tvar start= '';\n\t\t\t\n\t\t// define tag name\n\t\tvar tagName = '%' + profile.tagName(item.name());\n\t\tif (tagName.toLowerCase() == '%div' && attrs && attrs.indexOf('{') == -1)\n\t\t\t// omit div tag\n\t\t\ttagName = '';\n\t\t\t\n\t\titem.end = '';\n\t\tstart = tagName + attrs + selfClosing + ' ';\n\t\t\n\t\tvar placeholder = '%s';\n\t\t// We can't just replace placeholder with new value because\n\t\t// JavaScript will treat double $ character as a single one, assuming\n\t\t// we're using RegExp literal.\n\t\titem.start = utils.replaceSubstring(item.start, start, item.start.indexOf(placeholder), placeholder);\n\t\t\n\t\tif (!item.children.length && !isUnary)\n\t\t\titem.start += cursor;\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Processes simplified tree, making it suitable for output as HTML structure\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} profile\n\t * @param {Number} level Depth level\n\t */\n\trequire('filters').add('haml', function process(tree, profile, level) {\n\t\tlevel = level || 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\tif (!level) {\n\t\t\ttree = require('filters').apply(tree, '_format', profile);\n\t\t}\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item))\n\t\t\t\tprocessTag(item, profile, level);\n\t\t\t\n\t\t\tprocess(item, profile, level + 1);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Filter that produces HTML tree\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __htmlFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\t/**\n\t * Creates HTML attributes string from tag according to profile settings\n\t * @param {AbbreviationNode} node\n\t * @param {OutputProfile} profile\n\t */\n\tfunction makeAttributesString(node, profile) {\n\t\tvar attrQuote = profile.attributeQuote();\n\t\tvar cursor = profile.cursor();\n\t\t\n\t\treturn _.map(node.attributeList(), function(a) {\n\t\t\tvar attrName = profile.attributeName(a.name);\n\t\t\treturn ' ' + attrName + '=' + attrQuote + (a.value || cursor) + attrQuote;\n\t\t}).join('');\n\t}\n\t\n\t/**\n\t * Processes element with <code>tag</code> type\n\t * @param {AbbreviationNode} item\n\t * @param {OutputProfile} profile\n\t * @param {Number} level Depth level\n\t */\n\tfunction processTag(item, profile, level) {\n\t\tif (!item.parent) // looks like it's root element\n\t\t\treturn item;\n\t\t\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\tvar utils = require('utils');\n\t\t\n\t\tvar attrs = makeAttributesString(item, profile); \n\t\tvar cursor = profile.cursor();\n\t\tvar isUnary = abbrUtils.isUnary(item);\n\t\tvar start= '';\n\t\tvar end = '';\n\t\t\t\n\t\t// define opening and closing tags\n\t\tif (!item.isTextNode()) {\n\t\t\tvar tagName = profile.tagName(item.name());\n\t\t\tif (isUnary) {\n\t\t\t\tstart = '<' + tagName + attrs + profile.selfClosing() + '>';\n\t\t\t\titem.end = '';\n\t\t\t} else {\n\t\t\t\tstart = '<' + tagName + attrs + '>';\n\t\t\t\tend = '</' + tagName + '>';\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar placeholder = '%s';\n\t\t// We can't just replace placeholder with new value because\n\t\t// JavaScript will treat double $ character as a single one, assuming\n\t\t// we're using RegExp literal.\n\t\titem.start = utils.replaceSubstring(item.start, start, item.start.indexOf(placeholder), placeholder);\n\t\titem.end = utils.replaceSubstring(item.end, end, item.end.indexOf(placeholder), placeholder);\n\t\t\n\t\t// should we put caret placeholder after opening tag?\n\t\tif (\n\t\t\t\t!item.children.length \n\t\t\t\t&& !isUnary \n\t\t\t\t&& !~item.content.indexOf(cursor)\n\t\t\t\t&& !require('tabStops').extract(item.content).tabstops.length\n\t\t\t) {\n\t\t\titem.start += cursor;\n\t\t}\n\t\t\n\t\treturn item;\n\t}\n\t\n\t/**\n\t * Processes simplified tree, making it suitable for output as HTML structure\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} profile\n\t * @param {Number} level Depth level\n\t */\n\trequire('filters').add('html', function process(tree, profile, level) {\n\t\tlevel = level || 0;\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\tif (!level) {\n\t\t\ttree = require('filters').apply(tree, '_format', profile);\n\t\t}\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item))\n\t\t\t\tprocessTag(item, profile, level);\n\t\t\t\n\t\t\tprocess(item, profile, level + 1);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * Output abbreviation on a single line (i.e. no line breaks)\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * @constructor\n * @memberOf __singleLineFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar rePad = /^\\s+/;\n\tvar reNl = /[\\n\\r]/g;\n\t\n\trequire('filters').add('s', function process(tree, profile, level) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item)) {\n\t\t\t\t// remove padding from item \n\t\t\t\titem.start = item.start.replace(rePad, '');\n\t\t\t\titem.end = item.end.replace(rePad, '');\n\t\t\t}\n\t\t\t\n\t\t\t// remove newlines \n\t\t\titem.start = item.start.replace(reNl, '');\n\t\t\titem.end = item.end.replace(reNl, '');\n\t\t\titem.content = item.content.replace(reNl, '');\n\t\t\t\n\t\t\tprocess(item);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});\n/**\n * Trim filter: removes characters at the beginning of the text\n * content that indicates lists: numbers, #, *, -, etc.\n * \n * Useful for wrapping lists with abbreviation.\n * \n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * \n * @constructor\n * @memberOf __trimFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\trequire('preferences').define('filter.trimRegexp', '[\\\\s|\\\\u00a0]*[\\\\d|#|\\\\-|\\*|\\\\u2022]+\\\\.?\\\\s*',\n\t\t\t'Regular expression used to remove list markers (numbers, dashes, ' \n\t\t\t+ 'bullets, etc.) in <code>t</code> (trim) filter. The trim filter '\n\t\t\t+ 'is useful for wrapping with abbreviation lists, pased from other ' \n\t\t\t+ 'documents (for example, Word documents).');\n\t\n\tfunction process(tree, re) {\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (item.content)\n\t\t\t\titem.content = item.content.replace(re, '');\n\t\t\t\n\t\t\tprocess(item, re);\n\t\t});\n\t\t\n\t\treturn tree;\n\t}\n\t\n\trequire('filters').add('t', function(tree) {\n\t\tvar re = new RegExp(require('preferences').get('filter.trimRegexp'));\n\t\treturn process(tree, re);\n\t});\n});\n/**\n * Filter for trimming \"select\" attributes from some tags that contains\n * child elements\n * @author Sergey Chikuyonok (serge.che@gmail.com)\n * @link http://chikuyonok.ru\n * \n * @constructor\n * @memberOf __xslFilterDefine\n * @param {Function} require\n * @param {Underscore} _\n */\nemmet.exec(function(require, _) {\n\tvar tags = {\n\t\t'xsl:variable': 1,\n\t\t'xsl:with-param': 1\n\t};\n\t\n\t/**\n\t * Removes \"select\" attribute from node\n\t * @param {AbbreviationNode} node\n\t */\n\tfunction trimAttribute(node) {\n\t\tnode.start = node.start.replace(/\\s+select\\s*=\\s*(['\"]).*?\\1/, '');\n\t}\n\t\n\trequire('filters').add('xsl', function process(tree) {\n\t\tvar abbrUtils = require('abbreviationUtils');\n\t\t_.each(tree.children, function(item) {\n\t\t\tif (!abbrUtils.isSnippet(item)\n\t\t\t\t\t&& (item.name() || '').toLowerCase() in tags \n\t\t\t\t\t&& item.children.length)\n\t\t\t\ttrimAttribute(item);\n\t\t\tprocess(item);\n\t\t});\n\t\t\n\t\treturn tree;\n\t});\n});/**\n * \"Lorem ipsum\" text generator. Matches <code>lipsum(num)?</code> or \n * <code>lorem(num)?</code> abbreviation.\n * This code is based on Django's contribution: \n * https://code.djangoproject.com/browser/django/trunk/django/contrib/webdesign/lorem_ipsum.py\n * <br><br>\n * Examples to test:<br>\n * <code>lipsum</code> – generates 30 words text.<br>\n * <code>lipsum*6</code> – generates 6 paragraphs (autowrapped with &lt;p&gt; element) of text.<br>\n * <code>ol>lipsum10*5</code> — generates ordered list with 5 list items (autowrapped with &lt;li&gt; tag)\n * with text of 10 words on each line<br>\n * <code>span*3>lipsum20</code> – generates 3 paragraphs of 20-words text, each wrapped with &lt;span&gt; element .\n * Each paragraph phrase is unique   \n * @param {Function} require\n * @param {Underscore} _ \n * @constructor\n * @memberOf __loremIpsumGeneratorDefine\n */\nemmet.define('lorem', function(require, _) {\n\tvar langs = {\n\t\ten: {\n\t\t\tcommon: ['lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipisicing', 'elit'],\n\t\t\twords: ['exercitationem', 'perferendis', 'perspiciatis', 'laborum', 'eveniet',\n\t             'sunt', 'iure', 'nam', 'nobis', 'eum', 'cum', 'officiis', 'excepturi',\n\t             'odio', 'consectetur', 'quasi', 'aut', 'quisquam', 'vel', 'eligendi',\n\t             'itaque', 'non', 'odit', 'tempore', 'quaerat', 'dignissimos',\n\t             'facilis', 'neque', 'nihil', 'expedita', 'vitae', 'vero', 'ipsum',\n\t             'nisi', 'animi', 'cumque', 'pariatur', 'velit', 'modi', 'natus',\n\t             'iusto', 'eaque', 'sequi', 'illo', 'sed', 'ex', 'et', 'voluptatibus',\n\t             'tempora', 'veritatis', 'ratione', 'assumenda', 'incidunt', 'nostrum',\n\t             'placeat', 'aliquid', 'fuga', 'provident', 'praesentium', 'rem',\n\t             'necessitatibus', 'suscipit', 'adipisci', 'quidem', 'possimus',\n\t             'voluptas', 'debitis', 'sint', 'accusantium', 'unde', 'sapiente',\n\t             'voluptate', 'qui', 'aspernatur', 'laudantium', 'soluta', 'amet',\n\t             'quo', 'aliquam', 'saepe', 'culpa', 'libero', 'ipsa', 'dicta',\n\t             'reiciendis', 'nesciunt', 'doloribus', 'autem', 'impedit', 'minima',\n\t             'maiores', 'repudiandae', 'ipsam', 'obcaecati', 'ullam', 'enim',\n\t             'totam', 'delectus', 'ducimus', 'quis', 'voluptates', 'dolores',\n\t             'molestiae', 'harum', 'dolorem', 'quia', 'voluptatem', 'molestias',\n\t             'magni', 'distinctio', 'omnis', 'illum', 'dolorum', 'voluptatum', 'ea',\n\t             'quas', 'quam', 'corporis', 'quae', 'blanditiis', 'atque', 'deserunt',\n\t             'laboriosam', 'earum', 'consequuntur', 'hic', 'cupiditate',\n\t             'quibusdam', 'accusamus', 'ut', 'rerum', 'error', 'minus', 'eius',\n\t             'ab', 'ad', 'nemo', 'fugit', 'officia', 'at', 'in', 'id', 'quos',\n\t             'reprehenderit', 'numquam', 'iste', 'fugiat', 'sit', 'inventore',\n\t             'beatae', 'repellendus', 'magnam', 'recusandae', 'quod', 'explicabo',\n\t             'doloremque', 'aperiam', 'consequatur', 'asperiores', 'commodi',\n\t             'optio', 'dolor', 'labore', 'temporibus', 'repellat', 'veniam',\n\t             'architecto', 'est', 'esse', 'mollitia', 'nulla', 'a', 'similique',\n\t             'eos', 'alias', 'dolore', 'tenetur', 'deleniti', 'porro', 'facere',\n\t             'maxime', 'corrupti']\n\t\t},\n\t\tru: {\n\t\t\tcommon: ['далеко-далеко', 'за', 'словесными', 'горами', 'в стране', 'гласных', 'и согласных', 'живут', 'рыбные', 'тексты'],\n\t\t\twords: ['вдали', 'от всех', 'они', 'буквенных', 'домах', 'на берегу', 'семантика', \n\t\t            'большого', 'языкового', 'океана', 'маленький', 'ручеек', 'даль', \n\t\t            'журчит', 'по всей', 'обеспечивает', 'ее','всеми', 'необходимыми', \n\t\t            'правилами', 'эта', 'парадигматическая', 'страна', 'которой', 'жаренные', \n\t\t            'предложения', 'залетают', 'прямо', 'рот', 'даже', 'всемогущая', \n\t\t            'пунктуация', 'не', 'имеет', 'власти', 'над', 'рыбными', 'текстами', \n\t\t            'ведущими', 'безорфографичный', 'образ', 'жизни', 'однажды', 'одна', \n\t\t            'маленькая', 'строчка','рыбного', 'текста', 'имени', 'lorem', 'ipsum', \n\t\t            'решила', 'выйти', 'большой', 'мир', 'грамматики', 'великий', 'оксмокс', \n\t\t            'предупреждал', 'о', 'злых', 'запятых', 'диких', 'знаках', 'вопроса', \n\t\t            'коварных', 'точках', 'запятой', 'но', 'текст', 'дал', 'сбить', \n\t\t            'себя', 'толку', 'он', 'собрал', 'семь', 'своих', 'заглавных', 'букв', \n\t\t            'подпоясал', 'инициал', 'за', 'пояс', 'пустился', 'дорогу', \n\t\t            'взобравшись', 'первую', 'вершину', 'курсивных', 'гор', 'бросил', \n\t\t            'последний', 'взгляд', 'назад', 'силуэт', 'своего', 'родного', 'города', \n\t\t            'буквоград', 'заголовок', 'деревни', 'алфавит', 'подзаголовок', 'своего', \n\t\t            'переулка', 'грустный', 'реторический', 'вопрос', 'скатился', 'его', \n\t\t            'щеке', 'продолжил', 'свой', 'путь', 'дороге', 'встретил', 'рукопись', \n\t\t            'она', 'предупредила',  'моей', 'все', 'переписывается', 'несколько', \n\t\t            'раз', 'единственное', 'что', 'меня', 'осталось', 'это', 'приставка', \n\t\t            'возвращайся', 'ты', 'лучше', 'свою', 'безопасную', 'страну', 'послушавшись', \n\t\t            'рукописи', 'наш', 'продолжил', 'свой', 'путь', 'вскоре', 'ему', \n\t\t            'повстречался', 'коварный', 'составитель', 'рекламных', 'текстов', \n\t\t            'напоивший', 'языком', 'речью', 'заманивший', 'свое', 'агенство', \n\t\t            'которое', 'использовало', 'снова', 'снова', 'своих', 'проектах', \n\t\t            'если', 'переписали', 'то', 'живет', 'там', 'до', 'сих', 'пор']\n\t\t}\n\t};\n\n\tvar prefs = require('preferences');\n\tprefs.define('lorem.defaultLang', 'en');\n\n\t/**\n\t * @param {AbbreviationNode} tree\n\t * @param {Object} options\n\t */\n\trequire('abbreviationParser').addPreprocessor(function(tree, options) {\n\t\tvar re = /^(?:lorem|lipsum)([a-z]{2})?(\\d*)$/i, match;\n\t\t\n\t\t/** @param {AbbreviationNode} node */\n\t\ttree.findAll(function(node) {\n\t\t\tif (node._name && (match = node._name.match(re))) {\n\t\t\t\tvar wordCound = match[2] || 30;\n\t\t\t\tvar lang = match[1] || prefs.get('lorem.defaultLang') || 'en';\n\t\t\t\t\n\t\t\t\t// force node name resolving if node should be repeated\n\t\t\t\t// or contains attributes. In this case, node should be outputed\n\t\t\t\t// as tag, otherwise as text-only node\n\t\t\t\tnode._name = '';\n\t\t\t\tnode.data('forceNameResolving', node.isRepeating() || node.attributeList().length);\n\t\t\t\tnode.data('pasteOverwrites', true);\n\t\t\t\tnode.data('paste', function(i, content) {\n\t\t\t\t\treturn paragraph(lang, wordCound, !i);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\t\n\t/**\n\t * Returns random integer between <code>from</code> and <code>to</code> values\n\t * @param {Number} from\n\t * @param {Number} to\n\t * @returns {Number}\n\t */\n\tfunction randint(from, to) {\n\t\treturn Math.round(Math.random() * (to - from) + from);\n\t}\n\t\n\t/**\n\t * @param {Array} arr\n\t * @param {Number} count\n\t * @returns {Array}\n\t */\n\tfunction sample(arr, count) {\n\t\tvar len = arr.length;\n\t\tvar iterations = Math.min(len, count);\n\t\tvar result = [];\n\t\twhile (result.length < iterations) {\n\t\t\tvar randIx = randint(0, len - 1);\n\t\t\tif (!_.include(result, randIx))\n\t\t\t\tresult.push(randIx);\n\t\t}\n\t\t\n\t\treturn _.map(result, function(ix) {\n\t\t\treturn arr[ix];\n\t\t});\n\t}\n\t\n\tfunction choice(val) {\n\t\tif (_.isString(val))\n\t\t\treturn val.charAt(randint(0, val.length - 1));\n\t\t\n\t\treturn val[randint(0, val.length - 1)];\n\t}\n\t\n\tfunction sentence(words, end) {\n\t\tif (words.length) {\n\t\t\twords[0] = words[0].charAt(0).toUpperCase() + words[0].substring(1);\n\t\t}\n\t\t\n\t\treturn words.join(' ') + (end || choice('?!...')); // more dots that question marks\n\t}\n\t\n\t/**\n\t * Insert commas at randomly selected words. This function modifies values\n\t * inside <code>words</code> array \n\t * @param {Array} words\n\t */\n\tfunction insertCommas(words) {\n\t\tvar len = words.length;\n\t\tvar totalCommas = 0;\n\t\t\n\t\tif (len > 3 && len <= 6) {\n\t\t\ttotalCommas = randint(0, 1);\n\t\t} else if (len > 6 && len <= 12) {\n\t\t\ttotalCommas = randint(0, 2);\n\t\t} else {\n\t\t\ttotalCommas = randint(1, 4);\n\t\t}\n\n\t\t_.each(_.range(totalCommas), function(ix) {\n\t\t\tif (ix < words.length - 1) {\n\t\t\t\twords[ix] += ',';\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/**\n\t * Generate a paragraph of \"Lorem ipsum\" text\n\t * @param {Number} wordCount Words count in paragraph\n\t * @param {Boolean} startWithCommon Should paragraph start with common \n\t * \"lorem ipsum\" sentence.\n\t * @returns {String}\n\t */\n\tfunction paragraph(lang, wordCount, startWithCommon) {\n\t\tvar data = langs[lang];\n\t\tif (!data) {\n\t\t\treturn '';\n\t\t}\n\n\t\tvar result = [];\n\t\tvar totalWords = 0;\n\t\tvar words;\n\t\t\n\t\twordCount = parseInt(wordCount, 10);\n\t\t\n\t\tif (startWithCommon && data.common) {\n\t\t\twords = data.common.slice(0, wordCount);\n\t\t\tif (words.length > 5)\n\t\t\t\twords[4] += ',';\n\t\t\ttotalWords += words.length;\n\t\t\tresult.push(sentence(words, '.'));\n\t\t}\n\t\t\n\t\twhile (totalWords < wordCount) {\n\t\t\twords = sample(data.words, Math.min(randint(3, 12) * randint(1, 5), wordCount - totalWords));\n\t\t\ttotalWords += words.length;\n\t\t\tinsertCommas(words);\n\t\t\tresult.push(sentence(words));\n\t\t}\n\t\t\n\t\treturn result.join(' ');\n\t}\n\n\treturn {\n\t\t/**\n\t\t * Adds new language words for Lorem Ipsum generator\n\t\t * @param {String} lang Two-letter lang definition\n\t\t * @param {Object} data Words for language. Maight be either a space-separated \n\t\t * list of words (String), Array of words or object with <code>text</code> and\n\t\t * <code>common</code> properties\n\t\t */\n\t\taddLang: function(lang, data) {\n\t\t\tif (_.isString(data)) {\n\t\t\t\tdata = {words: _.compact(data.split(' '))};\n\t\t\t} else if (_.isArray(data)) {\n\t\t\t\tdata = {words: data};\n\t\t\t}\n\n\t\t\tlangs[lang] = data;\n\t\t}\n\t}\n});/**\n * A back-end bootstrap module with commonly used methods for loading user data\n * @param {Function} require\n * @param {Underscore} _  \n */\nemmet.define('bootstrap', function(require, _) {\nvar snippets = {\n\t\"variables\": {\n\t\t\"lang\": \"en\",\n\t\t\"locale\": \"en-US\",\n\t\t\"charset\": \"UTF-8\",\n\t\t\"indentation\": \"\\t\",\n\t\t\"newline\": \"\\n\"\n\t},\n\t\n\t\"css\": {\n\t\t\"filters\": \"html\",\n\t\t\"snippets\": {\n\t\t\t\"@i\": \"@import url(|);\",\n\t\t\t\"@import\": \"@import url(|);\",\n\t\t\t\"@m\": \"@media ${1:screen} {\\n\\t|\\n}\",\n\t\t\t\"@media\": \"@media ${1:screen} {\\n\\t|\\n}\",\n\t\t\t\"@f\": \"@font-face {\\n\\tfont-family:|;\\n\\tsrc:url(|);\\n}\",\n\t\t\t\"@f+\": \"@font-face {\\n\\tfont-family: '${1:FontName}';\\n\\tsrc: url('${2:FileName}.eot');\\n\\tsrc: url('${2:FileName}.eot?#iefix') format('embedded-opentype'),\\n\\t\\t url('${2:FileName}.woff') format('woff'),\\n\\t\\t url('${2:FileName}.ttf') format('truetype'),\\n\\t\\t url('${2:FileName}.svg#${1:FontName}') format('svg');\\n\\tfont-style: ${3:normal};\\n\\tfont-weight: ${4:normal};\\n}\",\n\n\t\t\t\"@kf\": \"@-webkit-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@-o-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@-moz-keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\\n@keyframes ${1:identifier} {\\n\\t${2:from} { ${3} }${6}\\n\\t${4:to} { ${5} }\\n}\",\n\n\n\t\t\t\"anim\": \"animation:|;\",\n\t\t\t\"anim-\": \"animation:${1:name} ${2:duration} ${3:timing-function} ${4:delay} ${5:iteration-count} ${6:direction} ${7:fill-mode};\",\n\t\t\t\"animdel\": \"animation-delay:${1:time};\",\n\t\t\t\n\t\t\t\"animdir\": \"animation-direction:${1:normal};\",\n\t\t\t\"animdir:n\": \"animation-direction:normal;\",\n\t\t\t\"animdir:r\": \"animation-direction:reverse;\",\n\t\t\t\"animdir:a\": \"animation-direction:alternate;\",\n\t\t\t\"animdir:ar\": \"animation-direction:alternate-reverse;\",\n\t\t\t\n\t\t\t\"animdur\": \"animation-duration:${1:0}s;\",\n\t\t\t\n\t\t\t\"animfm\": \"animation-fill-mode:${1:both};\",\n\t\t\t\"animfm:f\": \"animation-fill-mode:forwards;\",\n\t\t\t\"animfm:b\": \"animation-fill-mode:backwards;\",\n\t\t\t\"animfm:bt\": \"animation-fill-mode:both;\",\n\t\t\t\"animfm:bh\": \"animation-fill-mode:both;\",\n\t\t\t\n\t\t\t\"animic\": \"animation-iteration-count:${1:1};\",\n\t\t\t\"animic:i\": \"animation-iteration-count:infinite;\",\n\t\t\t\n\t\t\t\"animn\": \"animation-name:${1:none};\",\n\n\t\t\t\"animps\": \"animation-play-state:${1:running};\",\n\t\t\t\"animps:p\": \"animation-play-state:paused;\",\n\t\t\t\"animps:r\": \"animation-play-state:running;\",\n\n\t\t\t\"animtf\": \"animation-timing-function:${1:linear};\",\n\t\t\t\"animtf:e\": \"animation-timing-function:ease;\",\n\t\t\t\"animtf:ei\": \"animation-timing-function:ease-in;\",\n\t\t\t\"animtf:eo\": \"animation-timing-function:ease-out;\",\n\t\t\t\"animtf:eio\": \"animation-timing-function:ease-in-out;\",\n\t\t\t\"animtf:l\": \"animation-timing-function:linear;\",\n\t\t\t\"animtf:cb\": \"animation-timing-function:cubic-bezier(${1:0.1}, ${2:0.7}, ${3:1.0}, ${3:0.1});\",\n\t\t\t\n\t\t\t\"ap\": \"appearance:${none};\",\n\n\t\t\t\"!\": \"!important\",\n\t\t\t\"pos\": \"position:${1:relative};\",\n\t\t\t\"pos:s\": \"position:static;\",\n\t\t\t\"pos:a\": \"position:absolute;\",\n\t\t\t\"pos:r\": \"position:relative;\",\n\t\t\t\"pos:f\": \"position:fixed;\",\n\t\t\t\"t\": \"top:|;\",\n\t\t\t\"t:a\": \"top:auto;\",\n\t\t\t\"r\": \"right:|;\",\n\t\t\t\"r:a\": \"right:auto;\",\n\t\t\t\"b\": \"bottom:|;\",\n\t\t\t\"b:a\": \"bottom:auto;\",\n\t\t\t\"l\": \"left:|;\",\n\t\t\t\"l:a\": \"left:auto;\",\n\t\t\t\"z\": \"z-index:|;\",\n\t\t\t\"z:a\": \"z-index:auto;\",\n\t\t\t\"fl\": \"float:${1:left};\",\n\t\t\t\"fl:n\": \"float:none;\",\n\t\t\t\"fl:l\": \"float:left;\",\n\t\t\t\"fl:r\": \"float:right;\",\n\t\t\t\"cl\": \"clear:${1:both};\",\n\t\t\t\"cl:n\": \"clear:none;\",\n\t\t\t\"cl:l\": \"clear:left;\",\n\t\t\t\"cl:r\": \"clear:right;\",\n\t\t\t\"cl:b\": \"clear:both;\",\n\n\t\t\t\"colm\": \"columns:|;\",\n\t\t\t\"colmc\": \"column-count:|;\",\n\t\t\t\"colmf\": \"column-fill:|;\",\n\t\t\t\"colmg\": \"column-gap:|;\",\n\t\t\t\"colmr\": \"column-rule:|;\",\n\t\t\t\"colmrc\": \"column-rule-color:|;\",\n\t\t\t\"colmrs\": \"column-rule-style:|;\",\n\t\t\t\"colmrw\": \"column-rule-width:|;\",\n\t\t\t\"colms\": \"column-span:|;\",\n\t\t\t\"colmw\": \"column-width:|;\",\n\n\t\t\t\"d\": \"display:${1:block};\",\n\t\t\t\"d:n\": \"display:none;\",\n\t\t\t\"d:b\": \"display:block;\",\n\t\t\t\"d:i\": \"display:inline;\",\n\t\t\t\"d:ib\": \"display:inline-block;\",\n\t\t\t\"d:ib+\": \"display: inline-block;\\n*display: inline;\\n*zoom: 1;\",\n\t\t\t\"d:li\": \"display:list-item;\",\n\t\t\t\"d:ri\": \"display:run-in;\",\n\t\t\t\"d:cp\": \"display:compact;\",\n\t\t\t\"d:tb\": \"display:table;\",\n\t\t\t\"d:itb\": \"display:inline-table;\",\n\t\t\t\"d:tbcp\": \"display:table-caption;\",\n\t\t\t\"d:tbcl\": \"display:table-column;\",\n\t\t\t\"d:tbclg\": \"display:table-column-group;\",\n\t\t\t\"d:tbhg\": \"display:table-header-group;\",\n\t\t\t\"d:tbfg\": \"display:table-footer-group;\",\n\t\t\t\"d:tbr\": \"display:table-row;\",\n\t\t\t\"d:tbrg\": \"display:table-row-group;\",\n\t\t\t\"d:tbc\": \"display:table-cell;\",\n\t\t\t\"d:rb\": \"display:ruby;\",\n\t\t\t\"d:rbb\": \"display:ruby-base;\",\n\t\t\t\"d:rbbg\": \"display:ruby-base-group;\",\n\t\t\t\"d:rbt\": \"display:ruby-text;\",\n\t\t\t\"d:rbtg\": \"display:ruby-text-group;\",\n\t\t\t\"v\": \"visibility:${1:hidden};\",\n\t\t\t\"v:v\": \"visibility:visible;\",\n\t\t\t\"v:h\": \"visibility:hidden;\",\n\t\t\t\"v:c\": \"visibility:collapse;\",\n\t\t\t\"ov\": \"overflow:${1:hidden};\",\n\t\t\t\"ov:v\": \"overflow:visible;\",\n\t\t\t\"ov:h\": \"overflow:hidden;\",\n\t\t\t\"ov:s\": \"overflow:scroll;\",\n\t\t\t\"ov:a\": \"overflow:auto;\",\n\t\t\t\"ovx\": \"overflow-x:${1:hidden};\",\n\t\t\t\"ovx:v\": \"overflow-x:visible;\",\n\t\t\t\"ovx:h\": \"overflow-x:hidden;\",\n\t\t\t\"ovx:s\": \"overflow-x:scroll;\",\n\t\t\t\"ovx:a\": \"overflow-x:auto;\",\n\t\t\t\"ovy\": \"overflow-y:${1:hidden};\",\n\t\t\t\"ovy:v\": \"overflow-y:visible;\",\n\t\t\t\"ovy:h\": \"overflow-y:hidden;\",\n\t\t\t\"ovy:s\": \"overflow-y:scroll;\",\n\t\t\t\"ovy:a\": \"overflow-y:auto;\",\n\t\t\t\"ovs\": \"overflow-style:${1:scrollbar};\",\n\t\t\t\"ovs:a\": \"overflow-style:auto;\",\n\t\t\t\"ovs:s\": \"overflow-style:scrollbar;\",\n\t\t\t\"ovs:p\": \"overflow-style:panner;\",\n\t\t\t\"ovs:m\": \"overflow-style:move;\",\n\t\t\t\"ovs:mq\": \"overflow-style:marquee;\",\n\t\t\t\"zoo\": \"zoom:1;\",\n\t\t\t\"zm\": \"zoom:1;\",\n\t\t\t\"cp\": \"clip:|;\",\n\t\t\t\"cp:a\": \"clip:auto;\",\n\t\t\t\"cp:r\": \"clip:rect(${1:top} ${2:right} ${3:bottom} ${4:left});\",\n\t\t\t\"bxz\": \"box-sizing:${1:border-box};\",\n\t\t\t\"bxz:cb\": \"box-sizing:content-box;\",\n\t\t\t\"bxz:bb\": \"box-sizing:border-box;\",\n\t\t\t\"bxsh\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:color};\",\n\t\t\t\"bxsh:r\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:spread }rgb(${6:0}, ${7:0}, ${8:0});\",\n\t\t\t\"bxsh:ra\": \"box-shadow:${1:inset }${2:h} ${3:v} ${4:blur} ${5:spread }rgba(${6:0}, ${7:0}, ${8:0}, .${9:5});\",\n\t\t\t\"bxsh:n\": \"box-shadow:none;\",\n\t\t\t\"m\": \"margin:|;\",\n\t\t\t\"m:a\": \"margin:auto;\",\n\t\t\t\"mt\": \"margin-top:|;\",\n\t\t\t\"mt:a\": \"margin-top:auto;\",\n\t\t\t\"mr\": \"margin-right:|;\",\n\t\t\t\"mr:a\": \"margin-right:auto;\",\n\t\t\t\"mb\": \"margin-bottom:|;\",\n\t\t\t\"mb:a\": \"margin-bottom:auto;\",\n\t\t\t\"ml\": \"margin-left:|;\",\n\t\t\t\"ml:a\": \"margin-left:auto;\",\n\t\t\t\"p\": \"padding:|;\",\n\t\t\t\"pt\": \"padding-top:|;\",\n\t\t\t\"pr\": \"padding-right:|;\",\n\t\t\t\"pb\": \"padding-bottom:|;\",\n\t\t\t\"pl\": \"padding-left:|;\",\n\t\t\t\"w\": \"width:|;\",\n\t\t\t\"w:a\": \"width:auto;\",\n\t\t\t\"h\": \"height:|;\",\n\t\t\t\"h:a\": \"height:auto;\",\n\t\t\t\"maw\": \"max-width:|;\",\n\t\t\t\"maw:n\": \"max-width:none;\",\n\t\t\t\"mah\": \"max-height:|;\",\n\t\t\t\"mah:n\": \"max-height:none;\",\n\t\t\t\"miw\": \"min-width:|;\",\n\t\t\t\"mih\": \"min-height:|;\",\n\t\t\t\"mar\": \"max-resolution:${1:res};\",\n\t\t\t\"mir\": \"min-resolution:${1:res};\",\n\t\t\t\"ori\": \"orientation:|;\",\n\t\t\t\"ori:l\": \"orientation:landscape;\",\n\t\t\t\"ori:p\": \"orientation:portrait;\",\n\t\t\t\"ol\": \"outline:|;\",\n\t\t\t\"ol:n\": \"outline:none;\",\n\t\t\t\"olo\": \"outline-offset:|;\",\n\t\t\t\"olw\": \"outline-width:|;\",\n\t\t\t\"olw:tn\": \"outline-width:thin;\",\n\t\t\t\"olw:m\": \"outline-width:medium;\",\n\t\t\t\"olw:tc\": \"outline-width:thick;\",\n\t\t\t\"ols\": \"outline-style:|;\",\n\t\t\t\"ols:n\": \"outline-style:none;\",\n\t\t\t\"ols:dt\": \"outline-style:dotted;\",\n\t\t\t\"ols:ds\": \"outline-style:dashed;\",\n\t\t\t\"ols:s\": \"outline-style:solid;\",\n\t\t\t\"ols:db\": \"outline-style:double;\",\n\t\t\t\"ols:g\": \"outline-style:groove;\",\n\t\t\t\"ols:r\": \"outline-style:ridge;\",\n\t\t\t\"ols:i\": \"outline-style:inset;\",\n\t\t\t\"ols:o\": \"outline-style:outset;\",\n\t\t\t\"olc\": \"outline-color:#${1:000};\",\n\t\t\t\"olc:i\": \"outline-color:invert;\",\n\t\t\t\"bd\": \"border:|;\",\n\t\t\t\"bd+\": \"border:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bd:n\": \"border:none;\",\n\t\t\t\"bdbk\": \"border-break:${1:close};\",\n\t\t\t\"bdbk:c\": \"border-break:close;\",\n\t\t\t\"bdcl\": \"border-collapse:|;\",\n\t\t\t\"bdcl:c\": \"border-collapse:collapse;\",\n\t\t\t\"bdcl:s\": \"border-collapse:separate;\",\n\t\t\t\"bdc\": \"border-color:#${1:000};\",\n\t\t\t\"bdc:t\": \"border-color:transparent;\",\n\t\t\t\"bdi\": \"border-image:url(|);\",\n\t\t\t\"bdi:n\": \"border-image:none;\",\n\t\t\t\"bdti\": \"border-top-image:url(|);\",\n\t\t\t\"bdti:n\": \"border-top-image:none;\",\n\t\t\t\"bdri\": \"border-right-image:url(|);\",\n\t\t\t\"bdri:n\": \"border-right-image:none;\",\n\t\t\t\"bdbi\": \"border-bottom-image:url(|);\",\n\t\t\t\"bdbi:n\": \"border-bottom-image:none;\",\n\t\t\t\"bdli\": \"border-left-image:url(|);\",\n\t\t\t\"bdli:n\": \"border-left-image:none;\",\n\t\t\t\"bdci\": \"border-corner-image:url(|);\",\n\t\t\t\"bdci:n\": \"border-corner-image:none;\",\n\t\t\t\"bdci:c\": \"border-corner-image:continue;\",\n\t\t\t\"bdtli\": \"border-top-left-image:url(|);\",\n\t\t\t\"bdtli:n\": \"border-top-left-image:none;\",\n\t\t\t\"bdtli:c\": \"border-top-left-image:continue;\",\n\t\t\t\"bdtri\": \"border-top-right-image:url(|);\",\n\t\t\t\"bdtri:n\": \"border-top-right-image:none;\",\n\t\t\t\"bdtri:c\": \"border-top-right-image:continue;\",\n\t\t\t\"bdbri\": \"border-bottom-right-image:url(|);\",\n\t\t\t\"bdbri:n\": \"border-bottom-right-image:none;\",\n\t\t\t\"bdbri:c\": \"border-bottom-right-image:continue;\",\n\t\t\t\"bdbli\": \"border-bottom-left-image:url(|);\",\n\t\t\t\"bdbli:n\": \"border-bottom-left-image:none;\",\n\t\t\t\"bdbli:c\": \"border-bottom-left-image:continue;\",\n\t\t\t\"bdf\": \"border-fit:${1:repeat};\",\n\t\t\t\"bdf:c\": \"border-fit:clip;\",\n\t\t\t\"bdf:r\": \"border-fit:repeat;\",\n\t\t\t\"bdf:sc\": \"border-fit:scale;\",\n\t\t\t\"bdf:st\": \"border-fit:stretch;\",\n\t\t\t\"bdf:ow\": \"border-fit:overwrite;\",\n\t\t\t\"bdf:of\": \"border-fit:overflow;\",\n\t\t\t\"bdf:sp\": \"border-fit:space;\",\n\t\t\t\"bdlen\": \"border-length:|;\",\n\t\t\t\"bdlen:a\": \"border-length:auto;\",\n\t\t\t\"bdsp\": \"border-spacing:|;\",\n\t\t\t\"bds\": \"border-style:|;\",\n\t\t\t\"bds:n\": \"border-style:none;\",\n\t\t\t\"bds:h\": \"border-style:hidden;\",\n\t\t\t\"bds:dt\": \"border-style:dotted;\",\n\t\t\t\"bds:ds\": \"border-style:dashed;\",\n\t\t\t\"bds:s\": \"border-style:solid;\",\n\t\t\t\"bds:db\": \"border-style:double;\",\n\t\t\t\"bds:dtds\": \"border-style:dot-dash;\",\n\t\t\t\"bds:dtdtds\": \"border-style:dot-dot-dash;\",\n\t\t\t\"bds:w\": \"border-style:wave;\",\n\t\t\t\"bds:g\": \"border-style:groove;\",\n\t\t\t\"bds:r\": \"border-style:ridge;\",\n\t\t\t\"bds:i\": \"border-style:inset;\",\n\t\t\t\"bds:o\": \"border-style:outset;\",\n\t\t\t\"bdw\": \"border-width:|;\",\n\t\t\t\"bdtw\": \"border-top-width:|;\",\n\t\t\t\"bdrw\": \"border-right-width:|;\",\n\t\t\t\"bdbw\": \"border-bottom-width:|;\",\n\t\t\t\"bdlw\": \"border-left-width:|;\",\n\t\t\t\"bdt\": \"border-top:|;\",\n\t\t\t\"bt\": \"border-top:|;\",\n\t\t\t\"bdt+\": \"border-top:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdt:n\": \"border-top:none;\",\n\t\t\t\"bdts\": \"border-top-style:|;\",\n\t\t\t\"bdts:n\": \"border-top-style:none;\",\n\t\t\t\"bdtc\": \"border-top-color:#${1:000};\",\n\t\t\t\"bdtc:t\": \"border-top-color:transparent;\",\n\t\t\t\"bdr\": \"border-right:|;\",\n\t\t\t\"br\": \"border-right:|;\",\n\t\t\t\"bdr+\": \"border-right:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdr:n\": \"border-right:none;\",\n\t\t\t\"bdrst\": \"border-right-style:|;\",\n\t\t\t\"bdrst:n\": \"border-right-style:none;\",\n\t\t\t\"bdrc\": \"border-right-color:#${1:000};\",\n\t\t\t\"bdrc:t\": \"border-right-color:transparent;\",\n\t\t\t\"bdb\": \"border-bottom:|;\",\n\t\t\t\"bb\": \"border-bottom:|;\",\n\t\t\t\"bdb+\": \"border-bottom:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdb:n\": \"border-bottom:none;\",\n\t\t\t\"bdbs\": \"border-bottom-style:|;\",\n\t\t\t\"bdbs:n\": \"border-bottom-style:none;\",\n\t\t\t\"bdbc\": \"border-bottom-color:#${1:000};\",\n\t\t\t\"bdbc:t\": \"border-bottom-color:transparent;\",\n\t\t\t\"bdl\": \"border-left:|;\",\n\t\t\t\"bl\": \"border-left:|;\",\n\t\t\t\"bdl+\": \"border-left:${1:1px} ${2:solid} ${3:#000};\",\n\t\t\t\"bdl:n\": \"border-left:none;\",\n\t\t\t\"bdls\": \"border-left-style:|;\",\n\t\t\t\"bdls:n\": \"border-left-style:none;\",\n\t\t\t\"bdlc\": \"border-left-color:#${1:000};\",\n\t\t\t\"bdlc:t\": \"border-left-color:transparent;\",\n\t\t\t\"bdrs\": \"border-radius:|;\",\n\t\t\t\"bdtrrs\": \"border-top-right-radius:|;\",\n\t\t\t\"bdtlrs\": \"border-top-left-radius:|;\",\n\t\t\t\"bdbrrs\": \"border-bottom-right-radius:|;\",\n\t\t\t\"bdblrs\": \"border-bottom-left-radius:|;\",\n\t\t\t\"bg\": \"background:#${1:000};\",\n\t\t\t\"bg+\": \"background:${1:#fff} url(${2}) ${3:0} ${4:0} ${5:no-repeat};\",\n\t\t\t\"bg:n\": \"background:none;\",\n\t\t\t\"bg:ie\": \"filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1:x}.png',sizingMethod='${2:crop}');\",\n\t\t\t\"bgc\": \"background-color:#${1:fff};\",\n\t\t\t\"bgc:t\": \"background-color:transparent;\",\n\t\t\t\"bgi\": \"background-image:url(|);\",\n\t\t\t\"bgi:n\": \"background-image:none;\",\n\t\t\t\"bgr\": \"background-repeat:|;\",\n\t\t\t\"bgr:n\": \"background-repeat:no-repeat;\",\n\t\t\t\"bgr:x\": \"background-repeat:repeat-x;\",\n\t\t\t\"bgr:y\": \"background-repeat:repeat-y;\",\n\t\t\t\"bgr:sp\": \"background-repeat:space;\",\n\t\t\t\"bgr:rd\": \"background-repeat:round;\",\n\t\t\t\"bga\": \"background-attachment:|;\",\n\t\t\t\"bga:f\": \"background-attachment:fixed;\",\n\t\t\t\"bga:s\": \"background-attachment:scroll;\",\n\t\t\t\"bgp\": \"background-position:${1:0} ${2:0};\",\n\t\t\t\"bgpx\": \"background-position-x:|;\",\n\t\t\t\"bgpy\": \"background-position-y:|;\",\n\t\t\t\"bgbk\": \"background-break:|;\",\n\t\t\t\"bgbk:bb\": \"background-break:bounding-box;\",\n\t\t\t\"bgbk:eb\": \"background-break:each-box;\",\n\t\t\t\"bgbk:c\": \"background-break:continuous;\",\n\t\t\t\"bgcp\": \"background-clip:${1:padding-box};\",\n\t\t\t\"bgcp:bb\": \"background-clip:border-box;\",\n\t\t\t\"bgcp:pb\": \"background-clip:padding-box;\",\n\t\t\t\"bgcp:cb\": \"background-clip:content-box;\",\n\t\t\t\"bgcp:nc\": \"background-clip:no-clip;\",\n\t\t\t\"bgo\": \"background-origin:|;\",\n\t\t\t\"bgo:pb\": \"background-origin:padding-box;\",\n\t\t\t\"bgo:bb\": \"background-origin:border-box;\",\n\t\t\t\"bgo:cb\": \"background-origin:content-box;\",\n\t\t\t\"bgsz\": \"background-size:|;\",\n\t\t\t\"bgsz:a\": \"background-size:auto;\",\n\t\t\t\"bgsz:ct\": \"background-size:contain;\",\n\t\t\t\"bgsz:cv\": \"background-size:cover;\",\n\t\t\t\"c\": \"color:#${1:000};\",\n\t\t\t\"c:r\": \"color:rgb(${1:0}, ${2:0}, ${3:0});\",\n\t\t\t\"c:ra\": \"color:rgba(${1:0}, ${2:0}, ${3:0}, .${4:5});\",\n\t\t\t\"cm\": \"/* |${child} */\",\n\t\t\t\"cnt\": \"content:'|';\",\n\t\t\t\"cnt:n\": \"content:normal;\",\n\t\t\t\"cnt:oq\": \"content:open-quote;\",\n\t\t\t\"cnt:noq\": \"content:no-open-quote;\",\n\t\t\t\"cnt:cq\": \"content:close-quote;\",\n\t\t\t\"cnt:ncq\": \"content:no-close-quote;\",\n\t\t\t\"cnt:a\": \"content:attr(|);\",\n\t\t\t\"cnt:c\": \"content:counter(|);\",\n\t\t\t\"cnt:cs\": \"content:counters(|);\",\n\n\n\t\t\t\"tbl\": \"table-layout:|;\",\n\t\t\t\"tbl:a\": \"table-layout:auto;\",\n\t\t\t\"tbl:f\": \"table-layout:fixed;\",\n\t\t\t\"cps\": \"caption-side:|;\",\n\t\t\t\"cps:t\": \"caption-side:top;\",\n\t\t\t\"cps:b\": \"caption-side:bottom;\",\n\t\t\t\"ec\": \"empty-cells:|;\",\n\t\t\t\"ec:s\": \"empty-cells:show;\",\n\t\t\t\"ec:h\": \"empty-cells:hide;\",\n\t\t\t\"lis\": \"list-style:|;\",\n\t\t\t\"lis:n\": \"list-style:none;\",\n\t\t\t\"lisp\": \"list-style-position:|;\",\n\t\t\t\"lisp:i\": \"list-style-position:inside;\",\n\t\t\t\"lisp:o\": \"list-style-position:outside;\",\n\t\t\t\"list\": \"list-style-type:|;\",\n\t\t\t\"list:n\": \"list-style-type:none;\",\n\t\t\t\"list:d\": \"list-style-type:disc;\",\n\t\t\t\"list:c\": \"list-style-type:circle;\",\n\t\t\t\"list:s\": \"list-style-type:square;\",\n\t\t\t\"list:dc\": \"list-style-type:decimal;\",\n\t\t\t\"list:dclz\": \"list-style-type:decimal-leading-zero;\",\n\t\t\t\"list:lr\": \"list-style-type:lower-roman;\",\n\t\t\t\"list:ur\": \"list-style-type:upper-roman;\",\n\t\t\t\"lisi\": \"list-style-image:|;\",\n\t\t\t\"lisi:n\": \"list-style-image:none;\",\n\t\t\t\"q\": \"quotes:|;\",\n\t\t\t\"q:n\": \"quotes:none;\",\n\t\t\t\"q:ru\": \"quotes:'\\\\00AB' '\\\\00BB' '\\\\201E' '\\\\201C';\",\n\t\t\t\"q:en\": \"quotes:'\\\\201C' '\\\\201D' '\\\\2018' '\\\\2019';\",\n\t\t\t\"ct\": \"content:|;\",\n\t\t\t\"ct:n\": \"content:normal;\",\n\t\t\t\"ct:oq\": \"content:open-quote;\",\n\t\t\t\"ct:noq\": \"content:no-open-quote;\",\n\t\t\t\"ct:cq\": \"content:close-quote;\",\n\t\t\t\"ct:ncq\": \"content:no-close-quote;\",\n\t\t\t\"ct:a\": \"content:attr(|);\",\n\t\t\t\"ct:c\": \"content:counter(|);\",\n\t\t\t\"ct:cs\": \"content:counters(|);\",\n\t\t\t\"coi\": \"counter-increment:|;\",\n\t\t\t\"cor\": \"counter-reset:|;\",\n\t\t\t\"va\": \"vertical-align:${1:top};\",\n\t\t\t\"va:sup\": \"vertical-align:super;\",\n\t\t\t\"va:t\": \"vertical-align:top;\",\n\t\t\t\"va:tt\": \"vertical-align:text-top;\",\n\t\t\t\"va:m\": \"vertical-align:middle;\",\n\t\t\t\"va:bl\": \"vertical-align:baseline;\",\n\t\t\t\"va:b\": \"vertical-align:bottom;\",\n\t\t\t\"va:tb\": \"vertical-align:text-bottom;\",\n\t\t\t\"va:sub\": \"vertical-align:sub;\",\n\t\t\t\"ta\": \"text-align:${1:left};\",\n\t\t\t\"ta:l\": \"text-align:left;\",\n\t\t\t\"ta:c\": \"text-align:center;\",\n\t\t\t\"ta:r\": \"text-align:right;\",\n\t\t\t\"ta:j\": \"text-align:justify;\",\n\t\t\t\"ta-lst\": \"text-align-last:|;\",\n\t\t\t\"tal:a\": \"text-align-last:auto;\",\n\t\t\t\"tal:l\": \"text-align-last:left;\",\n\t\t\t\"tal:c\": \"text-align-last:center;\",\n\t\t\t\"tal:r\": \"text-align-last:right;\",\n\t\t\t\"td\": \"text-decoration:${1:none};\",\n\t\t\t\"td:n\": \"text-decoration:none;\",\n\t\t\t\"td:u\": \"text-decoration:underline;\",\n\t\t\t\"td:o\": \"text-decoration:overline;\",\n\t\t\t\"td:l\": \"text-decoration:line-through;\",\n\t\t\t\"te\": \"text-emphasis:|;\",\n\t\t\t\"te:n\": \"text-emphasis:none;\",\n\t\t\t\"te:ac\": \"text-emphasis:accent;\",\n\t\t\t\"te:dt\": \"text-emphasis:dot;\",\n\t\t\t\"te:c\": \"text-emphasis:circle;\",\n\t\t\t\"te:ds\": \"text-emphasis:disc;\",\n\t\t\t\"te:b\": \"text-emphasis:before;\",\n\t\t\t\"te:a\": \"text-emphasis:after;\",\n\t\t\t\"th\": \"text-height:|;\",\n\t\t\t\"th:a\": \"text-height:auto;\",\n\t\t\t\"th:f\": \"text-height:font-size;\",\n\t\t\t\"th:t\": \"text-height:text-size;\",\n\t\t\t\"th:m\": \"text-height:max-size;\",\n\t\t\t\"ti\": \"text-indent:|;\",\n\t\t\t\"ti:-\": \"text-indent:-9999px;\",\n\t\t\t\"tj\": \"text-justify:|;\",\n\t\t\t\"tj:a\": \"text-justify:auto;\",\n\t\t\t\"tj:iw\": \"text-justify:inter-word;\",\n\t\t\t\"tj:ii\": \"text-justify:inter-ideograph;\",\n\t\t\t\"tj:ic\": \"text-justify:inter-cluster;\",\n\t\t\t\"tj:d\": \"text-justify:distribute;\",\n\t\t\t\"tj:k\": \"text-justify:kashida;\",\n\t\t\t\"tj:t\": \"text-justify:tibetan;\",\n\t\t\t\"tov\": \"text-overflow:${ellipsis};\",\n\t\t\t\"tov:e\": \"text-overflow:ellipsis;\",\n\t\t\t\"tov:c\": \"text-overflow:clip;\",\n\t\t\t\"to\": \"text-outline:|;\",\n\t\t\t\"to+\": \"text-outline:${1:0} ${2:0} ${3:#000};\",\n\t\t\t\"to:n\": \"text-outline:none;\",\n\t\t\t\"tr\": \"text-replace:|;\",\n\t\t\t\"tr:n\": \"text-replace:none;\",\n\t\t\t\"tt\": \"text-transform:${1:uppercase};\",\n\t\t\t\"tt:n\": \"text-transform:none;\",\n\t\t\t\"tt:c\": \"text-transform:capitalize;\",\n\t\t\t\"tt:u\": \"text-transform:uppercase;\",\n\t\t\t\"tt:l\": \"text-transform:lowercase;\",\n\t\t\t\"tw\": \"text-wrap:|;\",\n\t\t\t\"tw:n\": \"text-wrap:normal;\",\n\t\t\t\"tw:no\": \"text-wrap:none;\",\n\t\t\t\"tw:u\": \"text-wrap:unrestricted;\",\n\t\t\t\"tw:s\": \"text-wrap:suppress;\",\n\t\t\t\"tsh\": \"text-shadow:${1:hoff} ${2:voff} ${3:blur} ${4:#000};\",\n\t\t\t\"tsh:r\": \"text-shadow:${1:h} ${2:v} ${3:blur} rgb(${4:0}, ${5:0}, ${6:0});\",\n\t\t\t\"tsh:ra\": \"text-shadow:${1:h} ${2:v} ${3:blur} rgba(${4:0}, ${5:0}, ${6:0}, .${7:5});\",\n\t\t\t\"tsh+\": \"text-shadow:${1:0} ${2:0} ${3:0} ${4:#000};\",\n\t\t\t\"tsh:n\": \"text-shadow:none;\",\n\t\t\t\"trf\": \"transform:|;\",\n\t\t\t\"trf:skx\": \"transform: skewX(${1:angle});\",\n\t\t\t\"trf:sky\": \"transform: skewY(${1:angle});\",\n\t\t\t\"trf:sc\": \"transform: scale(${1:x}, ${2:y});\",\n\t\t\t\"trf:scx\": \"transform: scaleX(${1:x});\",\n\t\t\t\"trf:scy\": \"transform: scaleY(${1:y});\",\n\t\t\t\"trf:r\": \"transform: rotate(${1:angle});\",\n\t\t\t\"trf:t\": \"transform: translate(${1:x}, ${2:y});\",\n\t\t\t\"trf:tx\": \"transform: translateX(${1:x});\",\n\t\t\t\"trf:ty\": \"transform: translateY(${1:y});\",\n\t\t\t\"trfo\": \"transform-origin:|;\",\n\t\t\t\"trfs\": \"transform-style:${1:preserve-3d};\",\n\t\t\t\"trs\": \"transition:${1:prop} ${2:time};\",\n\t\t\t\"trsde\": \"transition-delay:${1:time};\",\n\t\t\t\"trsdu\": \"transition-duration:${1:time};\",\n\t\t\t\"trsp\": \"transition-property:${1:prop};\",\n\t\t\t\"trstf\": \"transition-timing-function:${1:tfunc};\",\n\t\t\t\"lh\": \"line-height:|;\",\n\t\t\t\"whs\": \"white-space:|;\",\n\t\t\t\"whs:n\": \"white-space:normal;\",\n\t\t\t\"whs:p\": \"white-space:pre;\",\n\t\t\t\"whs:nw\": \"white-space:nowrap;\",\n\t\t\t\"whs:pw\": \"white-space:pre-wrap;\",\n\t\t\t\"whs:pl\": \"white-space:pre-line;\",\n\t\t\t\"whsc\": \"white-space-collapse:|;\",\n\t\t\t\"whsc:n\": \"white-space-collapse:normal;\",\n\t\t\t\"whsc:k\": \"white-space-collapse:keep-all;\",\n\t\t\t\"whsc:l\": \"white-space-collapse:loose;\",\n\t\t\t\"whsc:bs\": \"white-space-collapse:break-strict;\",\n\t\t\t\"whsc:ba\": \"white-space-collapse:break-all;\",\n\t\t\t\"wob\": \"word-break:|;\",\n\t\t\t\"wob:n\": \"word-break:normal;\",\n\t\t\t\"wob:k\": \"word-break:keep-all;\",\n\t\t\t\"wob:ba\": \"word-break:break-all;\",\n\t\t\t\"wos\": \"word-spacing:|;\",\n\t\t\t\"wow\": \"word-wrap:|;\",\n\t\t\t\"wow:nm\": \"word-wrap:normal;\",\n\t\t\t\"wow:n\": \"word-wrap:none;\",\n\t\t\t\"wow:u\": \"word-wrap:unrestricted;\",\n\t\t\t\"wow:s\": \"word-wrap:suppress;\",\n\t\t\t\"wow:b\": \"word-wrap:break-word;\",\n\t\t\t\"wm\": \"writing-mode:${1:lr-tb};\",\n\t\t\t\"wm:lrt\": \"writing-mode:lr-tb;\",\n\t\t\t\"wm:lrb\": \"writing-mode:lr-bt;\",\n\t\t\t\"wm:rlt\": \"writing-mode:rl-tb;\",\n\t\t\t\"wm:rlb\": \"writing-mode:rl-bt;\",\n\t\t\t\"wm:tbr\": \"writing-mode:tb-rl;\",\n\t\t\t\"wm:tbl\": \"writing-mode:tb-lr;\",\n\t\t\t\"wm:btl\": \"writing-mode:bt-lr;\",\n\t\t\t\"wm:btr\": \"writing-mode:bt-rl;\",\n\t\t\t\"lts\": \"letter-spacing:|;\",\n\t\t\t\"lts-n\": \"letter-spacing:normal;\",\n\t\t\t\"f\": \"font:|;\",\n\t\t\t\"f+\": \"font:${1:1em} ${2:Arial,sans-serif};\",\n\t\t\t\"fw\": \"font-weight:|;\",\n\t\t\t\"fw:n\": \"font-weight:normal;\",\n\t\t\t\"fw:b\": \"font-weight:bold;\",\n\t\t\t\"fw:br\": \"font-weight:bolder;\",\n\t\t\t\"fw:lr\": \"font-weight:lighter;\",\n\t\t\t\"fs\": \"font-style:${italic};\",\n\t\t\t\"fs:n\": \"font-style:normal;\",\n\t\t\t\"fs:i\": \"font-style:italic;\",\n\t\t\t\"fs:o\": \"font-style:oblique;\",\n\t\t\t\"fv\": \"font-variant:|;\",\n\t\t\t\"fv:n\": \"font-variant:normal;\",\n\t\t\t\"fv:sc\": \"font-variant:small-caps;\",\n\t\t\t\"fz\": \"font-size:|;\",\n\t\t\t\"fza\": \"font-size-adjust:|;\",\n\t\t\t\"fza:n\": \"font-size-adjust:none;\",\n\t\t\t\"ff\": \"font-family:|;\",\n\t\t\t\"ff:s\": \"font-family:serif;\",\n\t\t\t\"ff:ss\": \"font-family:sans-serif;\",\n\t\t\t\"ff:c\": \"font-family:cursive;\",\n\t\t\t\"ff:f\": \"font-family:fantasy;\",\n\t\t\t\"ff:m\": \"font-family:monospace;\",\n\t\t\t\"ff:a\": \"font-family: Arial, \\\"Helvetica Neue\\\", Helvetica, sans-serif;\",\n\t\t\t\"ff:t\": \"font-family: \\\"Times New Roman\\\", Times, Baskerville, Georgia, serif;\",\n\t\t\t\"ff:v\": \"font-family: Verdana, Geneva, sans-serif;\",\n\t\t\t\"fef\": \"font-effect:|;\",\n\t\t\t\"fef:n\": \"font-effect:none;\",\n\t\t\t\"fef:eg\": \"font-effect:engrave;\",\n\t\t\t\"fef:eb\": \"font-effect:emboss;\",\n\t\t\t\"fef:o\": \"font-effect:outline;\",\n\t\t\t\"fem\": \"font-emphasize:|;\",\n\t\t\t\"femp\": \"font-emphasize-position:|;\",\n\t\t\t\"femp:b\": \"font-emphasize-position:before;\",\n\t\t\t\"femp:a\": \"font-emphasize-position:after;\",\n\t\t\t\"fems\": \"font-emphasize-style:|;\",\n\t\t\t\"fems:n\": \"font-emphasize-style:none;\",\n\t\t\t\"fems:ac\": \"font-emphasize-style:accent;\",\n\t\t\t\"fems:dt\": \"font-emphasize-style:dot;\",\n\t\t\t\"fems:c\": \"font-emphasize-style:circle;\",\n\t\t\t\"fems:ds\": \"font-emphasize-style:disc;\",\n\t\t\t\"fsm\": \"font-smooth:|;\",\n\t\t\t\"fsm:a\": \"font-smooth:auto;\",\n\t\t\t\"fsm:n\": \"font-smooth:never;\",\n\t\t\t\"fsm:aw\": \"font-smooth:always;\",\n\t\t\t\"fst\": \"font-stretch:|;\",\n\t\t\t\"fst:n\": \"font-stretch:normal;\",\n\t\t\t\"fst:uc\": \"font-stretch:ultra-condensed;\",\n\t\t\t\"fst:ec\": \"font-stretch:extra-condensed;\",\n\t\t\t\"fst:c\": \"font-stretch:condensed;\",\n\t\t\t\"fst:sc\": \"font-stretch:semi-condensed;\",\n\t\t\t\"fst:se\": \"font-stretch:semi-expanded;\",\n\t\t\t\"fst:e\": \"font-stretch:expanded;\",\n\t\t\t\"fst:ee\": \"font-stretch:extra-expanded;\",\n\t\t\t\"fst:ue\": \"font-stretch:ultra-expanded;\",\n\t\t\t\"op\": \"opacity:|;\",\n\t\t\t\"op+\": \"opacity: $1;\\nfilter: alpha(opacity=$2);\",\n\t\t\t\"op:ie\": \"filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=100);\",\n\t\t\t\"op:ms\": \"-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';\",\n\t\t\t\"rsz\": \"resize:|;\",\n\t\t\t\"rsz:n\": \"resize:none;\",\n\t\t\t\"rsz:b\": \"resize:both;\",\n\t\t\t\"rsz:h\": \"resize:horizontal;\",\n\t\t\t\"rsz:v\": \"resize:vertical;\",\n\t\t\t\"cur\": \"cursor:${pointer};\",\n\t\t\t\"cur:a\": \"cursor:auto;\",\n\t\t\t\"cur:d\": \"cursor:default;\",\n\t\t\t\"cur:c\": \"cursor:crosshair;\",\n\t\t\t\"cur:ha\": \"cursor:hand;\",\n\t\t\t\"cur:he\": \"cursor:help;\",\n\t\t\t\"cur:m\": \"cursor:move;\",\n\t\t\t\"cur:p\": \"cursor:pointer;\",\n\t\t\t\"cur:t\": \"cursor:text;\",\n\t\t\t\"pgbb\": \"page-break-before:|;\",\n\t\t\t\"pgbb:au\": \"page-break-before:auto;\",\n\t\t\t\"pgbb:al\": \"page-break-before:always;\",\n\t\t\t\"pgbb:l\": \"page-break-before:left;\",\n\t\t\t\"pgbb:r\": \"page-break-before:right;\",\n\t\t\t\"pgbi\": \"page-break-inside:|;\",\n\t\t\t\"pgbi:au\": \"page-break-inside:auto;\",\n\t\t\t\"pgbi:av\": \"page-break-inside:avoid;\",\n\t\t\t\"pgba\": \"page-break-after:|;\",\n\t\t\t\"pgba:au\": \"page-break-after:auto;\",\n\t\t\t\"pgba:al\": \"page-break-after:always;\",\n\t\t\t\"pgba:l\": \"page-break-after:left;\",\n\t\t\t\"pgba:r\": \"page-break-after:right;\",\n\t\t\t\"orp\": \"orphans:|;\",\n\t\t\t\"us\": \"user-select:${none};\",\n\t\t\t\"wid\": \"widows:|;\",\n\t\t\t\"wfsm\": \"-webkit-font-smoothing:${antialiased};\",\n\t\t\t\"wfsm:a\": \"-webkit-font-smoothing:antialiased;\",\n\t\t\t\"wfsm:s\": \"-webkit-font-smoothing:subpixel-antialiased;\",\n\t\t\t\"wfsm:sa\": \"-webkit-font-smoothing:subpixel-antialiased;\",\n\t\t\t\"wfsm:n\": \"-webkit-font-smoothing:none;\"\n\t\t}\n\t},\n\t\n\t\"html\": {\n\t\t\"filters\": \"html\",\n\t\t\"profile\": \"html\",\n\t\t\"snippets\": {\n\t\t\t\"!!!\":    \"<!doctype html>\",\n\t\t\t\"!!!4t\":  \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\" \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\",\n\t\t\t\"!!!4s\":  \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\">\",\n\t\t\t\"!!!xt\":  \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\",\n\t\t\t\"!!!xs\":  \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\",\n\t\t\t\"!!!xxs\": \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.1//EN\\\" \\\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\">\",\n\n\t\t\t\"c\": \"<!-- |${child} -->\",\n\t\t\t\"cc:ie6\": \"<!--[if lte IE 6]>\\n\\t${child}|\\n<![endif]-->\",\n\t\t\t\"cc:ie\": \"<!--[if IE]>\\n\\t${child}|\\n<![endif]-->\",\n\t\t\t\"cc:noie\": \"<!--[if !IE]><!-->\\n\\t${child}|\\n<!--<![endif]-->\"\n\t\t},\n\t\t\n\t\t\"abbreviations\": {\n\t\t\t\"!\": \"html:5\",\n\t\t\t\"a\": \"<a href=\\\"\\\">\",\n\t\t\t\"a:link\": \"<a href=\\\"http://|\\\">\",\n\t\t\t\"a:mail\": \"<a href=\\\"mailto:|\\\">\",\n\t\t\t\"abbr\": \"<abbr title=\\\"\\\">\",\n\t\t\t\"acronym\": \"<acronym title=\\\"\\\">\",\n\t\t\t\"base\": \"<base href=\\\"\\\" />\",\n\t\t\t\"basefont\": \"<basefont/>\",\n\t\t\t\"br\": \"<br/>\",\n\t\t\t\"frame\": \"<frame/>\",\n\t\t\t\"hr\": \"<hr/>\",\n\t\t\t\"bdo\": \"<bdo dir=\\\"\\\">\",\n\t\t\t\"bdo:r\": \"<bdo dir=\\\"rtl\\\">\",\n\t\t\t\"bdo:l\": \"<bdo dir=\\\"ltr\\\">\",\n\t\t\t\"col\": \"<col/>\",\n\t\t\t\"link\": \"<link rel=\\\"stylesheet\\\" href=\\\"\\\" />\",\n\t\t\t\"link:css\": \"<link rel=\\\"stylesheet\\\" href=\\\"${1:style}.css\\\" />\",\n\t\t\t\"link:print\": \"<link rel=\\\"stylesheet\\\" href=\\\"${1:print}.css\\\" media=\\\"print\\\" />\",\n\t\t\t\"link:favicon\": \"<link rel=\\\"shortcut icon\\\" type=\\\"image/x-icon\\\" href=\\\"${1:favicon.ico}\\\" />\",\n\t\t\t\"link:touch\": \"<link rel=\\\"apple-touch-icon\\\" href=\\\"${1:favicon.png}\\\" />\",\n\t\t\t\"link:rss\": \"<link rel=\\\"alternate\\\" type=\\\"application/rss+xml\\\" title=\\\"RSS\\\" href=\\\"${1:rss.xml}\\\" />\",\n\t\t\t\"link:atom\": \"<link rel=\\\"alternate\\\" type=\\\"application/atom+xml\\\" title=\\\"Atom\\\" href=\\\"${1:atom.xml}\\\" />\",\n\t\t\t\"meta\": \"<meta/>\",\n\t\t\t\"meta:utf\": \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=UTF-8\\\" />\",\n\t\t\t\"meta:win\": \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=windows-1251\\\" />\",\n\t\t\t\"meta:vp\": \"<meta name=\\\"viewport\\\" content=\\\"width=${1:device-width}, user-scalable=${2:no}, initial-scale=${3:1.0}, maximum-scale=${4:1.0}, minimum-scale=${5:1.0}\\\" />\",\n\t\t\t\"meta:compat\": \"<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"${1:IE=7}\\\" />\",\n\t\t\t\"style\": \"<style>\",\n\t\t\t\"script\": \"<script>\",\n\t\t\t\"script:src\": \"<script src=\\\"\\\">\",\n\t\t\t\"img\": \"<img src=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"iframe\": \"<iframe src=\\\"\\\" frameborder=\\\"0\\\">\",\n\t\t\t\"embed\": \"<embed src=\\\"\\\" type=\\\"\\\" />\",\n\t\t\t\"object\": \"<object data=\\\"\\\" type=\\\"\\\">\",\n\t\t\t\"param\": \"<param name=\\\"\\\" value=\\\"\\\" />\",\n\t\t\t\"map\": \"<map name=\\\"\\\">\",\n\t\t\t\"area\": \"<area shape=\\\"\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:d\": \"<area shape=\\\"default\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:c\": \"<area shape=\\\"circle\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:r\": \"<area shape=\\\"rect\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"area:p\": \"<area shape=\\\"poly\\\" coords=\\\"\\\" href=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"form\": \"<form action=\\\"\\\">\",\n\t\t\t\"form:get\": \"<form action=\\\"\\\" method=\\\"get\\\">\",\n\t\t\t\"form:post\": \"<form action=\\\"\\\" method=\\\"post\\\">\",\n\t\t\t\"label\": \"<label for=\\\"\\\">\",\n\t\t\t\"input\": \"<input type=\\\"${1:text}\\\" />\",\n\t\t\t\"inp\": \"<input type=\\\"${1:text}\\\" name=\\\"\\\" id=\\\"\\\" />\",\n\t\t\t\"input:hidden\": \"input[type=hidden name]\",\n\t\t\t\"input:h\": \"input:hidden\",\n\t\t\t\"input:text\": \"inp\",\n\t\t\t\"input:t\": \"inp\",\n\t\t\t\"input:search\": \"inp[type=search]\",\n\t\t\t\"input:email\": \"inp[type=email]\",\n\t\t\t\"input:url\": \"inp[type=url]\",\n\t\t\t\"input:password\": \"inp[type=password]\",\n\t\t\t\"input:p\": \"input:password\",\n\t\t\t\"input:datetime\": \"inp[type=datetime]\",\n\t\t\t\"input:date\": \"inp[type=date]\",\n\t\t\t\"input:datetime-local\": \"inp[type=datetime-local]\",\n\t\t\t\"input:month\": \"inp[type=month]\",\n\t\t\t\"input:week\": \"inp[type=week]\",\n\t\t\t\"input:time\": \"inp[type=time]\",\n\t\t\t\"input:number\": \"inp[type=number]\",\n\t\t\t\"input:color\": \"inp[type=color]\",\n\t\t\t\"input:checkbox\": \"inp[type=checkbox]\",\n\t\t\t\"input:c\": \"input:checkbox\",\n\t\t\t\"input:radio\": \"inp[type=radio]\",\n\t\t\t\"input:r\": \"input:radio\",\n\t\t\t\"input:range\": \"inp[type=range]\",\n\t\t\t\"input:file\": \"inp[type=file]\",\n\t\t\t\"input:f\": \"input:file\",\n\t\t\t\"input:submit\": \"<input type=\\\"submit\\\" value=\\\"\\\" />\",\n\t\t\t\"input:s\": \"input:submit\",\n\t\t\t\"input:image\": \"<input type=\\\"image\\\" src=\\\"\\\" alt=\\\"\\\" />\",\n\t\t\t\"input:i\": \"input:image\",\n\t\t\t\"input:button\": \"<input type=\\\"button\\\" value=\\\"\\\" />\",\n\t\t\t\"input:b\": \"input:button\",\n\t\t\t\"isindex\": \"<isindex/>\",\n\t\t\t\"input:reset\": \"input:button[type=reset]\",\n\t\t\t\"select\": \"<select name=\\\"\\\" id=\\\"\\\">\",\n\t\t\t\"select:disabled\": \"select[disabled]\",\n\t\t\t\"select:d\": \"select[disabled]\",\n\t\t\t\"option\": \"<option value=\\\"\\\">\",\n\t\t\t\"textarea\": \"<textarea name=\\\"\\\" id=\\\"\\\" cols=\\\"${1:30}\\\" rows=\\\"${2:10}\\\">\",\n\t\t\t\"marquee\": \"<marquee behavior=\\\"\\\" direction=\\\"\\\">\",\n\t\t\t\"menu:context\": \"menu[type=context]>\",\n\t\t\t\"menu:c\": \"menu:context\",\n\t\t\t\"menu:toolbar\": \"menu[type=toolbar]>\",\n\t\t\t\"menu:t\": \"menu:toolbar\",\n\t\t\t\"video\": \"<video src=\\\"\\\">\",\n\t\t\t\"audio\": \"<audio src=\\\"\\\">\",\n\t\t\t\"html:xml\": \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\",\n\t\t\t\"keygen\": \"<keygen/>\",\n\t\t\t\"command\": \"<command/>\",\n\t\t\t\"button:submit\" : \"button[type=submit]\",\n\t\t\t\"button:s\" : \"button[type=submit]\",\n\t\t\t\"button:reset\" : \"button[type=reset]\",\n\t\t\t\"button:r\" : \"button[type=reset]\",\n\t\t\t\"button:disabled\" : \"button[disabled]\",\n\t\t\t\"button:d\" : \"button[disabled]\",\n\t\t\t\"fieldset:disabled\" : \"fieldset[disabled]\",\n\t\t\t\"fieldset:d\" : \"fieldset[disabled]\",\n\t\t\t\n\t\t\t\"bq\": \"blockquote\",\n\t\t\t\"acr\": \"acronym\",\n\t\t\t\"fig\": \"figure\",\n\t\t\t\"figc\": \"figcaption\",\n\t\t\t\"ifr\": \"iframe\",\n\t\t\t\"emb\": \"embed\",\n\t\t\t\"obj\": \"object\",\n\t\t\t\"src\": \"source\",\n\t\t\t\"cap\": \"caption\",\n\t\t\t\"colg\": \"colgroup\",\n\t\t\t\"fst\": \"fieldset\",\n\t\t\t\"fst:d\": \"fieldset[disabled]\",\n\t\t\t\"btn\": \"button\",\n\t\t\t\"btn:b\": \"button[type=button]\",\n\t\t\t\"btn:r\": \"button[type=reset]\",\n\t\t\t\"btn:s\": \"button[type=submit]\",\n\t\t\t\"btn:d\": \"button[disabled]\",\n\t\t\t\"optg\": \"optgroup\",\n\t\t\t\"opt\": \"option\",\n\t\t\t\"tarea\": \"textarea\",\n\t\t\t\"leg\": \"legend\",\n\t\t\t\"sect\": \"section\",\n\t\t\t\"art\": \"article\",\n\t\t\t\"hdr\": \"header\",\n\t\t\t\"ftr\": \"footer\",\n\t\t\t\"adr\": \"address\",\n\t\t\t\"dlg\": \"dialog\",\n\t\t\t\"str\": \"strong\",\n\t\t\t\"prog\": \"progress\",\n\t\t\t\"fset\": \"fieldset\",\n\t\t\t\"fset:d\": \"fieldset[disabled]\",\n\t\t\t\"datag\": \"datagrid\",\n\t\t\t\"datal\": \"datalist\",\n\t\t\t\"kg\": \"keygen\",\n\t\t\t\"out\": \"output\",\n\t\t\t\"det\": \"details\",\n\t\t\t\"cmd\": \"command\",\n\t\t\t\"doc\": \"html>(head>meta[charset=UTF-8]+title{${1:Document}})+body\",\n\t\t\t\"doc4\": \"html>(head>meta[http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=${charset}\\\"]+title{${1:Document}})+body\",\n\n\t\t\t\"html:4t\":  \"!!!4t+doc4[lang=${lang}]\",\n\t\t\t\"html:4s\":  \"!!!4s+doc4[lang=${lang}]\",\n\t\t\t\"html:xt\":  \"!!!xt+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\n\t\t\t\"html:xs\":  \"!!!xs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\n\t\t\t\"html:xxs\": \"!!!xxs+doc4[xmlns=http://www.w3.org/1999/xhtml xml:lang=${lang}]\",\n\t\t\t\"html:5\":   \"!!!+doc[lang=${lang}]\",\n\t\t\t\n\t\t\t\"ol+\": \"ol>li\",\n\t\t\t\"ul+\": \"ul>li\",\n\t\t\t\"dl+\": \"dl>dt+dd\",\n\t\t\t\"map+\": \"map>area\",\n\t\t\t\"table+\": \"table>tr>td\",\n\t\t\t\"colgroup+\": \"colgroup>col\",\n\t\t\t\"colg+\": \"colgroup>col\",\n\t\t\t\"tr+\": \"tr>td\",\n\t\t\t\"select+\": \"select>option\",\n\t\t\t\"optgroup+\": \"optgroup>option\",\n\t\t\t\"optg+\": \"optgroup>option\"\n\t\t}\n\t},\n\t\n\t\"xml\": {\n\t\t\"extends\": \"html\",\n\t\t\"profile\": \"xml\",\n\t\t\"filters\": \"html\"\n\t},\n\t\n\t\"xsl\": {\n\t\t\"extends\": \"html\",\n\t\t\"profile\": \"xml\",\n\t\t\"filters\": \"html, xsl\",\n\t\t\"abbreviations\": {\n\t\t\t\"tm\": \"<xsl:template match=\\\"\\\" mode=\\\"\\\">\",\n\t\t\t\"tmatch\": \"tm\",\n\t\t\t\"tn\": \"<xsl:template name=\\\"\\\">\",\n\t\t\t\"tname\": \"tn\",\n\t\t\t\"call\": \"<xsl:call-template name=\\\"\\\"/>\",\n\t\t\t\"ap\": \"<xsl:apply-templates select=\\\"\\\" mode=\\\"\\\"/>\",\n\t\t\t\"api\": \"<xsl:apply-imports/>\",\n\t\t\t\"imp\": \"<xsl:import href=\\\"\\\"/>\",\n\t\t\t\"inc\": \"<xsl:include href=\\\"\\\"/>\",\n\n\t\t\t\"ch\": \"<xsl:choose>\",\n\t\t\t\"xsl:when\": \"<xsl:when test=\\\"\\\">\",\n\t\t\t\"wh\": \"xsl:when\",\n\t\t\t\"ot\": \"<xsl:otherwise>\",\n\t\t\t\"if\": \"<xsl:if test=\\\"\\\">\",\n\n\t\t\t\"par\": \"<xsl:param name=\\\"\\\">\",\n\t\t\t\"pare\": \"<xsl:param name=\\\"\\\" select=\\\"\\\"/>\",\n\t\t\t\"var\": \"<xsl:variable name=\\\"\\\">\",\n\t\t\t\"vare\": \"<xsl:variable name=\\\"\\\" select=\\\"\\\"/>\",\n\t\t\t\"wp\": \"<xsl:with-param name=\\\"\\\" select=\\\"\\\"/>\",\n\t\t\t\"key\": \"<xsl:key name=\\\"\\\" match=\\\"\\\" use=\\\"\\\"/>\",\n\n\t\t\t\"elem\": \"<xsl:element name=\\\"\\\">\",\n\t\t\t\"attr\": \"<xsl:attribute name=\\\"\\\">\",\n\t\t\t\"attrs\": \"<xsl:attribute-set name=\\\"\\\">\",\n\n\t\t\t\"cp\": \"<xsl:copy select=\\\"\\\"/>\",\n\t\t\t\"co\": \"<xsl:copy-of select=\\\"\\\"/>\",\n\t\t\t\"val\": \"<xsl:value-of select=\\\"\\\"/>\",\n\t\t\t\"each\": \"<xsl:for-each select=\\\"\\\">\",\n\t\t\t\"for\": \"each\",\n\t\t\t\"tex\": \"<xsl:text></xsl:text>\",\n\n\t\t\t\"com\": \"<xsl:comment>\",\n\t\t\t\"msg\": \"<xsl:message terminate=\\\"no\\\">\",\n\t\t\t\"fall\": \"<xsl:fallback>\",\n\t\t\t\"num\": \"<xsl:number value=\\\"\\\"/>\",\n\t\t\t\"nam\": \"<namespace-alias stylesheet-prefix=\\\"\\\" result-prefix=\\\"\\\"/>\",\n\t\t\t\"pres\": \"<xsl:preserve-space elements=\\\"\\\"/>\",\n\t\t\t\"strip\": \"<xsl:strip-space elements=\\\"\\\"/>\",\n\t\t\t\"proc\": \"<xsl:processing-instruction name=\\\"\\\">\",\n\t\t\t\"sort\": \"<xsl:sort select=\\\"\\\" order=\\\"\\\"/>\",\n\n\t\t\t\"choose+\": \"xsl:choose>xsl:when+xsl:otherwise\",\n\t\t\t\"xsl\": \"!!!+xsl:stylesheet[version=1.0 xmlns:xsl=http://www.w3.org/1999/XSL/Transform]>{\\n|}\"\n\t\t}, \n\t\t\"snippets\": {\n\t\t\t\"!!!\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n\t\t}\n\t},\n\t\n\t\"haml\": {\n\t\t\"filters\": \"haml\",\n\t\t\"extends\": \"html\",\n\t\t\"profile\": \"xml\"\n\t},\n\t\n\t\"scss\": {\n\t\t\"extends\": \"css\"\n\t},\n\t\n\t\"sass\": {\n\t\t\"extends\": \"css\"\n\t},\n\t\n\t\"less\": {\n\t\t\"extends\": \"css\"\n\t},\n\t\n\t\"stylus\": {\n\t\t\"extends\": \"css\"\n\t},\n\n\t\"styl\": {\n\t\t\"extends\": \"stylus\"\n\t}\n}\n;\nvar res = require('resources');\nvar userData = res.getVocabulary('user') || {};\nres.setVocabulary(require('utils').deepMerge(userData, snippets), 'user');\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/emmet/emmet.js\n// module id = n7l+\n// module chunks = 0"],"sourceRoot":""}